{"version":3,"file":"plyr.js","sources":["src/js/storage.js","src/js/types.js","src/js/defaults.js","src/js/utils.js","src/js/support.js","src/js/fullscreen.js","src/js/listeners.js","src/js/ui.js","src/js/controls.js","src/js/captions.js","src/js/plugins/youtube.js","src/js/plugins/vimeo.js","src/js/media.js","src/js/source.js","src/js/plyr.js"],"sourcesContent":["// ==========================================================================\n// Plyr storage\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\n\n// Get contents of local storage\nfunction get() {\n    const store = window.localStorage.getItem(this.config.storage.key);\n\n    if (utils.is.empty(store)) {\n        return {};\n    }\n\n    return JSON.parse(store);\n}\n\n// Save a value back to local storage\nfunction set(object) {\n    // Bail if we don't have localStorage support or it's disabled\n    if (!support.storage || !this.config.storage.enabled) {\n        return;\n    }\n\n    // Can only store objectst\n    if (!utils.is.object(object)) {\n        return;\n    }\n\n    // Get current storage\n    const storage = get.call(this);\n\n    // Update the working copy of the values\n    utils.extend(storage, object);\n\n    // Update storage\n    window.localStorage.setItem(this.config.storage.key, JSON.stringify(storage));\n}\n\n// Setup localStorage\nfunction setup() {\n    let value = null;\n    let storage = {};\n\n    // Bail if we don't have localStorage support or it's disabled\n    if (!support.storage || !this.config.storage.enabled) {\n        return storage;\n    }\n\n    // Clean up old volume\n    // https://github.com/sampotts/plyr/issues/171\n    window.localStorage.removeItem('plyr-volume');\n\n    // load value from the current key\n    value = window.localStorage.getItem(this.config.storage.key);\n\n    if (!value) {\n        // Key wasn't set (or had been cleared), move along\n    } else if (/^\\d+(\\.\\d+)?$/.test(value)) {\n        // If value is a number, it's probably volume from an older\n        // version of this. See: https://github.com/sampotts/plyr/pull/313\n        // Update the key to be JSON\n        set({\n            volume: parseFloat(value),\n        });\n    } else {\n        // Assume it's JSON from this or a later version of plyr\n        storage = JSON.parse(value);\n    }\n\n    return storage;\n}\n\nexport default { setup, set, get };\n","// ==========================================================================\n// Plyr supported types and providers\n// ==========================================================================\n\nexport const providers = {\n    html5: 'html5',\n    youtube: 'youtube',\n    vimeo: 'vimeo',\n};\n\nexport const types = {\n    audio: 'audio',\n    video: 'video',\n};\n\nexport default { providers, types };\n","// Default config\nconst defaults = {\n    // Disable\n    enabled: true,\n\n    // Custom media title\n    title: '',\n\n    // Logging to console\n    debug: false,\n\n    // Auto play (if supported)\n    autoplay: false,\n\n    // Only allow one media playing at once (vimeo only)\n    autopause: true,\n\n    // Default time to skip when rewind/fast forward\n    seekTime: 10,\n\n    // Default volume\n    volume: 1,\n    muted: false,\n\n    // Pass a custom duration\n    duration: null,\n\n    // Display the media duration on load in the current time position\n    // If you have opted to display both duration and currentTime, this is ignored\n    displayDuration: true,\n\n    // Invert the current time to be a countdown\n    invertTime: true,\n\n    // Clicking the currentTime inverts it's value to show time left rather than elapsed\n    toggleInvert: true,\n\n    // Aspect ratio (for embeds)\n    ratio: '16:9',\n\n    // Click video container to play/pause\n    clickToPlay: true,\n\n    // Auto hide the controls\n    hideControls: true,\n\n    // Revert to poster on finish (HTML5 - will cause reload)\n    showPosterOnEnd: false,\n\n    // Disable the standard context menu\n    disableContextMenu: true,\n\n    // Sprite (for icons)\n    loadSprite: true,\n    iconPrefix: 'plyr',\n    iconUrl: 'https://cdn.plyr.io/2.0.10/plyr.svg',\n\n    // Blank video (used to prevent errors on source change)\n    blankVideo: 'https://cdn.plyr.io/static/blank.mp4',\n\n    // Quality default\n    quality: {\n        default: 'default',\n        options: ['hd2160', 'hd1440', 'hd1080', 'hd720', 'large', 'medium', 'small', 'tiny', 'default'],\n    },\n\n    // Set loops\n    loop: {\n        active: false,\n        // start: null,\n        // end: null,\n    },\n\n    // Speed default and options to display\n    speed: {\n        selected: 1,\n        options: [0.5, 0.75, 1, 1.25, 1.5, 1.75, 2],\n    },\n\n    // Keyboard shortcut settings\n    keyboard: {\n        focused: true,\n        global: false,\n    },\n\n    // Display tooltips\n    tooltips: {\n        controls: false,\n        seek: true,\n    },\n\n    // Captions settings\n    captions: {\n        active: false,\n        language: window.navigator.language.split('-')[0],\n    },\n\n    // Fullscreen settings\n    fullscreen: {\n        enabled: true, // Allow fullscreen?\n        fallback: true, // Fallback for vintage browsers\n    },\n\n    // Local storage\n    storage: {\n        enabled: true,\n        key: 'plyr',\n    },\n\n    // Default controls\n    controls: ['play-large', 'play', 'progress', 'current-time', 'mute', 'volume', 'captions', 'settings', 'pip', 'airplay', 'fullscreen'],\n    settings: ['captions', 'quality', 'speed', 'loop'],\n\n    // Localisation\n    i18n: {\n        restart: 'Restart',\n        rewind: 'Rewind {seektime} secs',\n        play: 'Play',\n        pause: 'Pause',\n        forward: 'Forward {seektime} secs',\n        seek: 'Seek',\n        played: 'Played',\n        buffered: 'Buffered',\n        currentTime: 'Current time',\n        duration: 'Duration',\n        volume: 'Volume',\n        mute: 'Mute',\n        unmute: 'Unmute',\n        enableCaptions: 'Enable captions',\n        disableCaptions: 'Disable captions',\n        enterFullscreen: 'Enter fullscreen',\n        exitFullscreen: 'Exit fullscreen',\n        frameTitle: 'Player for {title}',\n        captions: 'Captions',\n        settings: 'Settings',\n        speed: 'Speed',\n        quality: 'Quality',\n        loop: 'Loop',\n        start: 'Start',\n        end: 'End',\n        all: 'All',\n        reset: 'Reset',\n        none: 'None',\n        disabled: 'Disabled',\n    },\n\n    // URLs\n    urls: {\n        vimeo: {\n            api: 'https://player.vimeo.com/api/player.js',\n        },\n        youtube: {\n            api: 'https://www.youtube.com/iframe_api',\n        },\n    },\n\n    // Custom control listeners\n    listeners: {\n        seek: null,\n        play: null,\n        pause: null,\n        restart: null,\n        rewind: null,\n        forward: null,\n        mute: null,\n        volume: null,\n        captions: null,\n        fullscreen: null,\n        pip: null,\n        airplay: null,\n        speed: null,\n        quality: null,\n        loop: null,\n        language: null,\n    },\n\n    // Events to watch and bubble\n    events: [\n        // Events to watch on HTML5 media elements and bubble\n        // https://developer.mozilla.org/en/docs/Web/Guide/Events/Media_events\n        'ended',\n        'progress',\n        'stalled',\n        'playing',\n        'waiting',\n        'canplay',\n        'canplaythrough',\n        'loadstart',\n        'loadeddata',\n        'loadedmetadata',\n        'timeupdate',\n        'volumechange',\n        'play',\n        'pause',\n        'error',\n        'seeking',\n        'seeked',\n        'emptied',\n        'ratechange',\n        'cuechange',\n\n        // Custom events\n        'enterfullscreen',\n        'exitfullscreen',\n        'captionsenabled',\n        'captionsdisabled',\n        'languagechange',\n        'controlshidden',\n        'controlsshown',\n        'ready',\n\n        // YouTube\n        'statechange',\n        'qualitychange',\n        'qualityrequested',\n    ],\n\n    // Selectors\n    // Change these to match your template if using custom HTML\n    selectors: {\n        editable: 'input, textarea, select, [contenteditable]',\n        container: '.plyr',\n        controls: {\n            container: null,\n            wrapper: '.plyr__controls',\n        },\n        labels: '[data-plyr]',\n        buttons: {\n            play: '[data-plyr=\"play\"]',\n            pause: '[data-plyr=\"pause\"]',\n            restart: '[data-plyr=\"restart\"]',\n            rewind: '[data-plyr=\"rewind\"]',\n            forward: '[data-plyr=\"fast-forward\"]',\n            mute: '[data-plyr=\"mute\"]',\n            captions: '[data-plyr=\"captions\"]',\n            fullscreen: '[data-plyr=\"fullscreen\"]',\n            pip: '[data-plyr=\"pip\"]',\n            airplay: '[data-plyr=\"airplay\"]',\n            settings: '[data-plyr=\"settings\"]',\n            loop: '[data-plyr=\"loop\"]',\n        },\n        inputs: {\n            seek: '[data-plyr=\"seek\"]',\n            volume: '[data-plyr=\"volume\"]',\n            speed: '[data-plyr=\"speed\"]',\n            language: '[data-plyr=\"language\"]',\n            quality: '[data-plyr=\"quality\"]',\n        },\n        display: {\n            currentTime: '.plyr__time--current',\n            duration: '.plyr__time--duration',\n            buffer: '.plyr__progress--buffer',\n            played: '.plyr__progress--played',\n            loop: '.plyr__progress--loop',\n            volume: '.plyr__volume--display',\n        },\n        progress: '.plyr__progress',\n        captions: '.plyr__captions',\n        menu: {\n            quality: '.js-plyr__menu__list--quality',\n        },\n    },\n\n    // Class hooks added to the player in different states\n    classNames: {\n        video: 'plyr__video-wrapper',\n        embed: 'plyr__video-embed',\n        control: 'plyr__control',\n        type: 'plyr--{0}',\n        provider: 'plyr--{0}',\n        stopped: 'plyr--stopped',\n        playing: 'plyr--playing',\n        loading: 'plyr--loading',\n        hover: 'plyr--hover',\n        tooltip: 'plyr__tooltip',\n        hidden: 'plyr__sr-only',\n        hideControls: 'plyr--hide-controls',\n        isIos: 'plyr--is-ios',\n        isTouch: 'plyr--is-touch',\n        uiSupported: 'plyr--full-ui',\n        noTransition: 'plyr--no-transition',\n        menu: {\n            value: 'plyr__menu__value',\n            badge: 'plyr__badge',\n            open: 'plyr--menu-open',\n        },\n        captions: {\n            enabled: 'plyr--captions-enabled',\n            active: 'plyr--captions-active',\n        },\n        fullscreen: {\n            enabled: 'plyr--fullscreen-enabled',\n            fallback: 'plyr--fullscreen-fallback',\n        },\n        pip: {\n            supported: 'plyr--pip-supported',\n            active: 'plyr--pip-active',\n        },\n        airplay: {\n            supported: 'plyr--airplay-supported',\n            active: 'plyr--airplay-active',\n        },\n        tabFocus: 'plyr__tab-focus',\n    },\n\n    // API keys\n    keys: {\n        google: null,\n    },\n};\n\nexport default defaults;\n","// ==========================================================================\n// Plyr utils\n// ==========================================================================\n\nimport support from './support';\n\nconst utils = {\n    // Check variable types\n    is: {\n        object(input) {\n            return this.getConstructor(input) === Object;\n        },\n        number(input) {\n            return this.getConstructor(input) === Number && !Number.isNaN(input);\n        },\n        string(input) {\n            return this.getConstructor(input) === String;\n        },\n        boolean(input) {\n            return this.getConstructor(input) === Boolean;\n        },\n        function(input) {\n            return this.getConstructor(input) === Function;\n        },\n        array(input) {\n            return !this.nullOrUndefined(input) && Array.isArray(input);\n        },\n        nodeList(input) {\n            return this.instanceof(input, window.NodeList);\n        },\n        htmlElement(input) {\n            return this.instanceof(input, window.HTMLElement);\n        },\n        textNode(input) {\n            return this.getConstructor(input) === Text;\n        },\n        event(input) {\n            return this.instanceof(input, window.Event);\n        },\n        cue(input) {\n            return this.instanceof(input, window.TextTrackCue) || this.instanceof(input, window.VTTCue);\n        },\n        track(input) {\n            return this.instanceof(input, window.TextTrack) || (!this.nullOrUndefined(input) && this.string(input.kind));\n        },\n        nullOrUndefined(input) {\n            return input === null || typeof input === 'undefined';\n        },\n        empty(input) {\n            return (\n                this.nullOrUndefined(input) ||\n                ((this.string(input) || this.array(input) || this.nodeList(input)) && !input.length) ||\n                (this.object(input) && !Object.keys(input).length)\n            );\n        },\n        instanceof(input, constructor) {\n            return Boolean(input && constructor && input instanceof constructor);\n        },\n        getConstructor(input) {\n            return !this.nullOrUndefined(input) ? input.constructor : null;\n        },\n    },\n\n    // Unfortunately, due to mixed support, UA sniffing is required\n    getBrowser() {\n        return {\n            isIE: /* @cc_on!@ */ false || !!document.documentMode,\n            isWebkit: 'WebkitAppearance' in document.documentElement.style && !/Edge/.test(navigator.userAgent),\n            isIPhone: /(iPhone|iPod)/gi.test(navigator.platform),\n            isIos: /(iPad|iPhone|iPod)/gi.test(navigator.platform),\n        };\n    },\n\n    // Load an external script\n    loadScript(url, callback) {\n        const current = document.querySelector(`script[src=\"${url}\"]`);\n\n        // Check script is not already referenced, if so wait for load\n        if (current !== null) {\n            current.callbacks = current.callbacks || [];\n            current.callbacks.push(callback);\n            return;\n        }\n\n        // Build the element\n        const element = document.createElement('script');\n\n        // Callback queue\n        element.callbacks = element.callbacks || [];\n        element.callbacks.push(callback);\n\n        // Bind callback\n        if (utils.is.function(callback)) {\n            element.addEventListener(\n                'load',\n                event => {\n                    element.callbacks.forEach(cb => cb.call(null, event));\n                    element.callbacks = null;\n                },\n                false\n            );\n        }\n\n        // Set the URL after binding callback\n        element.src = url;\n\n        // Inject\n        const first = document.getElementsByTagName('script')[0];\n        first.parentNode.insertBefore(element, first);\n    },\n\n    // Load an external SVG sprite\n    loadSprite(url, id) {\n        if (!utils.is.string(url)) {\n            return;\n        }\n\n        const prefix = 'cache-';\n        const hasId = utils.is.string(id);\n        let isCached = false;\n\n        function updateSprite(data) {\n            // Inject content\n            this.innerHTML = data;\n\n            // Inject the SVG to the body\n            document.body.insertBefore(this, document.body.childNodes[0]);\n        }\n\n        // Only load once\n        if (!hasId || !document.querySelectorAll(`#${id}`).length) {\n            // Create container\n            const container = document.createElement('div');\n            utils.toggleHidden(container, true);\n\n            if (hasId) {\n                container.setAttribute('id', id);\n            }\n\n            // Check in cache\n            if (support.storage) {\n                const cached = window.localStorage.getItem(prefix + id);\n                isCached = cached !== null;\n\n                if (isCached) {\n                    const data = JSON.parse(cached);\n                    updateSprite.call(container, data.content);\n                    return;\n                }\n            }\n\n            // Get the sprite\n            fetch(url)\n                .then(response => (response.ok ? response.text() : null))\n                .then(text => {\n                    if (text === null) {\n                        return;\n                    }\n\n                    if (support.storage) {\n                        window.localStorage.setItem(\n                            prefix + id,\n                            JSON.stringify({\n                                content: text,\n                            })\n                        );\n                    }\n\n                    updateSprite.call(container, text);\n                })\n                .catch(() => {});\n        }\n    },\n\n    // Generate a random ID\n    generateId(prefix) {\n        return `${prefix}-${Math.floor(Math.random() * 10000)}`;\n    },\n\n    // Determine if we're in an iframe\n    inFrame() {\n        try {\n            return window.self !== window.top;\n        } catch (e) {\n            return true;\n        }\n    },\n\n    // Wrap an element\n    wrap(elements, wrapper) {\n        // Convert `elements` to an array, if necessary.\n        const targets = elements.length ? elements : [elements];\n\n        // Loops backwards to prevent having to clone the wrapper on the\n        // first element (see `child` below).\n        Array.from(targets)\n            .reverse()\n            .forEach((element, index) => {\n                const child = index > 0 ? wrapper.cloneNode(true) : wrapper;\n\n                // Cache the current parent and sibling.\n                const parent = element.parentNode;\n                const sibling = element.nextSibling;\n\n                // Wrap the element (is automatically removed from its current\n                // parent).\n                child.appendChild(element);\n\n                // If the element had a sibling, insert the wrapper before\n                // the sibling to maintain the HTML structure; otherwise, just\n                // append it to the parent.\n                if (sibling) {\n                    parent.insertBefore(child, sibling);\n                } else {\n                    parent.appendChild(child);\n                }\n            });\n    },\n\n    // Create a DocumentFragment\n    createElement(type, attributes, text) {\n        // Create a new <element>\n        const element = document.createElement(type);\n\n        // Set all passed attributes\n        if (utils.is.object(attributes)) {\n            utils.setAttributes(element, attributes);\n        }\n\n        // Add text node\n        if (utils.is.string(text)) {\n            element.textContent = text;\n        }\n\n        // Return built element\n        return element;\n    },\n\n    // Inaert an element after another\n    insertAfter(element, target) {\n        target.parentNode.insertBefore(element, target.nextSibling);\n    },\n\n    // Insert a DocumentFragment\n    insertElement(type, parent, attributes, text) {\n        // Inject the new <element>\n        parent.appendChild(utils.createElement(type, attributes, text));\n    },\n\n    // Remove an element\n    removeElement(element) {\n        if (!utils.is.htmlElement(element) || !utils.is.htmlElement(element.parentNode)) {\n            return null;\n        }\n\n        element.parentNode.removeChild(element);\n\n        return element;\n    },\n\n    // Remove all child elements\n    emptyElement(element) {\n        let { length } = element.childNodes;\n\n        while (length > 0) {\n            element.removeChild(element.lastChild);\n            length -= 1;\n        }\n    },\n\n    // Set attributes\n    setAttributes(element, attributes) {\n        Object.keys(attributes).forEach(key => {\n            element.setAttribute(key, attributes[key]);\n        });\n    },\n\n    // Get an attribute object from a string selector\n    getAttributesFromSelector(sel, existingAttributes) {\n        // For example:\n        // '.test' to { class: 'test' }\n        // '#test' to { id: 'test' }\n        // '[data-test=\"test\"]' to { 'data-test': 'test' }\n\n        if (!utils.is.string(sel) || utils.is.empty(sel)) {\n            return {};\n        }\n\n        const attributes = {};\n        const existing = existingAttributes;\n\n        sel.split(',').forEach(s => {\n            // Remove whitespace\n            const selector = s.trim();\n            const className = selector.replace('.', '');\n            const stripped = selector.replace(/[[\\]]/g, '');\n\n            // Get the parts and value\n            const parts = stripped.split('=');\n            const key = parts[0];\n            const value = parts.length > 1 ? parts[1].replace(/[\"']/g, '') : '';\n\n            // Get the first character\n            const start = selector.charAt(0);\n\n            switch (start) {\n                case '.':\n                    // Add to existing classname\n                    if (utils.is.object(existing) && utils.is.string(existing.class)) {\n                        existing.class += ` ${className}`;\n                    }\n\n                    attributes.class = className;\n                    break;\n\n                case '#':\n                    // ID selector\n                    attributes.id = selector.replace('#', '');\n                    break;\n\n                case '[':\n                    // Attribute selector\n                    attributes[key] = value;\n\n                    break;\n\n                default:\n                    break;\n            }\n        });\n\n        return attributes;\n    },\n\n    // Toggle class on an element\n    toggleClass(element, className, toggle) {\n        if (utils.is.htmlElement(element)) {\n            const contains = element.classList.contains(className);\n\n            element.classList[toggle ? 'add' : 'remove'](className);\n\n            return (toggle && !contains) || (!toggle && contains);\n        }\n\n        return null;\n    },\n\n    // Has class name\n    hasClass(element, className) {\n        return utils.is.htmlElement(element) && element.classList.contains(className);\n    },\n\n    // Toggle hidden attribute on an element\n    toggleHidden(element, toggle) {\n        if (!utils.is.htmlElement(element)) {\n            return;\n        }\n\n        if (toggle) {\n            element.setAttribute('hidden', '');\n        } else {\n            element.removeAttribute('hidden');\n        }\n    },\n\n    // Element matches selector\n    matches(element, selector) {\n        const prototype = { Element };\n\n        function match() {\n            return Array.from(document.querySelectorAll(selector)).includes(this);\n        }\n\n        const matches = prototype.matches || prototype.webkitMatchesSelector || prototype.mozMatchesSelector || prototype.msMatchesSelector || match;\n\n        return matches.call(element, selector);\n    },\n\n    // Find all elements\n    getElements(selector) {\n        return this.elements.container.querySelectorAll(selector);\n    },\n\n    // Find a single element\n    getElement(selector) {\n        return this.elements.container.querySelector(selector);\n    },\n\n    // Find the UI controls and store references in custom controls\n    // TODO: Allow settings menus with custom controls\n    findElements() {\n        try {\n            this.elements.controls = utils.getElement.call(this, this.config.selectors.controls.wrapper);\n\n            // Buttons\n            this.elements.buttons = {\n                play: utils.getElements.call(this, this.config.selectors.buttons.play),\n                pause: utils.getElement.call(this, this.config.selectors.buttons.pause),\n                restart: utils.getElement.call(this, this.config.selectors.buttons.restart),\n                rewind: utils.getElement.call(this, this.config.selectors.buttons.rewind),\n                forward: utils.getElement.call(this, this.config.selectors.buttons.forward),\n                mute: utils.getElement.call(this, this.config.selectors.buttons.mute),\n                pip: utils.getElement.call(this, this.config.selectors.buttons.pip),\n                airplay: utils.getElement.call(this, this.config.selectors.buttons.airplay),\n                settings: utils.getElement.call(this, this.config.selectors.buttons.settings),\n                captions: utils.getElement.call(this, this.config.selectors.buttons.captions),\n                fullscreen: utils.getElement.call(this, this.config.selectors.buttons.fullscreen),\n            };\n\n            // Progress\n            this.elements.progress = utils.getElement.call(this, this.config.selectors.progress);\n\n            // Inputs\n            this.elements.inputs = {\n                seek: utils.getElement.call(this, this.config.selectors.inputs.seek),\n                volume: utils.getElement.call(this, this.config.selectors.inputs.volume),\n            };\n\n            // Display\n            this.elements.display = {\n                buffer: utils.getElement.call(this, this.config.selectors.display.buffer),\n                duration: utils.getElement.call(this, this.config.selectors.display.duration),\n                currentTime: utils.getElement.call(this, this.config.selectors.display.currentTime),\n            };\n\n            // Seek tooltip\n            if (utils.is.htmlElement(this.elements.progress)) {\n                this.elements.display.seekTooltip = this.elements.progress.querySelector(`.${this.config.classNames.tooltip}`);\n            }\n\n            return true;\n        } catch (error) {\n            // Log it\n            this.console.warn('It looks like there is a problem with your custom controls HTML', error);\n\n            // Restore native video controls\n            this.toggleNativeControls(true);\n\n            return false;\n        }\n    },\n\n    // Get the focused element\n    getFocusElement() {\n        let focused = document.activeElement;\n\n        if (!focused || focused === document.body) {\n            focused = null;\n        } else {\n            focused = document.querySelector(':focus');\n        }\n\n        return focused;\n    },\n\n    // Trap focus inside container\n    trapFocus() {\n        const focusable = utils.getElements.call(this, 'button:not(:disabled), input:not(:disabled), [tabindex]');\n        const first = focusable[0];\n        const last = focusable[focusable.length - 1];\n\n        utils.on(\n            this.elements.container,\n            'keydown',\n            event => {\n                // Bail if not tab key or not fullscreen\n                if (event.key !== 'Tab' || event.keyCode !== 9 || !this.fullscreen.active) {\n                    return;\n                }\n\n                // Get the current focused element\n                const focused = utils.getFocusElement();\n\n                if (focused === last && !event.shiftKey) {\n                    // Move focus to first element that can be tabbed if Shift isn't used\n                    first.focus();\n                    event.preventDefault();\n                } else if (focused === first && event.shiftKey) {\n                    // Move focus to last element that can be tabbed if Shift is used\n                    last.focus();\n                    event.preventDefault();\n                }\n            },\n            false\n        );\n    },\n\n    // Toggle event listener\n    toggleListener(elements, event, callback, toggle, passive, capture) {\n        // Bail if no elements\n        if (utils.is.nullOrUndefined(elements)) {\n            return;\n        }\n\n        // If a nodelist is passed, call itself on each node\n        if (utils.is.nodeList(elements)) {\n            // Create listener for each node\n            Array.from(elements).forEach(element => {\n                if (element instanceof Node) {\n                    utils.toggleListener.call(null, element, event, callback, toggle, passive, capture);\n                }\n            });\n\n            return;\n        }\n\n        // Allow multiple events\n        const events = event.split(' ');\n\n        // Build options\n        // Default to just capture boolean\n        let options = utils.is.boolean(capture) ? capture : false;\n\n        // If passive events listeners are supported\n        if (support.passiveListeners) {\n            options = {\n                // Whether the listener can be passive (i.e. default never prevented)\n                passive: utils.is.boolean(passive) ? passive : true,\n                // Whether the listener is a capturing listener or not\n                capture: utils.is.boolean(capture) ? capture : false,\n            };\n        }\n\n        // If a single node is passed, bind the event listener\n        events.forEach(type => {\n            elements[toggle ? 'addEventListener' : 'removeEventListener'](type, callback, options);\n        });\n    },\n\n    // Bind event handler\n    on(element, events, callback, passive, capture) {\n        utils.toggleListener(element, events, callback, true, passive, capture);\n    },\n\n    // Unbind event handler\n    off(element, events, callback, passive, capture) {\n        utils.toggleListener(element, events, callback, false, passive, capture);\n    },\n\n    // Trigger event\n    dispatchEvent(element, type, bubbles, detail) {\n        // Bail if no element\n        if (!element || !type) {\n            return;\n        }\n\n        // Create and dispatch the event\n        const event = new CustomEvent(type, {\n            bubbles: utils.is.boolean(bubbles) ? bubbles : false,\n            detail: Object.assign({}, detail, {\n                plyr: this instanceof Plyr ? this : null,\n            }),\n        });\n\n        // Dispatch the event\n        element.dispatchEvent(event);\n    },\n\n    // Toggle aria-pressed state on a toggle button\n    // http://www.ssbbartgroup.com/blog/how-not-to-misuse-aria-states-properties-and-roles\n    toggleState(element, input) {\n        // Bail if no target\n        if (!utils.is.htmlElement(element)) {\n            return;\n        }\n\n        // Get state\n        const pressed = element.getAttribute('aria-pressed') === 'true';\n        const state = utils.is.boolean(input) ? input : !pressed;\n\n        // Set the attribute on target\n        element.setAttribute('aria-pressed', state);\n    },\n\n    // Get percentage\n    getPercentage(current, max) {\n        if (current === 0 || max === 0 || Number.isNaN(current) || Number.isNaN(max)) {\n            return 0;\n        }\n        return (current / max * 100).toFixed(2);\n    },\n\n    // Deep extend/merge destination object with N more objects\n    // http://andrewdupont.net/2009/08/28/deep-extending-objects-in-javascript/\n    // Removed call to arguments.callee (used explicit function name instead)\n    extend(...objects) {\n        const { length } = objects;\n\n        // Bail if nothing to merge\n        if (!length) {\n            return null;\n        }\n\n        // Return first if specified but nothing to merge\n        if (length === 1) {\n            return objects[0];\n        }\n\n        // First object is the destination\n        let destination = Array.prototype.shift.call(objects);\n        if (!utils.is.object(destination)) {\n            destination = {};\n        }\n\n        // Loop through all objects to merge\n        objects.forEach(source => {\n            if (!utils.is.object(source)) {\n                return;\n            }\n\n            Object.keys(source).forEach(property => {\n                if (source[property] && source[property].constructor && source[property].constructor === Object) {\n                    destination[property] = destination[property] || {};\n                    utils.extend(destination[property], source[property]);\n                } else {\n                    destination[property] = source[property];\n                }\n            });\n        });\n\n        return destination;\n    },\n\n    // Parse YouTube ID from URL\n    parseYouTubeId(url) {\n        const regex = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n        return url.match(regex) ? RegExp.$2 : url;\n    },\n\n    // Parse Vimeo ID from URL\n    parseVimeoId(url) {\n        if (utils.is.number(Number(url))) {\n            return url;\n        }\n\n        const regex = /^.*(vimeo.com\\/|video\\/)(\\d+).*/;\n        return url.match(regex) ? RegExp.$2 : url;\n    },\n\n    // Convert object to URL parameters\n    buildUrlParameters(input) {\n        if (!utils.is.object(input)) {\n            return '';\n        }\n\n        return Object.keys(input)\n            .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(input[key])}`)\n            .join('&');\n    },\n\n    // Remove HTML from a string\n    stripHTML(source) {\n        const fragment = document.createDocumentFragment();\n        const element = document.createElement('div');\n        fragment.appendChild(element);\n        element.innerHTML = source;\n        return fragment.firstChild.innerText;\n    },\n\n    // Get aspect ratio for dimensions\n    getAspectRatio(width, height) {\n        const getRatio = (w, h) => (h === 0 ? w : getRatio(h, w % h));\n        const ratio = getRatio(width, height);\n        return `${width / ratio}:${height / ratio}`;\n    },\n\n    // Get the transition end event\n    transitionEnd: (() => {\n        const element = document.createElement('span');\n\n        const events = {\n            WebkitTransition: 'webkitTransitionEnd',\n            MozTransition: 'transitionend',\n            OTransition: 'oTransitionEnd otransitionend',\n            transition: 'transitionend',\n        };\n\n        const type = Object.keys(events).find(event => element.style[event] !== undefined);\n\n        return typeof type === 'string' ? type : false;\n    })(),\n};\n\nexport default utils;\n","// ==========================================================================\n// Plyr support checks\n// ==========================================================================\n\nimport utils from './utils';\n\n// Check for feature support\nconst support = {\n    // Basic support\n    audio: 'canPlayType' in document.createElement('audio'),\n    video: 'canPlayType' in document.createElement('video'),\n\n    // Check for support\n    // Basic functionality vs full UI\n    check(type, provider, inline) {\n        let api = false;\n        let ui = false;\n        const browser = utils.getBrowser();\n        const playsInline = browser.isIPhone && inline && support.inline;\n\n        switch (`${provider}:${type}`) {\n            case 'html5:video':\n                api = support.video;\n                ui = api && support.rangeInput && (!browser.isIPhone || playsInline);\n                break;\n\n            case 'html5:audio':\n                api = support.audio;\n                ui = api && support.rangeInput;\n                break;\n\n            case 'youtube:video':\n                api = true;\n                ui = support.rangeInput && (!browser.isIPhone || playsInline);\n                break;\n\n            case 'vimeo:video':\n                api = true;\n                ui = support.rangeInput && !browser.isIPhone;\n                break;\n\n            default:\n                api = support.audio && support.video;\n                ui = api && support.rangeInput;\n        }\n\n        return {\n            api,\n            ui,\n        };\n    },\n\n    // Local storage\n    // We can't assume if local storage is present that we can use it\n    storage: (() => {\n        if (!('localStorage' in window)) {\n            return false;\n        }\n\n        // Try to use it (it might be disabled, e.g. user is in private/porn mode)\n        // see: https://github.com/sampotts/plyr/issues/131\n        const test = '___test';\n        try {\n            window.localStorage.setItem(test, test);\n            window.localStorage.removeItem(test);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    })(),\n\n    // Picture-in-picture support\n    // Safari only currently\n    pip: (() => {\n        const browser = utils.getBrowser();\n        return !browser.isIPhone && utils.is.function(utils.createElement('video').webkitSetPresentationMode);\n    })(),\n\n    // Airplay support\n    // Safari only currently\n    airplay: utils.is.function(window.WebKitPlaybackTargetAvailabilityEvent),\n\n    // Inline playback support\n    // https://webkit.org/blog/6784/new-video-policies-for-ios/\n    inline: 'playsInline' in document.createElement('video'),\n\n    // Check for mime type support against a player instance\n    // Credits: http://diveintohtml5.info/everything.html\n    // Related: http://www.leanbackplayer.com/test/h5mt.html\n    mime(type) {\n        const { media } = this;\n\n        try {\n            // Bail if no checking function\n            if (!this.isHTML5 || !utils.is.function(media.canPlayType)) {\n                return false;\n            }\n\n            // Type specific checks\n            if (this.isVideo) {\n                switch (type) {\n                    case 'video/webm':\n                        return media.canPlayType('video/webm; codecs=\"vp8, vorbis\"').replace(/no/, '');\n\n                    case 'video/mp4':\n                        return media.canPlayType('video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"').replace(/no/, '');\n\n                    case 'video/ogg':\n                        return media.canPlayType('video/ogg; codecs=\"theora\"').replace(/no/, '');\n\n                    default:\n                        return false;\n                }\n            } else if (this.isAudio) {\n                switch (type) {\n                    case 'audio/mpeg':\n                        return media.canPlayType('audio/mpeg;').replace(/no/, '');\n\n                    case 'audio/ogg':\n                        return media.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/no/, '');\n\n                    case 'audio/wav':\n                        return media.canPlayType('audio/wav; codecs=\"1\"').replace(/no/, '');\n\n                    default:\n                        return false;\n                }\n            }\n        } catch (e) {\n            return false;\n        }\n\n        // If we got this far, we're stuffed\n        return false;\n    },\n\n    // Check for textTracks support\n    textTracks: 'textTracks' in document.createElement('video'),\n\n    // Check for passive event listener support\n    // https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n    // https://www.youtube.com/watch?v=NPM6172J22g\n    passiveListeners: (() => {\n        // Test via a getter in the options object to see if the passive property is accessed\n        let supported = false;\n        try {\n            const options = Object.defineProperty({}, 'passive', {\n                get() {\n                    supported = true;\n                    return null;\n                },\n            });\n            window.addEventListener('test', null, options);\n        } catch (e) {\n            // Do nothing\n        }\n\n        return supported;\n    })(),\n\n    // <input type=\"range\"> Sliders\n    rangeInput: (() => {\n        const range = document.createElement('input');\n        range.type = 'range';\n        return range.type === 'range';\n    })(),\n\n    // Touch\n    // Remember a device can be moust + touch enabled\n    touch: 'ontouchstart' in document.documentElement,\n\n    // Detect transitions support\n    transitions: utils.transitionEnd !== false,\n\n    // Reduced motion iOS & MacOS setting\n    // https://webkit.org/blog/7551/responsive-design-for-motion/\n    reducedMotion: 'matchMedia' in window && window.matchMedia('(prefers-reduced-motion)').matches,\n};\n\nexport default support;\n","// ==========================================================================\n// Plyr fullscreen API\n// ==========================================================================\n\nimport utils from './utils';\n\n// Determine the prefix\nconst prefix = (() => {\n    let value = false;\n\n    if (utils.is.function(document.cancelFullScreen)) {\n        value = '';\n    } else {\n        // Check for fullscreen support by vendor prefix\n        ['webkit', 'o', 'moz', 'ms', 'khtml'].some(pre => {\n            if (utils.is.function(document[`${pre}CancelFullScreen`])) {\n                value = pre;\n                return true;\n            } else if (utils.is.function(document.msExitFullscreen) && document.msFullscreenEnabled) {\n                // Special case for MS (when isn't it?)\n                value = 'ms';\n                return true;\n            }\n\n            return false;\n        });\n    }\n\n    return value;\n})();\n\n// Fullscreen API\nconst fullscreen = {\n    // Get the prefix\n    prefix,\n\n    // Check if we can use it\n    enabled: document.fullscreenEnabled || document.webkitFullscreenEnabled || document.mozFullScreenEnabled || document.msFullscreenEnabled,\n\n    // Yet again Microsoft awesomeness,\n    // Sometimes the prefix is 'ms', sometimes 'MS' to keep you on your toes\n    eventType: prefix === 'ms' ? 'MSFullscreenChange' : `${prefix}fullscreenchange`,\n\n    // Is an element fullscreen\n    isFullScreen(element) {\n        if (!fullscreen.enabled) {\n            return false;\n        }\n\n        const target = utils.is.nullOrUndefined(element) ? document.body : element;\n\n        switch (prefix) {\n            case '':\n                return document.fullscreenElement === target;\n\n            case 'moz':\n                return document.mozFullScreenElement === target;\n\n            default:\n                return document[`${prefix}FullscreenElement`] === target;\n        }\n    },\n\n    // Make an element fullscreen\n    requestFullScreen(element) {\n        if (!fullscreen.enabled) {\n            return false;\n        }\n\n        const target = utils.is.nullOrUndefined(element) ? document.body : element;\n\n        return !prefix.length ? target.requestFullScreen() : target[prefix + (prefix === 'ms' ? 'RequestFullscreen' : 'RequestFullScreen')]();\n    },\n\n    // Bail from fullscreen\n    cancelFullScreen() {\n        if (!fullscreen.enabled) {\n            return false;\n        }\n\n        return !prefix.length ? document.cancelFullScreen() : document[prefix + (prefix === 'ms' ? 'ExitFullscreen' : 'CancelFullScreen')]();\n    },\n\n    // Get the current element\n    element() {\n        if (!fullscreen.enabled) {\n            return null;\n        }\n\n        return !prefix.length ? document.fullscreenElement : document[`${prefix}FullscreenElement`];\n    },\n\n    // Setup fullscreen\n    setup() {\n        if (!this.supported.ui || this.isAudio || !this.config.fullscreen.enabled) {\n            return;\n        }\n\n        // Check for native support\n        const nativeSupport = fullscreen.enabled;\n\n        if (nativeSupport || (this.config.fullscreen.fallback && !utils.inFrame())) {\n            this.console.log(`${nativeSupport ? 'Native' : 'Fallback'} fullscreen enabled`);\n\n            // Add styling hook to show button\n            utils.toggleClass(this.elements.container, this.config.classNames.fullscreen.enabled, true);\n        } else {\n            this.console.log('Fullscreen not supported and fallback disabled');\n        }\n\n        // Toggle state\n        if (this.elements.buttons && this.elements.buttons.fullscreen) {\n            utils.toggleState(this.elements.buttons.fullscreen, false);\n        }\n\n        // Trap focus in container\n        utils.trapFocus.call(this);\n    },\n};\n\nexport default fullscreen;\n","// ==========================================================================\n// Plyr Event Listeners\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport controls from './controls';\nimport fullscreen from './fullscreen';\nimport storage from './storage';\nimport ui from './ui';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nconst listeners = {\n    // Global listeners\n    global() {\n        let last = null;\n\n        // Get the key code for an event\n        const getKeyCode = event => (event.keyCode ? event.keyCode : event.which);\n\n        // Handle key press\n        const handleKey = event => {\n            const code = getKeyCode(event);\n            const pressed = event.type === 'keydown';\n            const repeat = pressed && code === last;\n\n            // Bail if a modifier key is set\n            if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\n                return;\n            }\n\n            // If the event is bubbled from the media element\n            // Firefox doesn't get the keycode for whatever reason\n            if (!utils.is.number(code)) {\n                return;\n            }\n\n            // Seek by the number keys\n            const seekByKey = () => {\n                // Divide the max duration into 10th's and times by the number value\n                this.currentTime = this.duration / 10 * (code - 48);\n            };\n\n            // Handle the key on keydown\n            // Reset on keyup\n            if (pressed) {\n                // Which keycodes should we prevent default\n                const preventDefault = [48, 49, 50, 51, 52, 53, 54, 56, 57, 32, 75, 38, 40, 77, 39, 37, 70, 67, 73, 76, 79];\n\n                // Check focused element\n                // and if the focused element is not editable (e.g. text input)\n                // and any that accept key input http://webaim.org/techniques/keyboard/\n                const focused = utils.getFocusElement();\n                if (utils.is.htmlElement(focused) && utils.matches(focused, this.config.selectors.editable)) {\n                    return;\n                }\n\n                // If the code is found prevent default (e.g. prevent scrolling for arrows)\n                if (preventDefault.includes(code)) {\n                    event.preventDefault();\n                    event.stopPropagation();\n                }\n\n                switch (code) {\n                    case 48:\n                    case 49:\n                    case 50:\n                    case 51:\n                    case 52:\n                    case 53:\n                    case 54:\n                    case 55:\n                    case 56:\n                    case 57:\n                        // 0-9\n                        if (!repeat) {\n                            seekByKey();\n                        }\n                        break;\n\n                    case 32:\n                    case 75:\n                        // Space and K key\n                        if (!repeat) {\n                            this.togglePlay();\n                        }\n                        break;\n\n                    case 38:\n                        // Arrow up\n                        this.increaseVolume(0.1);\n                        break;\n\n                    case 40:\n                        // Arrow down\n                        this.decreaseVolume(0.1);\n                        break;\n\n                    case 77:\n                        // M key\n                        if (!repeat) {\n                            this.muted = !this.muted;\n                        }\n                        break;\n\n                    case 39:\n                        // Arrow forward\n                        this.forward();\n                        break;\n\n                    case 37:\n                        // Arrow back\n                        this.rewind();\n                        break;\n\n                    case 70:\n                        // F key\n                        this.toggleFullscreen();\n                        break;\n\n                    case 67:\n                        // C key\n                        if (!repeat) {\n                            this.toggleCaptions();\n                        }\n                        break;\n\n                    case 76:\n                        // L key\n                        this.loop = !this.loop;\n                        break;\n\n                    /* case 73:\n                        this.setLoop('start');\n                        break;\n\n                    case 76:\n                        this.setLoop();\n                        break;\n\n                    case 79:\n                        this.setLoop('end');\n                        break; */\n\n                    default:\n                        break;\n                }\n\n                // Escape is handle natively when in full screen\n                // So we only need to worry about non native\n                if (!fullscreen.enabled && this.fullscreen.active && code === 27) {\n                    this.toggleFullscreen();\n                }\n\n                // Store last code for next cycle\n                last = code;\n            } else {\n                last = null;\n            }\n        };\n\n        // Keyboard shortcuts\n        if (this.config.keyboard.global) {\n            utils.on(window, 'keydown keyup', handleKey, false);\n        } else if (this.config.keyboard.focused) {\n            utils.on(this.elements.container, 'keydown keyup', handleKey, false);\n        }\n\n        // Detect tab focus\n        // Remove class on blur/focusout\n        utils.on(this.elements.container, 'focusout', event => {\n            utils.toggleClass(event.target, this.config.classNames.tabFocus, false);\n        });\n\n        // Add classname to tabbed elements\n        utils.on(this.elements.container, 'keydown', event => {\n            if (event.keyCode !== 9) {\n                return;\n            }\n\n            // Delay the adding of classname until the focus has changed\n            // This event fires before the focusin event\n            window.setTimeout(() => {\n                utils.toggleClass(utils.getFocusElement(), this.config.classNames.tabFocus, true);\n            }, 0);\n        });\n\n        // Toggle controls visibility based on mouse movement\n        if (this.config.hideControls) {\n            // Toggle controls on mouse events and entering fullscreen\n            utils.on(this.elements.container, 'mouseenter mouseleave mousemove touchstart touchend touchmove enterfullscreen exitfullscreen', event => {\n                this.toggleControls(event);\n            });\n        }\n\n        // Handle user exiting fullscreen by escaping etc\n        if (fullscreen.enabled) {\n            utils.on(document, fullscreen.eventType, event => {\n                this.toggleFullscreen(event);\n            });\n        }\n    },\n\n    // Listen for media events\n    media() {\n        // Time change on media\n        utils.on(this.media, 'timeupdate seeking', event => ui.timeUpdate.call(this, event));\n\n        // Display duration\n        utils.on(this.media, 'durationchange loadedmetadata', event => ui.durationUpdate.call(this, event));\n\n        // Check for audio tracks on load\n        // We can't use `loadedmetadata` as it doesn't seem to have audio tracks at that point\n        utils.on(this.media, 'loadeddata', () => {\n            utils.toggleHidden(this.elements.volume, !this.hasAudio);\n            utils.toggleHidden(this.elements.buttons.mute, !this.hasAudio);\n        });\n\n        // Handle the media finishing\n        utils.on(this.media, 'ended', () => {\n            // Show poster on end\n            if (this.isHTML5 && this.isVideo && this.config.showPosterOnEnd) {\n                // Restart\n                this.restart();\n\n                // Re-load media\n                this.media.load();\n            }\n        });\n\n        // Check for buffer progress\n        utils.on(this.media, 'progress playing', event => ui.updateProgress.call(this, event));\n\n        // Handle native mute\n        utils.on(this.media, 'volumechange', event => ui.updateVolume.call(this, event));\n\n        // Handle native play/pause\n        utils.on(this.media, 'playing play pause ended', event => ui.checkPlaying.call(this, event));\n\n        // Loading\n        utils.on(this.media, 'stalled waiting canplay seeked playing', event => ui.checkLoading.call(this, event));\n\n        // Click video\n        if (this.supported.ui && this.config.clickToPlay && !this.isAudio) {\n            // Re-fetch the wrapper\n            const wrapper = utils.getElement.call(this, `.${this.config.classNames.video}`);\n\n            // Bail if there's no wrapper (this should never happen)\n            if (!utils.is.htmlElement(wrapper)) {\n                return;\n            }\n\n            // On click play, pause ore restart\n            utils.on(wrapper, 'click', () => {\n                // Touch devices will just show controls (if we're hiding controls)\n                if (this.config.hideControls && support.touch && !this.paused) {\n                    return;\n                }\n\n                if (this.paused) {\n                    this.play();\n                } else if (this.ended) {\n                    this.restart();\n                    this.play();\n                } else {\n                    this.pause();\n                }\n            });\n        }\n\n        // Disable right click\n        if (this.config.disableContextMenu) {\n            utils.on(\n                this.media,\n                'contextmenu',\n                event => {\n                    event.preventDefault();\n                },\n                false\n            );\n        }\n\n        // Volume change\n        utils.on(this.media, 'volumechange', () => {\n            // Save to storage\n            storage.set.call(this, { volume: this.volume, muted: this.muted });\n        });\n\n        // Speed change\n        utils.on(this.media, 'ratechange', () => {\n            // Update UI\n            controls.updateSetting.call(this, 'speed');\n\n            // Save to storage\n            storage.set.call(this, { speed: this.speed });\n        });\n\n        // Quality change\n        utils.on(this.media, 'qualitychange', () => {\n            // Update UI\n            controls.updateSetting.call(this, 'quality');\n\n            // Save to storage\n            storage.set.call(this, { quality: this.quality });\n        });\n\n        // Caption language change\n        utils.on(this.media, 'languagechange', () => {\n            // Update UI\n            controls.updateSetting.call(this, 'captions');\n\n            // Save to storage\n            storage.set.call(this, { language: this.language });\n        });\n\n        // Captions toggle\n        utils.on(this.media, 'captionsenabled captionsdisabled', () => {\n            // Update UI\n            controls.updateSetting.call(this, 'captions');\n\n            // Save to storage\n            storage.set.call(this, { captions: this.captions.enabled });\n        });\n\n        // Proxy events to container\n        // Bubble up key events for Edge\n        utils.on(this.media, this.config.events.concat(['keyup', 'keydown']).join(' '), event => {\n            let detail = {};\n\n            // Get error details from media\n            if (event.type === 'error') {\n                detail = this.media.error;\n            }\n\n            utils.dispatchEvent.call(this, this.elements.container, event.type, true, detail);\n        });\n    },\n\n    // Listen for control events\n    controls() {\n        // IE doesn't support input event, so we fallback to change\n        const inputEvent = browser.isIE ? 'change' : 'input';\n\n        // Trigger custom and default handlers\n        const proxy = (event, handlerKey, defaultHandler) => {\n            const customHandler = this.config.listeners[handlerKey];\n\n            // Execute custom handler\n            if (utils.is.function(customHandler)) {\n                customHandler.call(this, event);\n            }\n\n            // Only call default handler if not prevented in custom handler\n            if (!event.defaultPrevented && utils.is.function(defaultHandler)) {\n                defaultHandler.call(this, event);\n            }\n        };\n\n        // Play/pause toggle\n        utils.on(this.elements.buttons.play, 'click', event =>\n            proxy(event, 'play', () => {\n                this.togglePlay();\n            })\n        );\n\n        // Pause\n        utils.on(this.elements.buttons.restart, 'click', event =>\n            proxy(event, 'restart', () => {\n                this.restart();\n            })\n        );\n\n        // Rewind\n        utils.on(this.elements.buttons.rewind, 'click', event =>\n            proxy(event, 'rewind', () => {\n                this.rewind();\n            })\n        );\n\n        // Rewind\n        utils.on(this.elements.buttons.forward, 'click', event =>\n            proxy(event, 'forward', () => {\n                this.forward();\n            })\n        );\n\n        // Mute toggle\n        utils.on(this.elements.buttons.mute, 'click', event =>\n            proxy(event, 'mute', () => {\n                this.muted = !this.muted;\n            })\n        );\n\n        // Captions toggle\n        utils.on(this.elements.buttons.captions, 'click', event =>\n            proxy(event, 'captions', () => {\n                this.toggleCaptions();\n            })\n        );\n\n        // Fullscreen toggle\n        utils.on(this.elements.buttons.fullscreen, 'click', event =>\n            proxy(event, 'fullscreen', () => {\n                this.toggleFullscreen();\n            })\n        );\n\n        // Picture-in-Picture\n        utils.on(this.elements.buttons.pip, 'click', event =>\n            proxy(event, 'pip', () => {\n                this.pip = 'toggle';\n            })\n        );\n\n        // Airplay\n        utils.on(this.elements.buttons.airplay, 'click', event =>\n            proxy(event, 'airplay', () => {\n                this.airplay();\n            })\n        );\n\n        // Settings menu\n        utils.on(this.elements.buttons.settings, 'click', event => {\n            controls.toggleMenu.call(this, event);\n        });\n\n        // Click anywhere closes menu\n        utils.on(document.documentElement, 'click', event => {\n            controls.toggleMenu.call(this, event);\n        });\n\n        // Settings menu\n        utils.on(this.elements.settings.form, 'click', event => {\n            event.stopPropagation();\n\n            // Settings menu items - use event delegation as items are added/removed\n            if (utils.matches(event.target, this.config.selectors.inputs.language)) {\n                proxy(event, 'language', () => {\n                    this.language = event.target.value;\n                });\n            } else if (utils.matches(event.target, this.config.selectors.inputs.quality)) {\n                proxy(event, 'quality', () => {\n                    this.quality = event.target.value;\n                });\n            } else if (utils.matches(event.target, this.config.selectors.inputs.speed)) {\n                proxy(event, 'speed', () => {\n                    this.speed = parseFloat(event.target.value);\n                });\n            } else {\n                controls.showTab.call(this, event);\n            }\n        });\n\n        // Seek\n        utils.on(this.elements.inputs.seek, inputEvent, event =>\n            proxy(event, 'seek', () => {\n                this.currentTime = event.target.value / event.target.max * this.duration;\n            })\n        );\n\n        // Current time invert\n        // Only if one time element is used for both currentTime and duration\n        if (this.config.toggleInvert && !utils.is.htmlElement(this.elements.display.duration)) {\n            utils.on(this.elements.display.currentTime, 'click', () => {\n                // Do nothing if we're at the start\n                if (this.currentTime === 0) {\n                    return;\n                }\n\n                this.config.invertTime = !this.config.invertTime;\n                ui.timeUpdate.call(this);\n            });\n        }\n\n        // Volume\n        utils.on(this.elements.inputs.volume, inputEvent, event =>\n            proxy(event, 'volume', () => {\n                this.volume = event.target.value;\n            })\n        );\n\n        // Polyfill for lower fill in <input type=\"range\"> for webkit\n        if (browser.isWebkit) {\n            utils.on(utils.getElements.call(this, 'input[type=\"range\"]'), 'input', event => {\n                controls.updateRangeFill.call(this, event.target);\n            });\n        }\n\n        // Seek tooltip\n        utils.on(this.elements.progress, 'mouseenter mouseleave mousemove', event => controls.updateSeekTooltip.call(this, event));\n\n        // Toggle controls visibility based on mouse movement\n        if (this.config.hideControls) {\n            // Watch for cursor over controls so they don't hide when trying to interact\n            utils.on(this.elements.controls, 'mouseenter mouseleave', event => {\n                this.elements.controls.hover = event.type === 'mouseenter';\n            });\n\n            // Watch for cursor over controls so they don't hide when trying to interact\n            utils.on(this.elements.controls, 'mousedown mouseup touchstart touchend touchcancel', event => {\n                this.elements.controls.pressed = ['mousedown', 'touchstart'].includes(event.type);\n            });\n\n            // Focus in/out on controls\n            utils.on(this.elements.controls, 'focusin focusout', event => {\n                this.toggleControls(event);\n            });\n        }\n\n        // Mouse wheel for volume\n        utils.on(\n            this.elements.inputs.volume,\n            'wheel',\n            event =>\n                proxy(event, 'volume', () => {\n                    // Detect \"natural\" scroll - suppored on OS X Safari only\n                    // Other browsers on OS X will be inverted until support improves\n                    const inverted = event.webkitDirectionInvertedFromDevice;\n                    const step = 1 / 50;\n                    let direction = 0;\n\n                    // Scroll down (or up on natural) to decrease\n                    if (event.deltaY < 0 || event.deltaX > 0) {\n                        if (inverted) {\n                            this.decreaseVolume(step);\n                            direction = -1;\n                        } else {\n                            this.increaseVolume(step);\n                            direction = 1;\n                        }\n                    }\n\n                    // Scroll up (or down on natural) to increase\n                    if (event.deltaY > 0 || event.deltaX < 0) {\n                        if (inverted) {\n                            this.increaseVolume(step);\n                            direction = 1;\n                        } else {\n                            this.decreaseVolume(step);\n                            direction = -1;\n                        }\n                    }\n\n                    // Don't break page scrolling at max and min\n                    if ((direction === 1 && this.media.volume < 1) || (direction === -1 && this.media.volume > 0)) {\n                        event.preventDefault();\n                    }\n                }),\n            false\n        );\n    },\n};\n\nexport default listeners;\n","// ==========================================================================\n// Plyr UI\n// ==========================================================================\n\nimport utils from './utils';\nimport captions from './captions';\nimport controls from './controls';\nimport fullscreen from './fullscreen';\nimport listeners from './listeners';\n\nconst ui = {\n    addStyleHook() {\n        utils.toggleClass(this.elements.container, this.config.selectors.container.replace('.', ''), true);\n        utils.toggleClass(this.elements.container, this.config.classNames.uiSupported, this.supported.ui);\n    },\n\n    // Toggle native HTML5 media controls\n    toggleNativeControls(toggle = false) {\n        if (toggle && this.isHTML5) {\n            this.media.setAttribute('controls', '');\n        } else {\n            this.media.removeAttribute('controls');\n        }\n    },\n\n    // Setup the UI\n    build() {\n        // Re-attach media element listeners\n        // TODO: Use event bubbling\n        listeners.media.call(this);\n\n        // Don't setup interface if no support\n        if (!this.supported.ui) {\n            this.console.warn(`Basic support only for ${this.provider} ${this.type}`);\n\n            // Remove controls\n            utils.removeElement.call(this, 'controls');\n\n            // Remove large play\n            utils.removeElement.call(this, 'buttons.play');\n\n            // Restore native controls\n            ui.toggleNativeControls.call(this, true);\n\n            // Bail\n            return;\n        }\n\n        // Inject custom controls if not present\n        if (!utils.is.htmlElement(this.elements.controls)) {\n            // Inject custom controls\n            controls.inject.call(this);\n\n            // Re-attach control listeners\n            listeners.controls.call(this);\n        }\n\n        // If there's no controls, bail\n        if (!utils.is.htmlElement(this.elements.controls)) {\n            return;\n        }\n\n        // Remove native controls\n        ui.toggleNativeControls.call(this);\n\n        // Setup fullscreen\n        fullscreen.setup.call(this);\n\n        // Captions\n        captions.setup.call(this);\n\n        // Reset volume\n        this.volume = null;\n\n        // Reset mute state\n        this.muted = null;\n\n        // Reset speed\n        this.speed = null;\n\n        // Reset loop state\n        this.loop = null;\n\n        // Reset quality options\n        this.options.quality = [];\n\n        // Reset time display\n        ui.timeUpdate.call(this);\n\n        // Update the UI\n        ui.checkPlaying.call(this);\n\n        // Ready for API calls\n        this.ready = true;\n\n        // Ready event at end of execution stack\n        utils.dispatchEvent.call(this, this.media, 'ready');\n\n        // Set the title\n        ui.setTitle.call(this);\n    },\n\n    // Setup aria attribute for play and iframe title\n    setTitle() {\n        // Find the current text\n        let label = this.config.i18n.play;\n\n        // If there's a media title set, use that for the label\n        if (utils.is.string(this.config.title) && !utils.is.empty(this.config.title)) {\n            label += `, ${this.config.title}`;\n\n            // Set container label\n            this.elements.container.setAttribute('aria-label', this.config.title);\n        }\n\n        // If there's a play button, set label\n        if (utils.is.nodeList(this.elements.buttons.play)) {\n            Array.from(this.elements.buttons.play).forEach(button => {\n                button.setAttribute('aria-label', label);\n            });\n        }\n\n        // Set iframe title\n        // https://github.com/sampotts/plyr/issues/124\n        if (this.isEmbed) {\n            const iframe = utils.getElement.call(this, 'iframe');\n\n            if (!utils.is.htmlElement(iframe)) {\n                return;\n            }\n\n            // Default to media type\n            const title = !utils.is.empty(this.config.title) ? this.config.title : 'video';\n\n            iframe.setAttribute('title', this.config.i18n.frameTitle.replace('{title}', title));\n        }\n    },\n\n    // Check playing state\n    checkPlaying() {\n        // Class hooks\n        utils.toggleClass(this.elements.container, this.config.classNames.playing, this.playing);\n        utils.toggleClass(this.elements.container, this.config.classNames.stopped, this.paused);\n\n        // Set aria state\n        if (utils.is.nodeList(this.elements.buttons.play)) {\n            Array.from(this.elements.buttons.play).forEach(button => utils.toggleState(button, this.playing));\n        }\n\n        // Toggle controls\n        this.toggleControls(!this.playing);\n    },\n\n    // Check if media is loading\n    checkLoading(event) {\n        this.loading = ['stalled', 'waiting'].includes(event.type);\n\n        // Clear timer\n        clearTimeout(this.timers.loading);\n\n        // Timer to prevent flicker when seeking\n        this.timers.loading = setTimeout(() => {\n            // Toggle container class hook\n            utils.toggleClass(this.elements.container, this.config.classNames.loading, this.loading);\n\n            // Show controls if loading, hide if done\n            this.toggleControls(this.loading);\n        }, this.loading ? 250 : 0);\n    },\n\n    // Update volume UI and storage\n    updateVolume() {\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // Update range\n        if (utils.is.htmlElement(this.elements.inputs.volume)) {\n            ui.setRange.call(this, this.elements.inputs.volume, this.muted ? 0 : this.volume);\n        }\n\n        // Update mute state\n        if (utils.is.htmlElement(this.elements.buttons.mute)) {\n            utils.toggleState(this.elements.buttons.mute, this.muted || this.volume === 0);\n        }\n    },\n\n    // Update seek value and lower fill\n    setRange(target, value = 0) {\n        if (!utils.is.htmlElement(target)) {\n            return;\n        }\n\n        // eslint-disable-next-line\n        target.value = value;\n\n        // Webkit range fill\n        controls.updateRangeFill.call(this, target);\n    },\n\n    // Set <progress> value\n    setProgress(target, input) {\n        const value = utils.is.number(input) ? input : 0;\n        const progress = utils.is.htmlElement(target) ? target : this.elements.display.buffer;\n\n        // Update value and label\n        if (utils.is.htmlElement(progress)) {\n            progress.value = value;\n\n            // Update text label inside\n            const label = progress.getElementsByTagName('span')[0];\n            if (utils.is.htmlElement(label)) {\n                label.childNodes[0].nodeValue = value;\n            }\n        }\n    },\n\n    // Update <progress> elements\n    updateProgress(event) {\n        if (!this.supported.ui || !utils.is.event(event)) {\n            return;\n        }\n\n        let value = 0;\n\n        if (event) {\n            switch (event.type) {\n                // Video playing\n                case 'timeupdate':\n                case 'seeking':\n                    value = utils.getPercentage(this.currentTime, this.duration);\n\n                    // Set seek range value only if it's a 'natural' time event\n                    if (event.type === 'timeupdate') {\n                        ui.setRange.call(this, this.elements.inputs.seek, value);\n                    }\n\n                    break;\n\n                // Check buffer status\n                case 'playing':\n                case 'progress':\n                    value = (() => {\n                        const { buffered } = this.media;\n\n                        if (buffered && buffered.length) {\n                            // HTML5\n                            return utils.getPercentage(buffered.end(0), this.duration);\n                        } else if (utils.is.number(buffered)) {\n                            // YouTube returns between 0 and 1\n                            return buffered * 100;\n                        }\n\n                        return 0;\n                    })();\n\n                    ui.setProgress.call(this, this.elements.display.buffer, value);\n\n                    break;\n\n                default:\n                    break;\n            }\n        }\n    },\n\n    // Update the displayed time\n    updateTimeDisplay(target = null, time = 0, inverted = false) {\n        // Bail if there's no element to display or the value isn't a number\n        if (!utils.is.htmlElement(target) || !utils.is.number(time)) {\n            return;\n        }\n\n        // Format time component to add leading zero\n        const format = value => `0${value}`.slice(-2);\n\n        // Helpers\n        const getHours = value => parseInt((value / 60 / 60) % 60, 10);\n        const getMinutes = value => parseInt((value / 60) % 60, 10);\n        const getSeconds = value => parseInt(value % 60, 10);\n\n        // Breakdown to hours, mins, secs\n        let hours = getHours(time);\n        const mins = getMinutes(time);\n        const secs = getSeconds(time);\n\n        // Do we need to display hours?\n        if (getHours(this.duration) > 0) {\n            hours = `${hours}:`;\n        } else {\n            hours = '';\n        }\n\n        // Render\n        // eslint-disable-next-line no-param-reassign\n        target.textContent = `${inverted ? '-' : ''}${hours}${format(mins)}:${format(secs)}`;\n    },\n\n    // Handle time change event\n    timeUpdate(event) {\n        // Only invert if only one time element is displayed and used for both duration and currentTime\n        const invert = !utils.is.htmlElement(this.elements.display.duration) && this.config.invertTime;\n\n        // Duration\n        ui.updateTimeDisplay.call(this, this.elements.display.currentTime, invert ? this.duration - this.currentTime : this.currentTime, invert);\n\n        // Ignore updates while seeking\n        if (event && event.type === 'timeupdate' && this.media.seeking) {\n            return;\n        }\n\n        // Playing progress\n        ui.updateProgress.call(this, event);\n    },\n\n    // Show the duration on metadataloaded\n    durationUpdate() {\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // If there's only one time display, display duration there\n        if (!utils.is.htmlElement(this.elements.display.duration) && this.config.displayDuration && this.paused) {\n            ui.updateTimeDisplay.call(this, this.elements.display.currentTime, this.duration);\n        }\n\n        // If there's a duration element, update content\n        if (utils.is.htmlElement(this.elements.display.duration)) {\n            ui.updateTimeDisplay.call(this, this.elements.display.duration, this.duration);\n        }\n\n        // Update the tooltip (if visible)\n        controls.updateSeekTooltip.call(this);\n    },\n};\n\nexport default ui;\n","// ==========================================================================\n// Plyr controls\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport ui from './ui';\nimport captions from './captions';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nconst controls = {\n    // Webkit polyfill for lower fill range\n    updateRangeFill(target) {\n        // WebKit only\n        if (!browser.isWebkit) {\n            return;\n        }\n\n        // Get range from event if event passed\n        const range = utils.is.event(target) ? target.target : target;\n\n        // Needs to be a valid <input type='range'>\n        if (!utils.is.htmlElement(range) || range.getAttribute('type') !== 'range') {\n            return;\n        }\n\n        // Inject the stylesheet if needed\n        if (!utils.is.htmlElement(this.elements.styleSheet)) {\n            this.elements.styleSheet = utils.createElement('style');\n            this.elements.container.appendChild(this.elements.styleSheet);\n        }\n\n        const styleSheet = this.elements.styleSheet.sheet;\n        const percentage = range.value / range.max * 100;\n        const selector = `#${range.id}::-webkit-slider-runnable-track`;\n        const styles = `{ background-image: linear-gradient(to right, currentColor ${percentage}%, transparent ${percentage}%) }`;\n\n        // Find old rule if it exists\n        const index = Array.from(styleSheet.rules).findIndex(rule => rule.selectorText === selector);\n\n        // Remove old rule\n        if (index !== -1) {\n            styleSheet.deleteRule(index);\n        }\n\n        // Insert new one\n        styleSheet.insertRule([selector, styles].join(' '));\n    },\n\n    // Get icon URL\n    getIconUrl() {\n        return {\n            url: this.config.iconUrl,\n            absolute: this.config.iconUrl.indexOf('http') === 0 || (browser.isIE && !window.svg4everybody),\n        };\n    },\n\n    // Create <svg> icon\n    createIcon(type, attributes) {\n        const namespace = 'http://www.w3.org/2000/svg';\n        const iconUrl = controls.getIconUrl.call(this);\n        const iconPath = `${!iconUrl.absolute ? iconUrl.url : ''}#${this.config.iconPrefix}`;\n\n        // Create <svg>\n        const icon = document.createElementNS(namespace, 'svg');\n        utils.setAttributes(\n            icon,\n            utils.extend(attributes, {\n                role: 'presentation',\n            })\n        );\n\n        // Create the <use> to reference sprite\n        const use = document.createElementNS(namespace, 'use');\n        const path = `${iconPath}-${type}`;\n\n        // Set `href` attributes\n        // https://github.com/sampotts/plyr/issues/460\n        // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/xlink:href\n        if ('href' in use) {\n            use.setAttributeNS('http://www.w3.org/1999/xlink', 'href', path);\n        } else {\n            use.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', path);\n        }\n\n        // Add <use> to <svg>\n        icon.appendChild(use);\n\n        return icon;\n    },\n\n    // Create hidden text label\n    createLabel(type, attr) {\n        let text = this.config.i18n[type];\n        const attributes = Object.assign({}, attr);\n\n        switch (type) {\n            case 'pip':\n                text = 'PIP';\n                break;\n\n            case 'airplay':\n                text = 'AirPlay';\n                break;\n\n            default:\n                break;\n        }\n\n        if ('class' in attributes) {\n            attributes.class += ` ${this.config.classNames.hidden}`;\n        } else {\n            attributes.class = this.config.classNames.hidden;\n        }\n\n        return utils.createElement('span', attributes, text);\n    },\n\n    // Create a badge\n    createBadge(text) {\n        if (utils.is.empty(text)) {\n            return null;\n        }\n\n        const badge = utils.createElement('span', {\n            class: this.config.classNames.menu.value,\n        });\n\n        badge.appendChild(\n            utils.createElement(\n                'span',\n                {\n                    class: this.config.classNames.menu.badge,\n                },\n                text\n            )\n        );\n\n        return badge;\n    },\n\n    // Create a <button>\n    createButton(buttonType, attr) {\n        const button = utils.createElement('button');\n        const attributes = Object.assign({}, attr);\n        let type = buttonType;\n\n        let toggle = false;\n        let label;\n        let icon;\n        let labelPressed;\n        let iconPressed;\n\n        if (!('type' in attributes)) {\n            attributes.type = 'button';\n        }\n\n        if ('class' in attributes) {\n            if (attributes.class.includes(this.config.classNames.control)) {\n                attributes.class += ` ${this.config.classNames.control}`;\n            }\n        } else {\n            attributes.class = this.config.classNames.control;\n        }\n\n        // Large play button\n        switch (type) {\n            case 'play':\n                toggle = true;\n                label = 'play';\n                labelPressed = 'pause';\n                icon = 'play';\n                iconPressed = 'pause';\n                break;\n\n            case 'mute':\n                toggle = true;\n                label = 'mute';\n                labelPressed = 'unmute';\n                icon = 'volume';\n                iconPressed = 'muted';\n                break;\n\n            case 'captions':\n                toggle = true;\n                label = 'enableCaptions';\n                labelPressed = 'disableCaptions';\n                icon = 'captions-off';\n                iconPressed = 'captions-on';\n                break;\n\n            case 'fullscreen':\n                toggle = true;\n                label = 'enterFullscreen';\n                labelPressed = 'exitFullscreen';\n                icon = 'enter-fullscreen';\n                iconPressed = 'exit-fullscreen';\n                break;\n\n            case 'play-large':\n                attributes.class += ` ${this.config.classNames.control}--overlaid`;\n                type = 'play';\n                label = 'play';\n                icon = 'play';\n                break;\n\n            default:\n                label = type;\n                icon = type;\n        }\n\n        // Setup toggle icon and labels\n        if (toggle) {\n            // Icon\n            button.appendChild(controls.createIcon.call(this, iconPressed, { class: 'icon--pressed' }));\n            button.appendChild(controls.createIcon.call(this, icon, { class: 'icon--not-pressed' }));\n\n            // Label/Tooltip\n            button.appendChild(controls.createLabel.call(this, labelPressed, { class: 'label--pressed' }));\n            button.appendChild(controls.createLabel.call(this, label, { class: 'label--not-pressed' }));\n\n            // Add aria attributes\n            attributes['aria-pressed'] = false;\n            attributes['aria-label'] = this.config.i18n[label];\n        } else {\n            button.appendChild(controls.createIcon.call(this, icon));\n            button.appendChild(controls.createLabel.call(this, label));\n        }\n\n        // Merge attributes\n        utils.extend(attributes, utils.getAttributesFromSelector(this.config.selectors.buttons[type], attributes));\n\n        utils.setAttributes(button, attributes);\n\n        this.elements.buttons[type] = button;\n\n        return button;\n    },\n\n    // Create an <input type='range'>\n    createRange(type, attributes) {\n        // Seek label\n        const label = utils.createElement(\n            'label',\n            {\n                for: attributes.id,\n                class: this.config.classNames.hidden,\n            },\n            this.config.i18n[type]\n        );\n\n        // Seek input\n        const input = utils.createElement(\n            'input',\n            utils.extend(\n                utils.getAttributesFromSelector(this.config.selectors.inputs[type]),\n                {\n                    type: 'range',\n                    min: 0,\n                    max: 100,\n                    step: 0.01,\n                    value: 0,\n                    autocomplete: 'off',\n                },\n                attributes\n            )\n        );\n\n        this.elements.inputs[type] = input;\n\n        // Set the fill for webkit now\n        controls.updateRangeFill.call(this, input);\n\n        return {\n            label,\n            input,\n        };\n    },\n\n    // Create a <progress>\n    createProgress(type, attributes) {\n        const progress = utils.createElement(\n            'progress',\n            utils.extend(\n                utils.getAttributesFromSelector(this.config.selectors.display[type]),\n                {\n                    min: 0,\n                    max: 100,\n                    value: 0,\n                },\n                attributes\n            )\n        );\n\n        // Create the label inside\n        if (type !== 'volume') {\n            progress.appendChild(utils.createElement('span', null, '0'));\n\n            let suffix = '';\n            switch (type) {\n                case 'played':\n                    suffix = this.config.i18n.played;\n                    break;\n\n                case 'buffer':\n                    suffix = this.config.i18n.buffered;\n                    break;\n\n                default:\n                    break;\n            }\n\n            progress.textContent = `% ${suffix.toLowerCase()}`;\n        }\n\n        this.elements.display[type] = progress;\n\n        return progress;\n    },\n\n    // Create time display\n    createTime(type) {\n        const container = utils.createElement('span', {\n            class: 'plyr__time',\n        });\n\n        container.appendChild(\n            utils.createElement(\n                'span',\n                {\n                    class: this.config.classNames.hidden,\n                },\n                this.config.i18n[type]\n            )\n        );\n\n        container.appendChild(utils.createElement('span', utils.getAttributesFromSelector(this.config.selectors.display[type]), '00:00'));\n\n        this.elements.display[type] = container;\n\n        return container;\n    },\n\n    // Create a settings menu item\n    createMenuItem(value, list, type, title, badge = null, checked = false) {\n        const item = utils.createElement('li');\n\n        const label = utils.createElement('label', {\n            class: this.config.classNames.control,\n        });\n\n        const radio = utils.createElement(\n            'input',\n            utils.extend(utils.getAttributesFromSelector(this.config.selectors.inputs[type]), {\n                type: 'radio',\n                name: `plyr-${type}`,\n                value,\n                checked,\n                class: 'plyr__sr-only',\n            })\n        );\n\n        const faux = utils.createElement('span', { 'aria-hidden': true });\n\n        label.appendChild(radio);\n        label.appendChild(faux);\n        label.insertAdjacentHTML('beforeend', title);\n\n        if (utils.is.htmlElement(badge)) {\n            label.appendChild(badge);\n        }\n\n        item.appendChild(label);\n        list.appendChild(item);\n    },\n\n    // Update hover tooltip for seeking\n    updateSeekTooltip(event) {\n        // Bail if setting not true\n        if (\n            !this.config.tooltips.seek ||\n            !utils.is.htmlElement(this.elements.inputs.seek) ||\n            !utils.is.htmlElement(this.elements.display.seekTooltip) ||\n            this.duration === 0\n        ) {\n            return;\n        }\n\n        // Calculate percentage\n        let percent = 0;\n        const clientRect = this.elements.inputs.seek.getBoundingClientRect();\n        const visible = `${this.config.classNames.tooltip}--visible`;\n\n        // Determine percentage, if already visible\n        if (utils.is.event(event)) {\n            percent = 100 / clientRect.width * (event.pageX - clientRect.left);\n        } else if (utils.hasClass(this.elements.display.seekTooltip, visible)) {\n            percent = this.elements.display.seekTooltip.style.left.replace('%', '');\n        } else {\n            return;\n        }\n\n        // Set bounds\n        if (percent < 0) {\n            percent = 0;\n        } else if (percent > 100) {\n            percent = 100;\n        }\n\n        // Display the time a click would seek to\n        ui.updateTimeDisplay.call(this, this.elements.display.seekTooltip, this.duration / 100 * percent);\n\n        // Set position\n        this.elements.display.seekTooltip.style.left = `${percent}%`;\n\n        // Show/hide the tooltip\n        // If the event is a moues in/out and percentage is inside bounds\n        if (utils.is.event(event) && ['mouseenter', 'mouseleave'].includes(event.type)) {\n            utils.toggleClass(this.elements.display.seekTooltip, visible, event.type === 'mouseenter');\n        }\n    },\n\n    // Hide/show a tab\n    toggleTab(setting, toggle) {\n        const tab = this.elements.settings.tabs[setting];\n        const pane = this.elements.settings.panes[setting];\n\n        utils.toggleHidden(tab, !toggle);\n        utils.toggleHidden(pane, !toggle);\n    },\n\n    // Set the YouTube quality menu\n    // TODO: Support for HTML5\n    setQualityMenu(options) {\n        const type = 'quality';\n        const list = this.elements.settings.panes.quality.querySelector('ul');\n\n        // Set options if passed and filter based on config\n        if (utils.is.array(options)) {\n            this.options.quality = options.filter(quality => this.config.quality.options.includes(quality));\n        } else {\n            this.options.quality = this.config.quality.options;\n        }\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.options.quality) && this.isYouTube;\n        controls.toggleTab.call(this, type, toggle);\n\n        // If we're hiding, nothing more to do\n        if (!toggle) {\n            return;\n        }\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // Get the badge HTML for HD, 4K etc\n        const getBadge = quality => {\n            let label = '';\n\n            switch (quality) {\n                case 'hd2160':\n                    label = '4K';\n                    break;\n\n                case 'hd1440':\n                    label = 'WQHD';\n                    break;\n\n                case 'hd1080':\n                    label = 'HD';\n                    break;\n\n                case 'hd720':\n                    label = 'HD';\n                    break;\n\n                default:\n                    break;\n            }\n\n            if (!label.length) {\n                return null;\n            }\n\n            return controls.createBadge.call(this, label);\n        };\n\n        this.options.quality.forEach(quality =>\n            controls.createMenuItem.call(this, quality, list, type, controls.getLabel.call(this, 'quality', quality), getBadge(quality))\n        );\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Translate a value into a nice label\n    // TODO: Localisation\n    getLabel(setting, value) {\n        switch (setting) {\n            case 'speed':\n                return value === 1 ? 'Normal' : `${value}&times;`;\n\n            case 'quality':\n                switch (value) {\n                    case 'hd2160':\n                        return '2160P';\n                    case 'hd1440':\n                        return '1440P';\n                    case 'hd1080':\n                        return '1080P';\n                    case 'hd720':\n                        return '720P';\n                    case 'large':\n                        return '480P';\n                    case 'medium':\n                        return '360P';\n                    case 'small':\n                        return '240P';\n                    case 'tiny':\n                        return 'Tiny';\n                    case 'default':\n                        return 'Auto';\n                    default:\n                        return value;\n                }\n\n            case 'captions':\n                return controls.getLanguage.call(this);\n\n            default:\n                return null;\n        }\n    },\n\n    // Update the selected setting\n    updateSetting(setting, container) {\n        const pane = this.elements.settings.panes[setting];\n        let value = null;\n        let list = container;\n\n        switch (setting) {\n            case 'captions':\n                value = this.captions.enabled ? this.captions.language : '';\n                break;\n\n            default:\n                value = this[setting];\n\n                // Get default\n                if (utils.is.empty(value)) {\n                    value = this.config[setting].default;\n                }\n\n                // Unsupported value\n                if (!this.options[setting].includes(value)) {\n                    this.console.warn(`Unsupported value of '${value}' for ${setting}`);\n                    return;\n                }\n\n                // Disabled value\n                if (!this.config[setting].options.includes(value)) {\n                    this.console.warn(`Disabled value of '${value}' for ${setting}`);\n                    return;\n                }\n\n                break;\n        }\n\n        // Get the list if we need to\n        if (!utils.is.htmlElement(list)) {\n            list = pane && pane.querySelector('ul');\n        }\n\n        // Update the label\n        if (!utils.is.empty(value)) {\n            const label = this.elements.settings.tabs[setting].querySelector(`.${this.config.classNames.menu.value}`);\n            label.innerHTML = controls.getLabel.call(this, setting, value);\n        }\n\n        // Find the radio option\n        const target = list && list.querySelector(`input[value=\"${value}\"]`);\n\n        if (utils.is.htmlElement(target)) {\n            // Check it\n            target.checked = true;\n        }\n    },\n\n    // Set the looping options\n    /* setLoopMenu() {\n        const options = ['start', 'end', 'all', 'reset'];\n        const list = this.elements.settings.panes.loop.querySelector('ul');\n\n        // Show the pane and tab\n        utils.toggleHidden(this.elements.settings.tabs.loop, false);\n        utils.toggleHidden(this.elements.settings.panes.loop, false);\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.loop.options);\n        controls.toggleTab.call(this, 'loop', toggle);\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        options.forEach(option => {\n            const item = utils.createElement('li');\n\n            const button = utils.createElement(\n                'button',\n                utils.extend(utils.getAttributesFromSelector(this.config.selectors.buttons.loop), {\n                    type: 'button',\n                    class: this.config.classNames.control,\n                    'data-plyr-loop-action': option,\n                }),\n                this.config.i18n[option]\n            );\n\n            if (['start', 'end'].includes(option)) {\n                const badge = controls.createBadge.call(this, '00:00');\n                button.appendChild(badge);\n            }\n\n            item.appendChild(button);\n            list.appendChild(item);\n        });\n    }, */\n\n    // Get current selected caption language\n    // TODO: rework this to user the getter in the API?\n    getLanguage() {\n        if (!this.supported.ui) {\n            return null;\n        }\n\n        if (!support.textTracks || !captions.getTracks.call(this).length) {\n            return this.config.i18n.none;\n        }\n\n        if (this.captions.enabled) {\n            const currentTrack = captions.getCurrentTrack.call(this);\n\n            if (utils.is.track(currentTrack)) {\n                return currentTrack.label;\n            }\n        }\n\n        return this.config.i18n.disabled;\n    },\n\n    // Set a list of available captions languages\n    setCaptionsMenu() {\n        // TODO: Captions or language? Currently it's mixed\n        const type = 'captions';\n        const list = this.elements.settings.panes.captions.querySelector('ul');\n\n        // Toggle the pane and tab\n        const hasTracks = captions.getTracks.call(this).length;\n        controls.toggleTab.call(this, type, hasTracks);\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // If there's no captions, bail\n        if (!hasTracks) {\n            return;\n        }\n\n        // Re-map the tracks into just the data we need\n        const tracks = captions.getTracks.call(this).map(track => ({\n            language: track.language,\n            label: !utils.is.empty(track.label) ? track.label : track.language.toUpperCase(),\n        }));\n\n        // Add the \"None\" option to turn off captions\n        tracks.unshift({\n            language: '',\n            label: this.config.i18n.none,\n        });\n\n        // Generate options\n        tracks.forEach(track => {\n            controls.createMenuItem.call(\n                this,\n                track.language,\n                list,\n                'language',\n                track.label || track.language,\n                controls.createBadge.call(this, track.language.toUpperCase()),\n                track.language.toLowerCase() === this.captions.language.toLowerCase()\n            );\n        });\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Set a list of available captions languages\n    setSpeedMenu() {\n        const type = 'speed';\n\n        // Set the default speeds\n        if (!utils.is.object(this.options.speed) || !Object.keys(this.options.speed).length) {\n            this.options.speed = [0.5, 0.75, 1, 1.25, 1.5, 1.75, 2];\n        }\n\n        // Set options if passed and filter based on config\n        this.options.speed = this.options.speed.filter(speed => this.config.speed.options.includes(speed));\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.options.speed);\n        controls.toggleTab.call(this, type, toggle);\n\n        // If we're hiding, nothing more to do\n        if (!toggle) {\n            return;\n        }\n\n        // Get the list to populate\n        const list = this.elements.settings.panes.speed.querySelector('ul');\n\n        // Show the pane and tab\n        utils.toggleHidden(this.elements.settings.tabs.speed, false);\n        utils.toggleHidden(this.elements.settings.panes.speed, false);\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // Create items\n        this.options.speed.forEach(speed => controls.createMenuItem.call(this, speed, list, type, controls.getLabel.call(this, 'speed', speed)));\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Show/hide menu\n    toggleMenu(event) {\n        const { form } = this.elements.settings;\n        const button = this.elements.buttons.settings;\n        const show = utils.is.boolean(event) ? event : utils.is.htmlElement(form) && form.getAttribute('aria-hidden') === 'true';\n\n        if (utils.is.event(event)) {\n            const isMenuItem = utils.is.htmlElement(form) && form.contains(event.target);\n            const isButton = event.target === this.elements.buttons.settings;\n\n            // If the click was inside the form or if the click\n            // wasn't the button or menu item and we're trying to\n            // show the menu (a doc click shouldn't show the menu)\n            if (isMenuItem || (!isMenuItem && !isButton && show)) {\n                return;\n            }\n\n            // Prevent the toggle being caught by the doc listener\n            if (isButton) {\n                event.stopPropagation();\n            }\n        }\n\n        // Set form and button attributes\n        if (utils.is.htmlElement(button)) {\n            button.setAttribute('aria-expanded', show);\n        }\n\n        if (utils.is.htmlElement(form)) {\n            form.setAttribute('aria-hidden', !show);\n            utils.toggleClass(this.elements.container, this.config.classNames.menu.open, show);\n\n            if (show) {\n                form.removeAttribute('tabindex');\n            } else {\n                form.setAttribute('tabindex', -1);\n            }\n        }\n    },\n\n    // Get the natural size of a tab\n    getTabSize(tab) {\n        const clone = tab.cloneNode(true);\n        clone.style.position = 'absolute';\n        clone.style.opacity = 0;\n        clone.setAttribute('aria-hidden', false);\n\n        // Prevent input's being unchecked due to the name being identical\n        Array.from(clone.querySelectorAll('input[name]')).forEach(input => {\n            const name = input.getAttribute('name');\n            input.setAttribute('name', `${name}-clone`);\n        });\n\n        // Append to parent so we get the \"real\" size\n        tab.parentNode.appendChild(clone);\n\n        // Get the sizes before we remove\n        const width = clone.scrollWidth;\n        const height = clone.scrollHeight;\n\n        // Remove from the DOM\n        utils.removeElement(clone);\n\n        return {\n            width,\n            height,\n        };\n    },\n\n    // Toggle Menu\n    showTab(event) {\n        const { menu } = this.elements.settings;\n        const tab = event.target;\n        const show = tab.getAttribute('aria-expanded') === 'false';\n        const pane = document.getElementById(tab.getAttribute('aria-controls'));\n\n        // Nothing to show, bail\n        if (!utils.is.htmlElement(pane)) {\n            return;\n        }\n\n        // Are we targetting a tab? If not, bail\n        const isTab = pane.getAttribute('role') === 'tabpanel';\n        if (!isTab) {\n            return;\n        }\n\n        // Hide all other tabs\n        // Get other tabs\n        const current = menu.querySelector('[role=\"tabpanel\"][aria-hidden=\"false\"]');\n        const container = current.parentNode;\n\n        // Set other toggles to be expanded false\n        Array.from(menu.querySelectorAll(`[aria-controls=\"${current.getAttribute('id')}\"]`)).forEach(toggle => {\n            toggle.setAttribute('aria-expanded', false);\n        });\n\n        // If we can do fancy animations, we'll animate the height/width\n        if (support.transitions && !support.reducedMotion) {\n            // Set the current width as a base\n            container.style.width = `${current.scrollWidth}px`;\n            container.style.height = `${current.scrollHeight}px`;\n\n            // Get potential sizes\n            const size = controls.getTabSize.call(this, pane);\n\n            // Restore auto height/width\n            const restore = e => {\n                // We're only bothered about height and width on the container\n                if (e.target !== container || !['width', 'height'].includes(e.propertyName)) {\n                    return;\n                }\n\n                // Revert back to auto\n                container.style.width = '';\n                container.style.height = '';\n\n                // Only listen once\n                utils.off(container, utils.transitionEnd, restore);\n            };\n\n            // Listen for the transition finishing and restore auto height/width\n            utils.on(container, utils.transitionEnd, restore);\n\n            // Set dimensions to target\n            container.style.width = `${size.width}px`;\n            container.style.height = `${size.height}px`;\n        }\n\n        // Set attributes on current tab\n        current.setAttribute('aria-hidden', true);\n        current.setAttribute('tabindex', -1);\n\n        // Set attributes on target\n        pane.setAttribute('aria-hidden', !show);\n        tab.setAttribute('aria-expanded', show);\n        pane.removeAttribute('tabindex');\n\n        // Focus the first item\n        pane.querySelectorAll('button:not(:disabled), input:not(:disabled), [tabindex]')[0].focus();\n    },\n\n    // Build the default HTML\n    // TODO: Set order based on order in the config.controls array?\n    create(data) {\n        // Do nothing if we want no controls\n        if (utils.is.empty(this.config.controls)) {\n            return null;\n        }\n\n        // Create the container\n        const container = utils.createElement('div', utils.getAttributesFromSelector(this.config.selectors.controls.wrapper));\n\n        // Restart button\n        if (this.config.controls.includes('restart')) {\n            container.appendChild(controls.createButton.call(this, 'restart'));\n        }\n\n        // Rewind button\n        if (this.config.controls.includes('rewind')) {\n            container.appendChild(controls.createButton.call(this, 'rewind'));\n        }\n\n        // Play/Pause button\n        if (this.config.controls.includes('play')) {\n            container.appendChild(controls.createButton.call(this, 'play'));\n            // container.appendChild(controls.createButton.call(this, 'pause'));\n        }\n\n        // Fast forward button\n        if (this.config.controls.includes('fast-forward')) {\n            container.appendChild(controls.createButton.call(this, 'fast-forward'));\n        }\n\n        // Progress\n        if (this.config.controls.includes('progress')) {\n            const progress = utils.createElement('span', utils.getAttributesFromSelector(this.config.selectors.progress));\n\n            // Seek range slider\n            const seek = controls.createRange.call(this, 'seek', {\n                id: `plyr-seek-${data.id}`,\n            });\n            progress.appendChild(seek.label);\n            progress.appendChild(seek.input);\n\n            // Buffer progress\n            progress.appendChild(controls.createProgress.call(this, 'buffer'));\n\n            // TODO: Add loop display indicator\n\n            // Seek tooltip\n            if (this.config.tooltips.seek) {\n                const tooltip = utils.createElement(\n                    'span',\n                    {\n                        role: 'tooltip',\n                        class: this.config.classNames.tooltip,\n                    },\n                    '00:00'\n                );\n\n                progress.appendChild(tooltip);\n                this.elements.display.seekTooltip = tooltip;\n            }\n\n            this.elements.progress = progress;\n            container.appendChild(this.elements.progress);\n        }\n\n        // Media current time display\n        if (this.config.controls.includes('current-time')) {\n            container.appendChild(controls.createTime.call(this, 'currentTime'));\n        }\n\n        // Media duration display\n        if (this.config.controls.includes('duration')) {\n            container.appendChild(controls.createTime.call(this, 'duration'));\n        }\n\n        // Toggle mute button\n        if (this.config.controls.includes('mute')) {\n            container.appendChild(controls.createButton.call(this, 'mute'));\n        }\n\n        // Volume range control\n        if (this.config.controls.includes('volume')) {\n            const volume = utils.createElement('span', {\n                class: 'plyr__volume',\n            });\n\n            // Set the attributes\n            const attributes = {\n                max: 1,\n                step: 0.05,\n                value: this.config.volume,\n            };\n\n            // Create the volume range slider\n            const range = controls.createRange.call(\n                this,\n                'volume',\n                utils.extend(attributes, {\n                    id: `plyr-volume-${data.id}`,\n                })\n            );\n            volume.appendChild(range.label);\n            volume.appendChild(range.input);\n\n            this.elements.volume = volume;\n\n            container.appendChild(volume);\n        }\n\n        // Toggle captions button\n        if (this.config.controls.includes('captions')) {\n            container.appendChild(controls.createButton.call(this, 'captions'));\n        }\n\n        // Settings button / menu\n        if (this.config.controls.includes('settings') && !utils.is.empty(this.config.settings)) {\n            const menu = utils.createElement('div', {\n                class: 'plyr__menu',\n            });\n\n            menu.appendChild(\n                controls.createButton.call(this, 'settings', {\n                    id: `plyr-settings-toggle-${data.id}`,\n                    'aria-haspopup': true,\n                    'aria-controls': `plyr-settings-${data.id}`,\n                    'aria-expanded': false,\n                })\n            );\n\n            const form = utils.createElement('form', {\n                class: 'plyr__menu__container',\n                id: `plyr-settings-${data.id}`,\n                'aria-hidden': true,\n                'aria-labelled-by': `plyr-settings-toggle-${data.id}`,\n                role: 'tablist',\n                tabindex: -1,\n            });\n\n            const inner = utils.createElement('div');\n\n            const home = utils.createElement('div', {\n                id: `plyr-settings-${data.id}-home`,\n                'aria-hidden': false,\n                'aria-labelled-by': `plyr-settings-toggle-${data.id}`,\n                role: 'tabpanel',\n            });\n\n            // Create the tab list\n            const tabs = utils.createElement('ul', {\n                role: 'tablist',\n            });\n\n            // Build the tabs\n            this.config.settings.forEach(type => {\n                const tab = utils.createElement('li', {\n                    role: 'tab',\n                    hidden: '',\n                });\n\n                const button = utils.createElement(\n                    'button',\n                    utils.extend(utils.getAttributesFromSelector(this.config.selectors.buttons.settings), {\n                        type: 'button',\n                        class: `${this.config.classNames.control} ${this.config.classNames.control}--forward`,\n                        id: `plyr-settings-${data.id}-${type}-tab`,\n                        'aria-haspopup': true,\n                        'aria-controls': `plyr-settings-${data.id}-${type}`,\n                        'aria-expanded': false,\n                    }),\n                    this.config.i18n[type]\n                );\n\n                const value = utils.createElement('span', {\n                    class: this.config.classNames.menu.value,\n                });\n\n                // Speed contains HTML entities\n                value.innerHTML = data[type];\n\n                button.appendChild(value);\n                tab.appendChild(button);\n                tabs.appendChild(tab);\n\n                this.elements.settings.tabs[type] = tab;\n            });\n\n            home.appendChild(tabs);\n            inner.appendChild(home);\n\n            // Build the panes\n            this.config.settings.forEach(type => {\n                const pane = utils.createElement('div', {\n                    id: `plyr-settings-${data.id}-${type}`,\n                    'aria-hidden': true,\n                    'aria-labelled-by': `plyr-settings-${data.id}-${type}-tab`,\n                    role: 'tabpanel',\n                    tabindex: -1,\n                    hidden: '',\n                });\n\n                const back = utils.createElement(\n                    'button',\n                    {\n                        type: 'button',\n                        class: `${this.config.classNames.control} ${this.config.classNames.control}--back`,\n                        'aria-haspopup': true,\n                        'aria-controls': `plyr-settings-${data.id}-home`,\n                        'aria-expanded': false,\n                    },\n                    this.config.i18n[type]\n                );\n\n                pane.appendChild(back);\n\n                const options = utils.createElement('ul');\n\n                pane.appendChild(options);\n                inner.appendChild(pane);\n\n                this.elements.settings.panes[type] = pane;\n            });\n\n            form.appendChild(inner);\n            menu.appendChild(form);\n            container.appendChild(menu);\n\n            this.elements.settings.form = form;\n            this.elements.settings.menu = menu;\n        }\n\n        // Picture in picture button\n        if (this.config.controls.includes('pip') && support.pip) {\n            container.appendChild(controls.createButton.call(this, 'pip'));\n        }\n\n        // Airplay button\n        if (this.config.controls.includes('airplay') && support.airplay) {\n            container.appendChild(controls.createButton.call(this, 'airplay'));\n        }\n\n        // Toggle fullscreen button\n        if (this.config.controls.includes('fullscreen')) {\n            container.appendChild(controls.createButton.call(this, 'fullscreen'));\n        }\n\n        // Larger overlaid play button\n        if (this.config.controls.includes('play-large')) {\n            this.elements.container.appendChild(controls.createButton.call(this, 'play-large'));\n        }\n\n        this.elements.controls = container;\n\n        if (this.config.controls.includes('settings') && this.config.settings.includes('speed')) {\n            controls.setSpeedMenu.call(this);\n        }\n\n        return container;\n    },\n\n    // Insert controls\n    inject() {\n        // Sprite\n        if (this.config.loadSprite) {\n            const icon = controls.getIconUrl.call(this);\n\n            // Only load external sprite using AJAX\n            if (icon.absolute) {\n                utils.loadSprite(icon.url, 'sprite-plyr');\n            }\n        }\n\n        // Create a unique ID\n        this.id = Math.floor(Math.random() * 10000);\n\n        // Null by default\n        let container = null;\n\n        // HTML passed as the option\n        if (utils.is.string(this.config.controls)) {\n            container = this.config.controls;\n        } else if (utils.is.function(this.config.controls)) {\n            // A custom function to build controls\n            // The function can return a HTMLElement or String\n            container = this.config.controls({\n                id: this.id,\n                seektime: this.config.seekTime,\n                title: this.config.title,\n            });\n        } else {\n            // Create controls\n            container = controls.create.call(this, {\n                id: this.id,\n                seektime: this.config.seekTime,\n                speed: this.speed,\n                quality: this.quality,\n                captions: controls.getLanguage.call(this),\n                // TODO: Looping\n                // loop: 'None',\n            });\n        }\n\n        // Controls container\n        let target;\n\n        // Inject to custom location\n        if (utils.is.string(this.config.selectors.controls.container)) {\n            target = document.querySelector(this.config.selectors.controls.container);\n        }\n\n        // Inject into the container by default\n        if (!utils.is.htmlElement(target)) {\n            target = this.elements.container;\n        }\n\n        // Inject controls HTML\n        if (utils.is.htmlElement(container)) {\n            target.appendChild(container);\n        } else {\n            target.insertAdjacentHTML('beforeend', container);\n        }\n\n        // Find the elements if need be\n        if (utils.is.htmlElement(this.elements.controls)) {\n            utils.findElements.call(this);\n        }\n\n        // Setup tooltips\n        if (this.config.tooltips.controls) {\n            const labels = utils.getElements.call(\n                this,\n                [this.config.selectors.controls.wrapper, ' ', this.config.selectors.labels, ' .', this.config.classNames.hidden].join('')\n            );\n\n            Array.from(labels).forEach(label => {\n                utils.toggleClass(label, this.config.classNames.hidden, false);\n                utils.toggleClass(label, this.config.classNames.tooltip, true);\n                label.setAttribute('role', 'tooltip');\n            });\n        }\n    },\n};\n\nexport default controls;\n","// ==========================================================================\n// Plyr Captions\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport controls from './controls';\nimport storage from './storage';\n\nconst captions = {\n    // Setup captions\n    setup() {\n        // Requires UI support\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // Set default language if not set\n        if (!utils.is.empty(storage.get.call(this).language)) {\n            this.captions.language = storage.get.call(this).language;\n        } else if (utils.is.empty(this.captions.language)) {\n            this.captions.language = this.config.captions.language.toLowerCase();\n        }\n\n        // Set captions enabled state if not set\n        if (!utils.is.boolean(this.captions.enabled)) {\n            if (!utils.is.empty(storage.get.call(this).language)) {\n                this.captions.enabled = storage.get.call(this).captions;\n            } else {\n                this.captions.enabled = this.config.captions.active;\n            }\n        }\n\n        // Only Vimeo and HTML5 video supported at this point\n        if (!this.isVideo || this.isYouTube || (this.isHTML5 && !support.textTracks)) {\n            // Clear menu and hide\n            if (this.config.controls.includes('settings') && this.config.settings.includes('captions')) {\n                controls.setCaptionsMenu.call(this);\n            }\n\n            return;\n        }\n\n        // Inject the container\n        if (!utils.is.htmlElement(this.elements.captions)) {\n            this.elements.captions = utils.createElement('div', utils.getAttributesFromSelector(this.config.selectors.captions));\n\n            utils.insertAfter(this.elements.captions, this.elements.wrapper);\n        }\n\n        // Set the class hook\n        utils.toggleClass(this.elements.container, this.config.classNames.captions.enabled, !utils.is.empty(captions.getTracks.call(this)));\n\n        // If no caption file exists, hide container for caption text\n        if (utils.is.empty(captions.getTracks.call(this))) {\n            return;\n        }\n\n        // Set language\n        captions.setLanguage.call(this);\n\n        // Enable UI\n        captions.show.call(this);\n\n        // Set available languages in list\n        if (this.config.controls.includes('settings') && this.config.settings.includes('captions')) {\n            controls.setCaptionsMenu.call(this);\n        }\n    },\n\n    // Set the captions language\n    setLanguage() {\n        // Setup HTML5 track rendering\n        if (this.isHTML5 && this.isVideo) {\n            captions.getTracks.call(this).forEach(track => {\n                // Remove previous bindings\n                utils.on(track, 'cuechange', event => captions.setCue.call(this, event));\n\n                // Turn off native caption rendering to avoid double captions\n                // eslint-disable-next-line\n                track.mode = 'hidden';\n            });\n\n            // Get current track\n            const currentTrack = captions.getCurrentTrack.call(this);\n\n            // Check if suported kind\n            if (utils.is.track(currentTrack)) {\n                // If we change the active track while a cue is already displayed we need to update it\n                if (Array.from(currentTrack.activeCues || []).length) {\n                    captions.setCue.call(this, currentTrack);\n                }\n            }\n        } else if (this.isVimeo && this.captions.active) {\n            this.embed.enableTextTrack(this.language);\n        }\n    },\n\n    // Get the tracks\n    getTracks() {\n        // Return empty array at least\n        if (utils.is.nullOrUndefined(this.media)) {\n            return [];\n        }\n\n        // Only get accepted kinds\n        return Array.from(this.media.textTracks || []).filter(track => ['captions', 'subtitles'].includes(track.kind));\n    },\n\n    // Get the current track for the current language\n    getCurrentTrack() {\n        return captions.getTracks.call(this).find(track => track.language.toLowerCase() === this.language);\n    },\n\n    // Display active caption if it contains text\n    setCue(input) {\n        // Get the track from the event if needed\n        const track = utils.is.event(input) ? input.target : input;\n        const active = track.activeCues[0];\n        const currentTrack = captions.getCurrentTrack.call(this);\n\n        // Only display current track\n        if (track !== currentTrack) {\n            return;\n        }\n\n        // Display a cue, if there is one\n        if (utils.is.cue(active)) {\n            captions.setText.call(this, active.getCueAsHTML());\n        } else {\n            captions.setText.call(this, null);\n        }\n\n        utils.dispatchEvent.call(this, this.media, 'cuechange');\n    },\n\n    // Set the current caption\n    setText(input) {\n        // Requires UI\n        if (!this.supported.ui) {\n            return;\n        }\n\n        if (utils.is.htmlElement(this.elements.captions)) {\n            const content = utils.createElement('span');\n\n            // Empty the container\n            utils.emptyElement(this.elements.captions);\n\n            // Default to empty\n            const caption = !utils.is.nullOrUndefined(input) ? input : '';\n\n            // Set the span content\n            if (utils.is.string(caption)) {\n                content.textContent = caption.trim();\n            } else {\n                content.appendChild(caption);\n            }\n\n            // Set new caption text\n            this.elements.captions.appendChild(content);\n        } else {\n            this.console.warn('No captions element to render to');\n        }\n    },\n\n    // Display captions container and button (for initialization)\n    show() {\n        // If there's no caption toggle, bail\n        if (!utils.is.htmlElement(this.elements.buttons.captions)) {\n            return;\n        }\n\n        // Try to load the value from storage\n        let active = storage.get.call(this).captions;\n\n        // Otherwise fall back to the default config\n        if (!utils.is.boolean(active)) {\n            ({ active } = this.config.captions);\n        } else {\n            this.captions.active = active;\n        }\n\n        if (active) {\n            utils.toggleClass(this.elements.container, this.config.classNames.captions.active, true);\n            utils.toggleState(this.elements.buttons.captions, true);\n        }\n    },\n};\n\nexport default captions;\n","// ==========================================================================\n// YouTube plugin\n// ==========================================================================\n\nimport utils from './../utils';\nimport controls from './../controls';\nimport ui from './../ui';\n\nconst youtube = {\n    setup() {\n        const videoId = utils.parseYouTubeId(this.embedId);\n\n        // Remove old containers\n        const containers = utils.getElements.call(this, `[id^=\"${this.provider}-\"]`);\n        Array.from(containers).forEach(utils.removeElement);\n\n        // Add embed class for responsive\n        utils.toggleClass(this.elements.wrapper, this.config.classNames.embed, true);\n\n        // Set aspect ratio\n        youtube.setAspectRatio.call(this);\n\n        // Set ID\n        this.media.setAttribute('id', utils.generateId(this.provider));\n\n        // Setup API\n        if (utils.is.object(window.YT)) {\n            youtube.ready.call(this, videoId);\n        } else {\n            // Load the API\n            utils.loadScript(this.config.urls.youtube.api);\n\n            // Setup callback for the API\n            // YouTube has it's own system of course...\n            window.onYouTubeReadyCallbacks = window.onYouTubeReadyCallbacks || [];\n\n            // Add to queue\n            window.onYouTubeReadyCallbacks.push(() => {\n                youtube.ready.call(this, videoId);\n            });\n\n            // Set callback to process queue\n            window.onYouTubeIframeAPIReady = () => {\n                window.onYouTubeReadyCallbacks.forEach(callback => {\n                    callback();\n                });\n            };\n        }\n    },\n\n    // Get the media title\n    getTitle() {\n        // Try via undocumented API method first\n        // This method disappears now and then though...\n        // https://github.com/sampotts/plyr/issues/709\n        if (utils.is.function(this.embed.getVideoData)) {\n            const { title } = this.embed.getVideoData();\n\n            if (utils.is.empty(title)) {\n                this.config.title = title;\n                ui.setTitle.call(this);\n                return;\n            }\n        }\n\n        // Or via Google API\n        const key = this.config.keys.google;\n        const videoId = utils.parseYouTubeId(this.embedId);\n        if (utils.is.string(key) && !utils.is.empty(key)) {\n            const url = `https://www.googleapis.com/youtube/v3/videos?id=${videoId}&key=${key}&fields=items(snippet(title))&part=snippet`;\n\n            fetch(url)\n                .then(response => (response.ok ? response.json() : null))\n                .then(result => {\n                    if (result !== null && utils.is.object(result)) {\n                        this.config.title = result.items[0].snippet.title;\n                        ui.setTitle.call(this);\n                    }\n                })\n                .catch(() => {});\n        }\n    },\n\n    // Set aspect ratio\n    setAspectRatio() {\n        const ratio = this.config.ratio.split(':');\n        this.elements.wrapper.style.paddingBottom = `${100 / ratio[0] * ratio[1]}%`;\n    },\n\n    // API ready\n    ready(videoId) {\n        const player = this;\n\n        // Setup instance\n        // https://developers.google.com/youtube/iframe_api_reference\n        player.embed = new window.YT.Player(player.media.id, {\n            videoId,\n            playerVars: {\n                autoplay: player.config.autoplay ? 1 : 0, // Autoplay\n                controls: player.supported.ui ? 0 : 1, // Only show controls if not fully supported\n                rel: 0, // No related vids\n                showinfo: 0, // Hide info\n                iv_load_policy: 3, // Hide annotations\n                modestbranding: 1, // Hide logos as much as possible (they still show one in the corner when paused)\n                disablekb: 1, // Disable keyboard as we handle it\n                playsinline: 1, // Allow iOS inline playback\n\n                // Tracking for stats\n                origin: window && window.location.hostname,\n                widget_referrer: window && window.location.href,\n\n                // Captions are flaky on YouTube\n                cc_load_policy: this.captions.active ? 1 : 0,\n                cc_lang_pref: this.config.captions.language,\n            },\n            events: {\n                onError(event) {\n                    // If we've already fired an error, don't do it again\n                    // YouTube fires onError twice\n                    if (utils.is.object(player.media.error)) {\n                        return;\n                    }\n\n                    const detail = {\n                        code: event.data,\n                    };\n\n                    // Messages copied from https://developers.google.com/youtube/iframe_api_reference#onError\n                    switch (event.data) {\n                        case 2:\n                            detail.message =\n                                'The request contains an invalid parameter value. For example, this error occurs if you specify a video ID that does not have 11 characters, or if the video ID contains invalid characters, such as exclamation points or asterisks.';\n                            break;\n\n                        case 5:\n                            detail.message =\n                                'The requested content cannot be played in an HTML5 player or another error related to the HTML5 player has occurred.';\n                            break;\n\n                        case 100:\n                            detail.message =\n                                'The video requested was not found. This error occurs when a video has been removed (for any reason) or has been marked as private.';\n                            break;\n\n                        case 101:\n                        case 150:\n                            detail.message = 'The owner of the requested video does not allow it to be played in embedded players.';\n                            break;\n\n                        default:\n                            detail.message = 'An unknown error occured';\n                            break;\n                    }\n\n                    player.media.error = detail;\n\n                    utils.dispatchEvent.call(player, player.media, 'error');\n                },\n                onPlaybackQualityChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get current quality\n                    player.media.quality = instance.getPlaybackQuality();\n\n                    utils.dispatchEvent.call(player, player.media, 'qualitychange');\n                },\n                onPlaybackRateChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get current speed\n                    player.media.playbackRate = instance.getPlaybackRate();\n\n                    utils.dispatchEvent.call(player, player.media, 'ratechange');\n                },\n                onReady(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get the title\n                    youtube.getTitle.call(player);\n\n                    // Create a faux HTML5 API using the YouTube API\n                    player.media.play = () => {\n                        instance.playVideo();\n                        player.media.paused = false;\n                    };\n                    player.media.pause = () => {\n                        instance.pauseVideo();\n                        player.media.paused = true;\n                    };\n                    player.media.stop = () => {\n                        instance.stopVideo();\n                        player.media.paused = true;\n                    };\n                    player.media.duration = instance.getDuration();\n                    player.media.paused = true;\n\n                    // Seeking\n                    player.media.currentTime = 0;\n                    Object.defineProperty(player.media, 'currentTime', {\n                        get() {\n                            return Number(instance.getCurrentTime());\n                        },\n                        set(time) {\n                            // Set seeking flag\n                            player.media.seeking = true;\n\n                            // Trigger seeking\n                            utils.dispatchEvent.call(player, player.media, 'seeking');\n\n                            // Seek after events sent\n                            instance.seekTo(time);\n                        },\n                    });\n\n                    // Playback speed\n                    Object.defineProperty(player.media, 'playbackRate', {\n                        get() {\n                            return instance.getPlaybackRate();\n                        },\n                        set(input) {\n                            instance.setPlaybackRate(input);\n                        },\n                    });\n\n                    // Quality\n                    Object.defineProperty(player.media, 'quality', {\n                        get() {\n                            return instance.getPlaybackQuality();\n                        },\n                        set(input) {\n                            // Trigger request event\n                            utils.dispatchEvent.call(player, player.media, 'qualityrequested', false, {\n                                quality: input,\n                            });\n\n                            instance.setPlaybackQuality(input);\n                        },\n                    });\n\n                    // Volume\n                    let { volume } = player.config;\n                    Object.defineProperty(player.media, 'volume', {\n                        get() {\n                            return volume;\n                        },\n                        set(input) {\n                            volume = input;\n                            instance.setVolume(volume * 100);\n                            utils.dispatchEvent.call(player, player.media, 'volumechange');\n                        },\n                    });\n\n                    // Muted\n                    let { muted } = player.config;\n                    Object.defineProperty(player.media, 'muted', {\n                        get() {\n                            return muted;\n                        },\n                        set(input) {\n                            const toggle = utils.is.boolean(input) ? input : muted;\n                            muted = toggle;\n                            instance[toggle ? 'mute' : 'unMute']();\n                            utils.dispatchEvent.call(player, player.media, 'volumechange');\n                        },\n                    });\n\n                    // Source\n                    Object.defineProperty(player.media, 'currentSrc', {\n                        get() {\n                            return instance.getVideoUrl();\n                        },\n                    });\n\n                    // Ended\n                    Object.defineProperty(player.media, 'ended', {\n                        get() {\n                            return player.currentTime === player.duration;\n                        },\n                    });\n\n                    // Get available speeds\n                    player.options.speed = instance.getAvailablePlaybackRates();\n\n                    // Set the tabindex to avoid focus entering iframe\n                    if (player.supported.ui) {\n                        player.media.setAttribute('tabindex', -1);\n                    }\n\n                    utils.dispatchEvent.call(player, player.media, 'timeupdate');\n                    utils.dispatchEvent.call(player, player.media, 'durationchange');\n\n                    // Reset timer\n                    window.clearInterval(player.timers.buffering);\n\n                    // Setup buffering\n                    player.timers.buffering = window.setInterval(() => {\n                        // Get loaded % from YouTube\n                        player.media.buffered = instance.getVideoLoadedFraction();\n\n                        // Trigger progress only when we actually buffer something\n                        if (player.media.lastBuffered === null || player.media.lastBuffered < player.media.buffered) {\n                            utils.dispatchEvent.call(player, player.media, 'progress');\n                        }\n\n                        // Set last buffer point\n                        player.media.lastBuffered = player.media.buffered;\n\n                        // Bail if we're at 100%\n                        if (player.media.buffered === 1) {\n                            window.clearInterval(player.timers.buffering);\n\n                            // Trigger event\n                            utils.dispatchEvent.call(player, player.media, 'canplaythrough');\n                        }\n                    }, 200);\n\n                    // Rebuild UI\n                    window.setTimeout(() => ui.build.call(player), 50);\n                },\n                onStateChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Reset timer\n                    window.clearInterval(player.timers.playing);\n\n                    // Handle events\n                    // -1   Unstarted\n                    // 0    Ended\n                    // 1    Playing\n                    // 2    Paused\n                    // 3    Buffering\n                    // 5    Video cued\n                    switch (event.data) {\n                        case 0:\n                            player.media.paused = true;\n\n                            // YouTube doesn't support loop for a single video, so mimick it.\n                            if (player.media.loop) {\n                                // YouTube needs a call to `stopVideo` before playing again\n                                instance.stopVideo();\n                                instance.playVideo();\n                            } else {\n                                utils.dispatchEvent.call(player, player.media, 'ended');\n                            }\n\n                            break;\n\n                        case 1:\n                            // If we were seeking, fire seeked event\n                            if (player.media.seeking) {\n                                utils.dispatchEvent.call(player, player.media, 'seeked');\n                            }\n                            player.media.seeking = false;\n\n                            // Only fire play if paused before\n                            if (player.media.paused) {\n                                utils.dispatchEvent.call(player, player.media, 'play');\n                            }\n                            player.media.paused = false;\n\n                            utils.dispatchEvent.call(player, player.media, 'playing');\n\n                            // Poll to get playback progress\n                            player.timers.playing = window.setInterval(() => {\n                                utils.dispatchEvent.call(player, player.media, 'timeupdate');\n                            }, 50);\n\n                            // Check duration again due to YouTube bug\n                            // https://github.com/sampotts/plyr/issues/374\n                            // https://code.google.com/p/gdata-issues/issues/detail?id=8690\n                            if (player.media.duration !== instance.getDuration()) {\n                                player.media.duration = instance.getDuration();\n                                utils.dispatchEvent.call(player, player.media, 'durationchange');\n                            }\n\n                            // Get quality\n                            controls.setQualityMenu.call(player, instance.getAvailableQualityLevels());\n\n                            break;\n\n                        case 2:\n                            player.media.paused = true;\n\n                            utils.dispatchEvent.call(player, player.media, 'pause');\n\n                            break;\n\n                        default:\n                            break;\n                    }\n\n                    utils.dispatchEvent.call(player, player.elements.container, 'statechange', false, {\n                        code: event.data,\n                    });\n                },\n            },\n        });\n    },\n};\n\nexport default youtube;\n","// ==========================================================================\n// Vimeo plugin\n// ==========================================================================\n\nimport utils from './../utils';\nimport captions from './../captions';\nimport ui from './../ui';\n\nconst vimeo = {\n    setup() {\n        // Remove old containers\n        const containers = utils.getElements.call(this, `[id^=\"${this.provider}-\"]`);\n        Array.from(containers).forEach(utils.removeElement);\n\n        // Add embed class for responsive\n        utils.toggleClass(this.elements.wrapper, this.config.classNames.embed, true);\n\n        // Set intial ratio\n        vimeo.setAspectRatio.call(this);\n\n        // Set ID\n        this.media.setAttribute('id', utils.generateId(this.provider));\n\n        // Load the API if not already\n        if (!utils.is.object(window.Vimeo)) {\n            utils.loadScript(this.config.urls.vimeo.api, () => {\n                vimeo.ready.call(this);\n            });\n        } else {\n            vimeo.ready.call(this);\n        }\n    },\n\n    // Set aspect ratio\n    // For Vimeo we have an extra 300% height <div> to hide the standard controls and UI\n    setAspectRatio(input) {\n        const ratio = utils.is.string(input) ? input.split(':') : this.config.ratio.split(':');\n        const padding = 100 / ratio[0] * ratio[1];\n        const height = 200;\n        const offset = (height - padding) / (height / 50);\n        this.elements.wrapper.style.paddingBottom = `${padding}%`;\n        this.media.style.transform = `translateY(-${offset}%)`;\n    },\n\n    // API Ready\n    ready() {\n        const player = this;\n\n        // Get Vimeo params for the iframe\n        const options = {\n            loop: player.config.loop.active,\n            autoplay: player.autoplay,\n            byline: false,\n            portrait: false,\n            title: false,\n            speed: true,\n            transparent: 0,\n            gesture: 'media',\n        };\n        const params = utils.buildUrlParameters(options);\n        const id = utils.parseVimeoId(player.embedId);\n\n        // Build an iframe\n        const iframe = utils.createElement('iframe');\n        const src = `https://player.vimeo.com/video/${id}?${params}`;\n        iframe.setAttribute('src', src);\n        iframe.setAttribute('allowfullscreen', '');\n        player.media.appendChild(iframe);\n\n        // Setup instance\n        // https://github.com/vimeo/player.js\n        player.embed = new window.Vimeo.Player(iframe);\n\n        player.media.paused = true;\n        player.media.currentTime = 0;\n\n        // Create a faux HTML5 API using the Vimeo API\n        player.media.play = () => {\n            player.embed.play().then(() => {\n                player.media.paused = false;\n            });\n        };\n        player.media.pause = () => {\n            player.embed.pause().then(() => {\n                player.media.paused = true;\n            });\n        };\n        player.media.stop = () => {\n            player.embed.stop().then(() => {\n                player.media.paused = true;\n                player.currentTime = 0;\n            });\n        };\n\n        // Seeking\n        let { currentTime } = player.media;\n        Object.defineProperty(player.media, 'currentTime', {\n            get() {\n                return currentTime;\n            },\n            set(time) {\n                // Get current paused state\n                // Vimeo will automatically play on seek\n                const { paused } = player.media;\n\n                // Set seeking flag\n                player.media.seeking = true;\n\n                // Trigger seeking\n                utils.dispatchEvent.call(player, player.media, 'seeking');\n\n                // Seek after events\n                player.embed.setCurrentTime(time);\n\n                // Restore pause state\n                if (paused) {\n                    player.pause();\n                }\n            },\n        });\n\n        // Playback speed\n        let speed = player.config.speed.selected;\n        Object.defineProperty(player.media, 'playbackRate', {\n            get() {\n                return speed;\n            },\n            set(input) {\n                player.embed.setPlaybackRate(input).then(() => {\n                    speed = input;\n                    utils.dispatchEvent.call(player, player.media, 'ratechange');\n                });\n            },\n        });\n\n        // Volume\n        let { volume } = player.config;\n        Object.defineProperty(player.media, 'volume', {\n            get() {\n                return volume;\n            },\n            set(input) {\n                player.embed.setVolume(input).then(() => {\n                    volume = input;\n                    utils.dispatchEvent.call(player, player.media, 'volumechange');\n                });\n            },\n        });\n\n        // Muted\n        let { muted } = player.config;\n        Object.defineProperty(player.media, 'muted', {\n            get() {\n                return muted;\n            },\n            set(input) {\n                const toggle = utils.is.boolean(input) ? input : false;\n\n                player.embed.setVolume(toggle ? 0 : player.config.volume).then(() => {\n                    muted = toggle;\n                    utils.dispatchEvent.call(player, player.media, 'volumechange');\n                });\n            },\n        });\n\n        // Loop\n        let { loop } = player.config;\n        Object.defineProperty(player.media, 'loop', {\n            get() {\n                return loop;\n            },\n            set(input) {\n                const toggle = utils.is.boolean(input) ? input : player.config.loop.active;\n\n                player.embed.setLoop(toggle).then(() => {\n                    loop = toggle;\n                });\n            },\n        });\n\n        // Source\n        let currentSrc;\n        player.embed.getVideoUrl().then(value => {\n            currentSrc = value;\n        });\n        Object.defineProperty(player.media, 'currentSrc', {\n            get() {\n                return currentSrc;\n            },\n        });\n\n        // Ended\n        Object.defineProperty(player.media, 'ended', {\n            get() {\n                return player.currentTime === player.duration;\n            },\n        });\n\n        // Set aspect ratio based on video size\n        Promise.all([player.embed.getVideoWidth(), player.embed.getVideoHeight()]).then(dimensions => {\n            const ratio = utils.getAspectRatio(dimensions[0], dimensions[1]);\n            vimeo.setAspectRatio.call(this, ratio);\n        });\n\n        // Set autopause\n        player.embed.setAutopause(player.config.autopause).then(state => {\n            player.config.autopause = state;\n        });\n\n        // Get title\n        player.embed.getVideoTitle().then(title => {\n            player.config.title = title;\n            ui.setTitle.call(this);\n        });\n\n        // Get current time\n        player.embed.getCurrentTime().then(value => {\n            currentTime = value;\n            utils.dispatchEvent.call(player, player.media, 'timeupdate');\n        });\n\n        // Get duration\n        player.embed.getDuration().then(value => {\n            player.media.duration = value;\n            utils.dispatchEvent.call(player, player.media, 'durationchange');\n        });\n\n        // Get captions\n        player.embed.getTextTracks().then(tracks => {\n            player.media.textTracks = tracks;\n            captions.setup.call(player);\n        });\n\n        player.embed.on('cuechange', data => {\n            let cue = null;\n\n            if (data.cues.length) {\n                cue = utils.stripHTML(data.cues[0].text);\n            }\n\n            captions.setText.call(player, cue);\n        });\n\n        player.embed.on('loaded', () => {\n            if (utils.is.htmlElement(player.embed.element) && player.supported.ui) {\n                const frame = player.embed.element;\n\n                // Fix keyboard focus issues\n                // https://github.com/sampotts/plyr/issues/317\n                frame.setAttribute('tabindex', -1);\n            }\n        });\n\n        player.embed.on('play', () => {\n            // Only fire play if paused before\n            if (player.media.paused) {\n                utils.dispatchEvent.call(player, player.media, 'play');\n            }\n            player.media.paused = false;\n            utils.dispatchEvent.call(player, player.media, 'playing');\n        });\n\n        player.embed.on('pause', () => {\n            player.media.paused = true;\n            utils.dispatchEvent.call(player, player.media, 'pause');\n        });\n\n        player.embed.on('timeupdate', data => {\n            player.media.seeking = false;\n            currentTime = data.seconds;\n            utils.dispatchEvent.call(player, player.media, 'timeupdate');\n        });\n\n        player.embed.on('progress', data => {\n            player.media.buffered = data.percent;\n            utils.dispatchEvent.call(player, player.media, 'progress');\n\n            // Check all loaded\n            if (parseInt(data.percent, 10) === 1) {\n                utils.dispatchEvent.call(player, player.media, 'canplaythrough');\n            }\n        });\n\n        player.embed.on('seeked', () => {\n            player.media.seeking = false;\n            utils.dispatchEvent.call(player, player.media, 'seeked');\n            utils.dispatchEvent.call(player, player.media, 'play');\n        });\n\n        player.embed.on('ended', () => {\n            player.media.paused = true;\n            utils.dispatchEvent.call(player, player.media, 'ended');\n        });\n\n        player.embed.on('error', detail => {\n            player.media.error = detail;\n            utils.dispatchEvent.call(player, player.media, 'error');\n        });\n\n        // Rebuild UI\n        window.setTimeout(() => ui.build.call(player), 0);\n    },\n};\n\nexport default vimeo;\n","// ==========================================================================\n// Plyr Media\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport youtube from './plugins/youtube';\nimport vimeo from './plugins/vimeo';\nimport ui from './ui';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nconst media = {\n    // Setup media\n    setup() {\n        // If there's no media, bail\n        if (!this.media) {\n            this.console.warn('No media element found!');\n            return;\n        }\n\n        // Add type class\n        utils.toggleClass(this.elements.container, this.config.classNames.type.replace('{0}', this.type), true);\n\n        // Add provider class\n        utils.toggleClass(this.elements.container, this.config.classNames.provider.replace('{0}', this.provider), true);\n\n        // Add video class for embeds\n        // This will require changes if audio embeds are added\n        if (this.isEmbed) {\n            utils.toggleClass(this.elements.container, this.config.classNames.type.replace('{0}', 'video'), true);\n        }\n\n        if (this.supported.ui) {\n            // Check for picture-in-picture support\n            utils.toggleClass(this.elements.container, this.config.classNames.pip.supported, support.pip && this.isHTML5 && this.isVideo);\n\n            // Check for airplay support\n            utils.toggleClass(this.elements.container, this.config.classNames.airplay.supported, support.airplay && this.isHTML5);\n\n            // If there's no autoplay attribute, assume the video is stopped and add state class\n            utils.toggleClass(this.elements.container, this.config.classNames.stopped, this.config.autoplay);\n\n            // Add iOS class\n            utils.toggleClass(this.elements.container, this.config.classNames.isIos, browser.isIos);\n\n            // Add touch class\n            utils.toggleClass(this.elements.container, this.config.classNames.isTouch, support.touch);\n        }\n\n        // Inject the player wrapper\n        if (this.isVideo || this.isYouTube || this.isVimeo) {\n            // Create the wrapper div\n            this.elements.wrapper = utils.createElement('div', {\n                class: this.config.classNames.video,\n            });\n\n            // Wrap the video in a container\n            utils.wrap(this.media, this.elements.wrapper);\n        }\n\n        if (this.isEmbed) {\n            switch (this.provider) {\n                case 'youtube':\n                    youtube.setup.call(this);\n                    break;\n\n                case 'vimeo':\n                    vimeo.setup.call(this);\n                    break;\n\n                default:\n                    break;\n            }\n        } else if (this.isHTML5) {\n            ui.setTitle.call(this);\n        }\n    },\n\n    // Cancel current network requests\n    // See https://github.com/sampotts/plyr/issues/174\n    cancelRequests() {\n        if (!this.isHTML5) {\n            return;\n        }\n\n        // Remove child sources\n        Array.from(this.media.querySelectorAll('source')).forEach(utils.removeElement);\n\n        // Set blank video src attribute\n        // This is to prevent a MEDIA_ERR_SRC_NOT_SUPPORTED error\n        // Info: http://stackoverflow.com/questions/32231579/how-to-properly-dispose-of-an-html5-video-and-close-socket-or-connection\n        this.media.setAttribute('src', this.config.blankVideo);\n\n        // Load the new empty source\n        // This will cancel existing requests\n        // See https://github.com/sampotts/plyr/issues/174\n        this.media.load();\n\n        // Debugging\n        this.console.log('Cancelled network requests');\n    },\n};\n\nexport default media;\n","// ==========================================================================\n// Plyr source update\n// ==========================================================================\n\nimport { providers } from './types';\nimport utils from './utils';\nimport media from './media';\nimport ui from './ui';\nimport support from './support';\n\nconst source = {\n    // Add elements to HTML5 media (source, tracks, etc)\n    insertElements(type, attributes) {\n        if (utils.is.string(attributes)) {\n            utils.insertElement(type, this.media, {\n                src: attributes,\n            });\n        } else if (utils.is.array(attributes)) {\n            attributes.forEach(attribute => {\n                utils.insertElement(type, this.media, attribute);\n            });\n        }\n    },\n\n    // Update source\n    // Sources are not checked for support so be careful\n    change(input) {\n        if (!utils.is.object(input) || !('sources' in input) || !input.sources.length) {\n            this.console.warn('Invalid source format');\n            return;\n        }\n\n        // Cancel current network requests\n        media.cancelRequests.call(this);\n\n        // Destroy instance and re-setup\n        this.destroy.call(\n            this,\n            () => {\n                // TODO: Reset menus here\n\n                // Remove elements\n                utils.removeElement(this.media);\n                this.media = null;\n\n                // Reset class name\n                if (utils.is.htmlElement(this.elements.container)) {\n                    this.elements.container.removeAttribute('class');\n                }\n\n                // Set the type and provider\n                this.type = input.type;\n                this.provider = !utils.is.empty(input.sources[0].provider) ? input.sources[0].provider : providers.html5;\n\n                // Check for support\n                this.supported = support.check(this.type, this.provider, this.config.inline);\n\n                // Create new markup\n                switch (`${this.provider}:${this.type}`) {\n                    case 'html5:video':\n                        this.media = utils.createElement('video');\n                        break;\n\n                    case 'html5:audio':\n                        this.media = utils.createElement('audio');\n                        break;\n\n                    case 'youtube:video':\n                    case 'vimeo:video':\n                        this.media = utils.createElement('div');\n                        this.embedId = input.sources[0].src;\n                        break;\n\n                    default:\n                        break;\n                }\n\n                // Inject the new element\n                this.elements.container.appendChild(this.media);\n\n                // Autoplay the new source?\n                if (utils.is.boolean(input.autoplay)) {\n                    this.config.autoplay = input.autoplay;\n                }\n\n                // Set attributes for audio and video\n                if (this.isHTML5) {\n                    if (this.config.crossorigin) {\n                        this.media.setAttribute('crossorigin', '');\n                    }\n                    if (this.config.autoplay) {\n                        this.media.setAttribute('autoplay', '');\n                    }\n                    if ('poster' in input) {\n                        this.media.setAttribute('poster', input.poster);\n                    }\n                    if (this.config.loop.active) {\n                        this.media.setAttribute('loop', '');\n                    }\n                    if (this.config.muted) {\n                        this.media.setAttribute('muted', '');\n                    }\n                    if (this.config.inline) {\n                        this.media.setAttribute('playsinline', '');\n                    }\n                }\n\n                // Restore class hooks\n                utils.toggleClass(this.elements.container, this.config.classNames.captions.active, this.supported.ui && this.captions.enabled);\n                ui.addStyleHook.call(this);\n\n                // Set new sources for html5\n                if (this.isHTML5) {\n                    source.insertElements.call(this, 'source', input.sources);\n                }\n\n                // Set video title\n                this.config.title = input.title;\n\n                // Set up from scratch\n                media.setup.call(this);\n\n                // HTML5 stuff\n                if (this.isHTML5) {\n                    // Setup captions\n                    if ('tracks' in input) {\n                        source.insertElements.call(this, 'track', input.tracks);\n                    }\n\n                    // Load HTML5 sources\n                    this.media.load();\n                }\n\n                // If HTML5 or embed but not fully supported, setupInterface and call ready now\n                if (this.isHTML5 || (this.isEmbed && !this.supported.ui)) {\n                    // Setup interface\n                    ui.build.call(this);\n                }\n            },\n            true\n        );\n    },\n};\n\nexport default source;\n","﻿// ==========================================================================\n// Plyr\n// plyr.js v3.0.0\n// https://github.com/sampotts/plyr\n// License: The MIT License (MIT)\n// ==========================================================================\n\nimport { providers, types } from './types';\nimport defaults from './defaults';\nimport support from './support';\nimport utils from './utils';\n\nimport captions from './captions';\nimport controls from './controls';\nimport fullscreen from './fullscreen';\nimport listeners from './listeners';\nimport media from './media';\nimport storage from './storage';\nimport source from './source';\nimport ui from './ui';\n\n// Globals\nlet scrollPosition = {\n    x: 0,\n    y: 0,\n};\n\n// Plyr instance\nclass Plyr {\n    constructor(target, options) {\n        this.timers = {};\n        this.ready = false;\n\n        // Set the media element\n        this.media = target;\n\n        // String selector passed\n        if (utils.is.string(this.media)) {\n            this.media = document.querySelectorAll(this.media);\n        }\n\n        // jQuery, NodeList or Array passed, use first element\n        if ((window.jQuery && this.media instanceof jQuery) || utils.is.nodeList(this.media) || utils.is.array(this.media)) {\n            // eslint-disable-next-line\n            this.media = this.media[0];\n        }\n\n        // Set config\n        this.config = utils.extend(\n            {},\n            defaults,\n            options,\n            (() => {\n                try {\n                    return JSON.parse(this.media.getAttribute('data-plyr-config'));\n                } catch (e) {\n                    return null;\n                }\n            })()\n        );\n\n        // Elements cache\n        this.elements = {\n            container: null,\n            buttons: {},\n            display: {},\n            progress: {},\n            inputs: {},\n            settings: {\n                menu: null,\n                panes: {},\n                tabs: {},\n            },\n            captions: null,\n        };\n\n        // Captions\n        this.captions = {\n            enabled: null,\n            currentTrack: null,\n        };\n\n        // Fullscreen\n        this.fullscreen = {\n            active: false,\n        };\n\n        // Options\n        this.options = {\n            speed: [],\n            quality: [],\n        };\n\n        // Debugging\n        this.console = {\n            log() {},\n            warn() {},\n            error() {},\n        };\n        if (this.config.debug && 'console' in window) {\n            this.console = {\n                log: console.log, // eslint-disable-line\n                warn: console.warn, // eslint-disable-line\n                error: console.error, // eslint-disable-line\n            };\n            this.console.log('Debugging enabled');\n        }\n\n        // Log config options and support\n        this.console.log('Config', this.config);\n        this.console.log('Support', support);\n\n        // We need an element to setup\n        if (utils.is.nullOrUndefined(this.media) || !utils.is.htmlElement(this.media)) {\n            this.console.error('Setup failed: no suitable element passed');\n            return;\n        }\n\n        // Bail if the element is initialized\n        if (this.media.plyr) {\n            this.console.warn('Target already setup');\n            return;\n        }\n\n        // Bail if not enabled\n        if (!this.config.enabled) {\n            this.console.error('Setup failed: disabled by config');\n            return;\n        }\n\n        // Bail if disabled or no basic support\n        // You may want to disable certain UAs etc\n        if (!support.check().api) {\n            this.console.error('Setup failed: no support');\n            return;\n        }\n\n        // Cache original element state for .destroy()\n        this.elements.original = this.media.cloneNode(true);\n\n        // Set media type based on tag or data attribute\n        // Supported: video, audio, vimeo, youtube\n        const type = this.media.tagName.toLowerCase();\n\n        // Embed attributes\n        const attributes = {\n            provider: 'data-plyr-provider',\n            id: 'data-plyr-embed-id',\n        };\n\n        // Different setup based on type\n        switch (type) {\n            // TODO: Handle passing an iframe for true progressive enhancement\n            // case 'iframe':\n            case 'div':\n                this.type = types.video; // Audio will come later for external providers\n                this.provider = this.media.getAttribute(attributes.provider);\n                this.embedId = this.media.getAttribute(attributes.id);\n\n                if (utils.is.empty(this.provider) || !Object.keys(providers).includes(this.provider)) {\n                    this.console.error('Setup failed: Invalid provider');\n                    return;\n                }\n\n                // Try and get the embed id\n                if (utils.is.empty(this.embedId)) {\n                    this.console.error('Setup failed: Embed ID or URL missing');\n                    return;\n                }\n\n                // Clean up\n                this.media.removeAttribute(attributes.provider);\n                this.media.removeAttribute(attributes.id);\n\n                break;\n\n            case 'video':\n            case 'audio':\n                this.type = type;\n                this.provider = providers.html5;\n\n                if (this.media.hasAttribute('crossorigin')) {\n                    this.config.crossorigin = true;\n                }\n\n                if (this.media.hasAttribute('autoplay')) {\n                    this.config.autoplay = true;\n                }\n\n                if (this.media.hasAttribute('playsinline')) {\n                    this.config.inline = true;\n                }\n\n                if (this.media.hasAttribute('muted')) {\n                    this.config.muted = true;\n                }\n\n                if (this.media.hasAttribute('loop')) {\n                    this.config.loop.active = true;\n                }\n\n                break;\n\n            default:\n                this.console.error('Setup failed: unsupported type');\n                return;\n        }\n\n        // Setup local storage for user settings\n        storage.setup.call(this);\n\n        // Check for support again but with type\n        this.supported = support.check(this.type, this.provider, this.config.inline);\n\n        // If no support for even API, bail\n        if (!this.supported.api) {\n            this.console.error('Setup failed: no support');\n            return;\n        }\n\n        // Store reference\n        this.media.plyr = this;\n\n        // Wrap media\n        this.elements.container = utils.createElement('div');\n        utils.wrap(this.media, this.elements.container);\n\n        // Allow focus to be captured\n        this.elements.container.setAttribute('tabindex', 0);\n\n        // Global listeners\n        listeners.global.call(this);\n\n        // Add style hook\n        ui.addStyleHook.call(this);\n\n        // Setup media\n        media.setup.call(this);\n\n        // Listen for events if debugging\n        if (this.config.debug) {\n            utils.on(this.elements.container, this.config.events.join(' '), event => {\n                this.console.log(`event: ${event.type}`);\n            });\n        }\n\n        // Setup interface\n        // If embed but not fully supported, build interface now to avoid flash of controls\n        if (this.isHTML5 || (this.isEmbed && !this.supported.ui)) {\n            ui.build.call(this);\n        }\n    }\n\n    // ---------------------------------------\n    // API\n    // ---------------------------------------\n\n    /**\n     * Types and provider helpers\n     */\n    get isHTML5() {\n        return this.provider === providers.html5;\n    }\n    get isEmbed() {\n        return this.isYouTube || this.isVimeo;\n    }\n    get isYouTube() {\n        return this.provider === providers.youtube;\n    }\n    get isVimeo() {\n        return this.provider === providers.vimeo;\n    }\n    get isVideo() {\n        return this.type === types.video;\n    }\n    get isAudio() {\n        return this.type === types.audio;\n    }\n\n    /**\n     * Play the media\n     */\n    play() {\n        if ('play' in this.media) {\n            this.media.play();\n        }\n        return this;\n    }\n\n    /**\n     * Pause the media\n     */\n    pause() {\n        if ('pause' in this.media) {\n            this.media.pause();\n        }\n        return this;\n    }\n\n    /**\n     * Get paused state\n     */\n    get paused() {\n        return this.media.paused;\n    }\n\n    /**\n     * Get playing state\n     */\n    get playing() {\n        return !this.paused && !this.ended && (this.isHTML5 ? this.media.readyState > 2 : true);\n    }\n\n    /**\n     * Get ended state\n     */\n    get ended() {\n        return this.media.ended;\n    }\n\n    /**\n     * Toggle playback based on current status\n     * @param {boolean} toggle\n     */\n    togglePlay(toggle) {\n        // True toggle if nothing passed\n        if ((!utils.is.boolean(toggle) && this.media.paused) || toggle) {\n            return this.play();\n        }\n\n        return this.pause();\n    }\n\n    /**\n     * Stop playback\n     */\n    stop() {\n        return this.restart().pause();\n    }\n\n    /**\n     * Restart playback\n     */\n    restart() {\n        this.currentTime = 0;\n        return this;\n    }\n\n    /**\n     * Rewind\n     * @param {number} seekTime - how far to rewind in seconds. Defaults to the config.seekTime\n     */\n    rewind(seekTime) {\n        this.currentTime = this.currentTime - (utils.is.number(seekTime) ? seekTime : this.config.seekTime);\n        return this;\n    }\n\n    /**\n     * Fast forward\n     * @param {number} seekTime - how far to fast forward in seconds. Defaults to the config.seekTime\n     */\n    forward(seekTime) {\n        this.currentTime = this.currentTime + (utils.is.number(seekTime) ? seekTime : this.config.seekTime);\n        return this;\n    }\n\n    /**\n     * Seek to a time\n     * @param {number} input - where to seek to in seconds. Defaults to 0 (the start)\n     */\n    set currentTime(input) {\n        let targetTime = 0;\n\n        if (utils.is.number(input)) {\n            targetTime = input;\n        }\n\n        // Normalise targetTime\n        if (targetTime < 0) {\n            targetTime = 0;\n        } else if (targetTime > this.duration) {\n            targetTime = this.duration;\n        }\n\n        // Set\n        this.media.currentTime = targetTime.toFixed(4);\n\n        // Logging\n        this.console.log(`Seeking to ${this.currentTime} seconds`);\n    }\n\n    /**\n     * Get current time\n     */\n    get currentTime() {\n        return Number(this.media.currentTime);\n    }\n\n    /**\n     * Get seeking status\n     */\n    get seeking() {\n        return this.media.seeking;\n    }\n\n    /**\n     * Get the duration of the current media\n     */\n    get duration() {\n        // Faux duration set via config\n        const fauxDuration = parseInt(this.config.duration, 10);\n\n        // True duration\n        const realDuration = Number(this.media.duration);\n\n        // If custom duration is funky, use regular duration\n        return !Number.isNaN(fauxDuration) ? fauxDuration : realDuration;\n    }\n\n    /**\n     * Set the player volume\n     * @param {number} value - must be between 0 and 1. Defaults to the value from local storage and config.volume if not set in storage\n     */\n    set volume(value) {\n        let volume = value;\n        const max = 1;\n        const min = 0;\n\n        if (utils.is.string(volume)) {\n            volume = Number(volume);\n        }\n\n        // Load volume from storage if no value specified\n        if (!utils.is.number(volume)) {\n            ({ volume } = storage.get.call(this));\n        }\n\n        // Use config if all else fails\n        if (!utils.is.number(volume)) {\n            ({ volume } = this.config);\n        }\n\n        // Maximum is volumeMax\n        if (volume > max) {\n            volume = max;\n        }\n        // Minimum is volumeMin\n        if (volume < min) {\n            volume = min;\n        }\n\n        // Update config\n        this.config.volume = volume;\n\n        // Set the player volume\n        this.media.volume = volume;\n\n        // If muted, and we're increasing volume, reset muted state\n        if (this.muted && volume > 0) {\n            this.muted = false;\n        }\n    }\n\n    /**\n     * Get the current player volume\n     */\n    get volume() {\n        return this.media.volume;\n    }\n\n    /**\n     * Increase volume\n     * @param {boolean} step - How much to decrease by (between 0 and 1)\n     */\n    increaseVolume(step) {\n        const volume = this.media.muted ? 0 : this.volume;\n        this.volume = volume + (utils.is.number(step) ? step : 1);\n        return this;\n    }\n\n    /**\n     * Decrease volume\n     * @param {boolean} step - How much to decrease by (between 0 and 1)\n     */\n    decreaseVolume(step) {\n        const volume = this.media.muted ? 0 : this.volume;\n        this.volume = volume - (utils.is.number(step) ? step : 1);\n        return this;\n    }\n\n    /**\n     * Set muted state\n     * @param {boolean} mute\n     */\n    set muted(mute) {\n        let toggle = mute;\n\n        // Load muted state from storage\n        if (!utils.is.boolean(toggle)) {\n            toggle = storage.get.call(this).muted;\n        }\n\n        // Use config if all else fails\n        if (!utils.is.boolean(toggle)) {\n            toggle = this.config.muted;\n        }\n\n        // Update config\n        this.config.muted = toggle;\n\n        // Set mute on the player\n        this.media.muted = toggle;\n    }\n\n    /**\n     * Get current muted state\n     */\n    get muted() {\n        return this.media.muted;\n    }\n\n    /**\n     * Check if the media has audio\n     */\n    get hasAudio() {\n        // Assume yes for all non HTML5 (as we can't tell...)\n        if (!this.isHTML5) {\n            return true;\n        }\n\n        // Get audio tracks\n        return this.media.mozHasAudio || Boolean(this.media.webkitAudioDecodedByteCount) || Boolean(this.media.audioTracks && this.media.audioTracks.length);\n    }\n\n    /**\n     * Set playback speed\n     * @param {decimal} speed - the speed of playback (0.5-2.0)\n     */\n    set speed(input) {\n        let speed = null;\n\n        if (utils.is.number(input)) {\n            speed = input;\n        } else if (utils.is.number(storage.get.call(this).speed)) {\n            ({ speed } = storage.get.call(this));\n        } else {\n            speed = this.config.speed.selected;\n        }\n\n        // Set min/max\n        if (speed < 0.1) {\n            speed = 0.1;\n        }\n        if (speed > 2.0) {\n            speed = 2.0;\n        }\n\n        if (!this.config.speed.options.includes(speed)) {\n            this.console.warn(`Unsupported speed (${speed})`);\n            return;\n        }\n\n        // Update config\n        this.config.speed.selected = speed;\n\n        // Set media speed\n        this.media.playbackRate = speed;\n    }\n\n    /**\n     * Get current playback speed\n     */\n    get speed() {\n        return this.media.playbackRate;\n    }\n\n    /**\n     * Set playback quality\n     * Currently YouTube only\n     * @param {string} input - Quality level\n     */\n    set quality(input) {\n        let quality = null;\n\n        if (utils.is.string(input)) {\n            quality = input;\n        } else if (utils.is.number(storage.get.call(this).quality)) {\n            ({ quality } = storage.get.call(this));\n        } else {\n            quality = this.config.quality.selected;\n        }\n\n        if (!this.options.quality.includes(quality)) {\n            this.console.warn(`Unsupported quality option (${quality})`);\n            return;\n        }\n\n        // Update config\n        this.config.quality.selected = quality;\n\n        // Set quality\n        this.media.quality = quality;\n    }\n\n    /**\n     * Get current quality level\n     */\n    get quality() {\n        return this.media.quality;\n    }\n\n    /**\n     * Toggle loop\n     * TODO: Finish fancy new logic. Set the indicator on load as user may pass loop as config\n     * @param {boolean} input - Whether to loop or not\n     */\n    set loop(input) {\n        const toggle = utils.is.boolean(input) ? input : this.config.loop.active;\n        this.config.loop.active = toggle;\n        this.media.loop = toggle;\n\n        // Set default to be a true toggle\n        /* const type = ['start', 'end', 'all', 'none', 'toggle'].includes(input) ? input : 'toggle';\n\n        switch (type) {\n            case 'start':\n                if (this.config.loop.end && this.config.loop.end <= this.currentTime) {\n                    this.config.loop.end = null;\n                }\n                this.config.loop.start = this.currentTime;\n                // this.config.loop.indicator.start = this.elements.display.played.value;\n                break;\n\n            case 'end':\n                if (this.config.loop.start >= this.currentTime) {\n                    return this;\n                }\n                this.config.loop.end = this.currentTime;\n                // this.config.loop.indicator.end = this.elements.display.played.value;\n                break;\n\n            case 'all':\n                this.config.loop.start = 0;\n                this.config.loop.end = this.duration - 2;\n                this.config.loop.indicator.start = 0;\n                this.config.loop.indicator.end = 100;\n                break;\n\n            case 'toggle':\n                if (this.config.loop.active) {\n                    this.config.loop.start = 0;\n                    this.config.loop.end = null;\n                } else {\n                    this.config.loop.start = 0;\n                    this.config.loop.end = this.duration - 2;\n                }\n                break;\n\n            default:\n                this.config.loop.start = 0;\n                this.config.loop.end = null;\n                break;\n        } */\n    }\n\n    /**\n     * Get current loop state\n     */\n    get loop() {\n        return this.media.loop;\n    }\n\n    /**\n     * Set new media source\n     * @param {object} input - The new source object (see docs)\n     */\n    set source(input) {\n        source.change.call(this, input);\n    }\n\n    /**\n     * Get current source\n     */\n    get source() {\n        return this.media.currentSrc;\n    }\n\n    /**\n     * Set the poster image for a HTML5 video\n     * @param {input} - the URL for the new poster image\n     */\n    set poster(input) {\n        if (!this.isHTML5 || !this.isVideo) {\n            this.console.warn('Poster can only be set on HTML5 video');\n            return;\n        }\n\n        if (utils.is.string(input)) {\n            this.media.setAttribute('poster', input);\n        }\n    }\n\n    /**\n     * Get the current poster image\n     */\n    get poster() {\n        if (!this.isHTML5 || !this.isVideo) {\n            return null;\n        }\n\n        return this.media.getAttribute('poster');\n    }\n\n    /**\n     * Set the autoplay state\n     * @param {boolean} input - Whether to autoplay or not\n     */\n    set autoplay(input) {\n        const toggle = utils.is.boolean(input) ? input : this.config.autoplay;\n        this.config.autoplay = toggle;\n    }\n\n    /**\n     * Get the current autoplay state\n     */\n    get autoplay() {\n        return this.config.autoplay;\n    }\n\n    /**\n     * Toggle captions\n     * @param {boolean} input - Whether to enable captions\n     */\n    toggleCaptions(input) {\n        // If there's no full support, or there's no caption toggle\n        if (!this.supported.ui || !utils.is.htmlElement(this.elements.buttons.captions)) {\n            return this;\n        }\n\n        // If the method is called without parameter, toggle based on current value\n        const show = utils.is.boolean(input) ? input : this.elements.container.className.indexOf(this.config.classNames.captions.active) === -1;\n\n        // Nothing to change...\n        if (this.captions.enabled === show) {\n            return this;\n        }\n\n        // Set global\n        this.captions.enabled = show;\n\n        // Toggle state\n        utils.toggleState(this.elements.buttons.captions, this.captions.enabled);\n\n        // Add class hook\n        utils.toggleClass(this.elements.container, this.config.classNames.captions.active, this.captions.enabled);\n\n        // Trigger an event\n        utils.dispatchEvent.call(this, this.media, this.captions.enabled ? 'captionsenabled' : 'captionsdisabled');\n\n        // Allow chaining\n        return this;\n    }\n\n    /**\n     * Set the captions language\n     * @param {string} - Two character ISO language code (e.g. EN, FR, PT, etc)\n     */\n    set language(input) {\n        // Nothing specified\n        if (!utils.is.string(input)) {\n            return;\n        }\n\n        // Toggle captions based on input\n        this.toggleCaptions(!utils.is.empty(input));\n\n        // If empty string is passed, assume disable captions\n        if (utils.is.empty(input)) {\n            return;\n        }\n\n        // Normalize\n        const language = input.toLowerCase();\n\n        // If nothing to change, bail\n        if (this.language === language) {\n            return;\n        }\n\n        // Update config\n        this.captions.language = language;\n\n        // Clear caption\n        captions.setText.call(this, null);\n\n        // Update captions\n        captions.setLanguage.call(this);\n\n        // Trigger an event\n        utils.dispatchEvent.call(this, this.media, 'languagechange');\n    }\n\n    /**\n     * Get the current captions language\n     */\n    get language() {\n        return this.captions.language;\n    }\n\n    /**\n     * Toggle fullscreen playback\n     * Requires user input event\n     * @param {event} event\n     */\n    toggleFullscreen(event) {\n        // Check for native support\n        if (fullscreen.enabled) {\n            if (utils.is.event(event) && event.type === fullscreen.eventType) {\n                // If it's a fullscreen change event, update the state\n                this.fullscreen.active = fullscreen.isFullScreen(this.elements.container);\n            } else {\n                // Else it's a user request to enter or exit\n                if (!this.fullscreen.active) {\n                    fullscreen.requestFullScreen(this.elements.container);\n                } else {\n                    fullscreen.cancelFullScreen();\n                }\n\n                return this;\n            }\n        } else {\n            // Otherwise, it's a simple toggle\n            this.fullscreen.active = !this.fullscreen.active;\n\n            // Add class hook\n            utils.toggleClass(this.elements.container, this.config.classNames.fullscreen.fallback, this.fullscreen.active);\n\n            // Make sure we don't lose scroll position\n            if (this.fullscreen.active) {\n                scrollPosition = {\n                    x: window.pageXOffset || 0,\n                    y: window.pageYOffset || 0,\n                };\n            } else {\n                window.scrollTo(scrollPosition.x, scrollPosition.y);\n            }\n\n            // Bind/unbind escape key\n            document.body.style.overflow = this.fullscreen.active ? 'hidden' : '';\n        }\n\n        // Set button state\n        if (utils.is.htmlElement(this.elements.buttons.fullscreen)) {\n            utils.toggleState(this.elements.buttons.fullscreen, this.fullscreen.active);\n        }\n\n        // Trigger an event\n        utils.dispatchEvent.call(this, this.media, this.fullscreen.active ? 'enterfullscreen' : 'exitfullscreen');\n\n        return this;\n    }\n\n    /**\n     * Toggle picture-in-picture playback on WebKit/MacOS\n     * TODO: update player with state, support, enabled\n     * TODO: detect outside changes\n     */\n    set pip(input) {\n        const states = {\n            pip: 'picture-in-picture',\n            inline: 'inline',\n        };\n\n        // Bail if no support\n        if (!support.pip) {\n            return;\n        }\n\n        // Toggle based on current state if not passed\n        const toggle = utils.is.boolean(input) ? input : this.pip === states.inline;\n\n        // Toggle based on current state\n        this.media.webkitSetPresentationMode(toggle ? states.pip : states.inline);\n    }\n\n    /**\n     * Get the current picture-in-picture state\n     */\n    get pip() {\n        if (!support.pip) {\n            return null;\n        }\n\n        return this.media.webkitPresentationMode;\n    }\n\n    /**\n     * Trigger the airplay dialog\n     * TODO: update player with state, support, enabled\n     */\n    airplay() {\n        // Bail if no support\n        if (!support.airplay) {\n            return this;\n        }\n\n        // Show dialog\n        this.media.webkitShowPlaybackTargetPicker();\n\n        return this;\n    }\n\n    /**\n     * Toggle the player controls\n     * @param {boolean} toggle - Whether to show the controls\n     */\n    toggleControls(toggle) {\n        // We need controls of course...\n        if (!utils.is.htmlElement(this.elements.controls)) {\n            return this;\n        }\n\n        // Don't hide if no UI support or it's audio\n        if (!this.supported.ui || this.isAudio) {\n            return this;\n        }\n\n        let delay = 0;\n        let show = toggle;\n        let isEnterFullscreen = false;\n\n        // Get toggle state if not set\n        if (!utils.is.boolean(toggle)) {\n            if (utils.is.event(toggle)) {\n                // Is the enter fullscreen event\n                isEnterFullscreen = toggle.type === 'enterfullscreen';\n\n                // Whether to show controls\n                show = ['mouseenter', 'mousemove', 'touchstart', 'touchmove', 'focusin'].includes(toggle.type);\n\n                // Delay hiding on move events\n                if (['mousemove', 'touchmove', 'touchend'].includes(toggle.type)) {\n                    delay = 2000;\n                }\n\n                // Delay a little more for keyboard users\n                if (toggle.type === 'focusin') {\n                    delay = 3000;\n                    utils.toggleClass(this.elements.controls, this.config.classNames.noTransition, true);\n                }\n            } else {\n                show = utils.hasClass(this.elements.container, this.config.classNames.hideControls);\n            }\n        }\n\n        // Clear timer on every call\n        window.clearTimeout(this.timers.controls);\n\n        // If the mouse is not over the controls, set a timeout to hide them\n        if (show || this.paused || this.loading) {\n            // Check if controls toggled\n            const toggled = utils.toggleClass(this.elements.container, this.config.classNames.hideControls, false);\n\n            // Trigger event\n            if (toggled) {\n                utils.dispatchEvent.call(this, this.media, 'controlsshown');\n            }\n\n            // Always show controls when paused or if touch\n            if (this.paused || this.loading) {\n                return this;\n            }\n\n            // Delay for hiding on touch\n            if (support.touch) {\n                delay = 3000;\n            }\n        }\n\n        // If toggle is false or if we're playing (regardless of toggle),\n        // then set the timer to hide the controls\n        if (!show || this.playing) {\n            this.timers.controls = window.setTimeout(() => {\n                /* this.console.warn({\n                    pressed: this.elements.controls.pressed,\n                    hover: this.elements.controls.pressed,\n                    playing: this.playing,\n                    paused: this.paused,\n                    loading: this.loading,\n                }); */\n\n                // If the mouse is over the controls (and not entering fullscreen), bail\n                if ((this.elements.controls.pressed || this.elements.controls.hover) && !isEnterFullscreen) {\n                    return;\n                }\n\n                // Restore transition behaviour\n                if (!utils.hasClass(this.elements.container, this.config.classNames.hideControls)) {\n                    utils.toggleClass(this.elements.controls, this.config.classNames.noTransition, false);\n                }\n\n                // Check if controls toggled\n                const toggled = utils.toggleClass(this.elements.container, this.config.classNames.hideControls, true);\n\n                // Trigger event and close menu\n                if (toggled) {\n                    utils.dispatchEvent.call(this, this.media, 'controlshidden');\n\n                    if (this.config.controls.includes('settings') && !utils.is.empty(this.config.settings)) {\n                        controls.toggleMenu.call(this, false);\n                    }\n                }\n            }, delay);\n        }\n\n        return this;\n    }\n\n    /**\n     * Add event listeners\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     */\n    on(event, callback) {\n        utils.on(this.elements.container, event, callback);\n        return this;\n    }\n\n    /**\n     * Remove event listeners\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     */\n    off(event, callback) {\n        utils.off(this.elements.container, event, callback);\n        return this;\n    }\n\n    /**\n     * Check for support for a mime type (HTML5 only)\n     * @param {string} type - Mime type\n     */\n    supports(type) {\n        return support.mime.call(this, type);\n    }\n\n    /**\n     * Destroy an instance\n     * Event listeners are removed when elements are removed\n     * http://stackoverflow.com/questions/12528049/if-a-dom-element-is-removed-are-its-listeners-also-removed-from-memory\n     * @param {function} callback - Callback for when destroy is complete\n     * @param {boolean} soft - Whether it's a soft destroy (for source changes etc)\n     */\n    destroy(callback, soft = false) {\n        const done = () => {\n            // Reset overflow (incase destroyed while in fullscreen)\n            document.body.style.overflow = '';\n\n            // GC for embed\n            this.embed = null;\n            this.embedId = null;\n\n            // If it's a soft destroy, make minimal changes\n            if (soft) {\n                if (Object.keys(this.elements).length) {\n                    // Remove buttons\n                    if (this.elements.buttons && this.elements.buttons.play) {\n                        Array.from(this.elements.buttons.play).forEach(button => utils.removeElement(button));\n                    }\n\n                    // Remove others\n                    utils.removeElement(this.elements.captions);\n                    utils.removeElement(this.elements.controls);\n                    utils.removeElement(this.elements.wrapper);\n\n                    // Clear for GC\n                    this.elements.buttons.play = null;\n                    this.elements.captions = null;\n                    this.elements.controls = null;\n                    this.elements.wrapper = null;\n                }\n\n                // Callback\n                if (utils.is.function(callback)) {\n                    callback();\n                }\n            } else {\n                // Replace the container with the original element provided\n                const parent = this.elements.container.parentNode;\n\n                if (utils.is.htmlElement(parent)) {\n                    parent.replaceChild(this.elements.original, this.elements.container);\n                }\n\n                // Event\n                utils.dispatchEvent.call(this, this.elements.original, 'destroyed', true);\n\n                // Callback\n                if (utils.is.function(callback)) {\n                    callback.call(this.elements.original);\n                }\n\n                // Clear for GC\n                this.elements = null;\n            }\n        };\n\n        // Type specific stuff\n        switch (`${this.provider}:${this.type}`) {\n            case 'html5:video':\n            case 'html5:audio':\n                // Restore native video controls\n                ui.toggleNativeControls.call(this, true);\n\n                // Clean up\n                done();\n\n                break;\n\n            case 'youtube:video':\n                // Clear timers\n                window.clearInterval(this.timers.buffering);\n                window.clearInterval(this.timers.playing);\n\n                // Destroy YouTube API\n                this.embed.destroy();\n\n                // Clean up\n                done();\n\n                break;\n\n            case 'vimeo:video':\n                // Destroy Vimeo API\n                // then clean up (wait, to prevent postmessage errors)\n                this.embed.unload().then(done);\n\n                // Vimeo does not always return\n                window.setTimeout(done, 200);\n\n                break;\n\n            default:\n                break;\n        }\n    }\n}\n\nexport default Plyr;\n"],"names":["get","store","window","localStorage","getItem","this","config","storage","key","utils","is","empty","JSON","parse","set","object","support","enabled","call","extend","setItem","stringify","providers","types","defaults","navigator","language","split","input","getConstructor","Object","Number","isNaN","String","Boolean","Function","nullOrUndefined","Array","isArray","instanceof","NodeList","HTMLElement","Text","Event","TextTrackCue","VTTCue","TextTrack","string","kind","array","nodeList","length","keys","constructor","document","documentMode","documentElement","style","test","userAgent","platform","url","callback","current","querySelector","callbacks","push","element","createElement","function","addEventListener","forEach","cb","event","src","first","getElementsByTagName","parentNode","insertBefore","id","updateSprite","data","innerHTML","body","childNodes","hasId","querySelectorAll","container","toggleHidden","setAttribute","cached","content","then","response","ok","text","catch","prefix","Math","floor","random","self","top","e","elements","wrapper","targets","from","reverse","index","child","cloneNode","parent","sibling","nextSibling","appendChild","type","attributes","setAttributes","textContent","target","htmlElement","removeChild","lastChild","sel","existingAttributes","existing","selector","s","trim","className","replace","parts","value","charAt","class","toggle","contains","classList","removeAttribute","prototype","Element","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","includes","controls","getElement","selectors","buttons","getElements","play","pause","restart","rewind","forward","mute","pip","airplay","settings","captions","fullscreen","progress","inputs","seek","volume","display","buffer","duration","currentTime","seekTooltip","classNames","tooltip","error","console","warn","toggleNativeControls","focused","activeElement","focusable","last","on","keyCode","_this","active","getFocusElement","shiftKey","focus","preventDefault","passive","capture","Node","toggleListener","events","options","boolean","passiveListeners","bubbles","detail","CustomEvent","assign","Plyr","dispatchEvent","pressed","getAttribute","state","max","toFixed","objects","destination","shift","source","property","match","RegExp","$2","number","map","encodeURIComponent","join","fragment","createDocumentFragment","firstChild","innerText","width","height","ratio","getRatio","w","h","find","undefined","provider","inline","api","ui","browser","getBrowser","playsInline","isIPhone","video","rangeInput","audio","removeItem","webkitSetPresentationMode","WebKitPlaybackTargetAvailabilityEvent","media","isHTML5","canPlayType","isVideo","isAudio","supported","defineProperty","range","transitionEnd","matchMedia","cancelFullScreen","some","pre","msExitFullscreen","msFullscreenEnabled","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","fullscreenElement","mozFullScreenElement","requestFullScreen","nativeSupport","fallback","inFrame","log","toggleClass","toggleState","trapFocus","setup","parseFloat","listeners","getKeyCode","which","handleKey","code","repeat","altKey","ctrlKey","metaKey","editable","stopPropagation","togglePlay","increaseVolume","decreaseVolume","muted","toggleFullscreen","toggleCaptions","loop","keyboard","global","tabFocus","setTimeout","hideControls","toggleControls","eventType","timeUpdate","durationUpdate","_this2","hasAudio","showPosterOnEnd","load","updateProgress","updateVolume","checkPlaying","checkLoading","clickToPlay","touch","paused","ended","disableContextMenu","updateSetting","speed","quality","concat","inputEvent","isIE","proxy","handlerKey","defaultHandler","customHandler","_this3","defaultPrevented","toggleMenu","form","showTab","toggleInvert","invertTime","isWebkit","updateRangeFill","updateSeekTooltip","hover","inverted","webkitDirectionInvertedFromDevice","direction","deltaY","deltaX","uiSupported","removeElement","inject","ready","setTitle","label","i18n","title","isEmbed","iframe","frameTitle","playing","stopped","button","loading","timers","setRange","nodeValue","getPercentage","buffered","end","setProgress","time","format","slice","getHours","parseInt","hours","mins","getMinutes","secs","getSeconds","invert","updateTimeDisplay","seeking","displayDuration","styleSheet","sheet","percentage","styles","rules","findIndex","rule","selectorText","deleteRule","insertRule","iconUrl","indexOf","svg4everybody","getIconUrl","iconPath","absolute","iconPrefix","icon","createElementNS","use","path","setAttributeNS","attr","hidden","badge","menu","buttonType","labelPressed","iconPressed","control","createIcon","createLabel","getAttributesFromSelector","suffix","played","toLowerCase","list","checked","item","radio","faux","aria-hidden","insertAdjacentHTML","tooltips","percent","clientRect","getBoundingClientRect","visible","pageX","left","hasClass","setting","tab","tabs","pane","panes","filter","isYouTube","toggleTab","emptyElement","getBadge","createBadge","createMenuItem","getLabel","getLanguage","default","textTracks","getTracks","none","currentTrack","getCurrentTrack","track","disabled","hasTracks","tracks","toUpperCase","unshift","show","isMenuItem","isButton","open","clone","position","opacity","name","scrollWidth","scrollHeight","getElementById","transitions","reducedMotion","size","getTabSize","restore","propertyName","off","createButton","createRange","createProgress","createTime","inner","home","_this4","back","setSpeedMenu","loadSprite","seekTime","create","findElements","labels","_this5","setCaptionsMenu","insertAfter","setLanguage","setCue","mode","activeCues","isVimeo","embed","enableTextTrack","cue","setText","getCueAsHTML","caption","youtube","videoId","parseYouTubeId","embedId","containers","setAspectRatio","generateId","YT","loadScript","urls","onYouTubeReadyCallbacks","onYouTubeIframeAPIReady","getVideoData","google","json","result","items","snippet","paddingBottom","player","Player","autoplay","location","hostname","href","message","instance","getPlaybackQuality","playbackRate","getPlaybackRate","getTitle","playVideo","pauseVideo","stop","stopVideo","getDuration","getCurrentTime","seekTo","setPlaybackRate","setPlaybackQuality","setVolume","getVideoUrl","getAvailablePlaybackRates","clearInterval","buffering","setInterval","getVideoLoadedFraction","lastBuffered","build","setQualityMenu","getAvailableQualityLevels","vimeo","Vimeo","padding","offset","transform","params","buildUrlParameters","parseVimeoId","setCurrentTime","selected","setLoop","currentSrc","all","getVideoWidth","getVideoHeight","getAspectRatio","dimensions","setAutopause","autopause","getVideoTitle","getTextTracks","cues","stripHTML","seconds","isIos","isTouch","wrap","blankVideo","insertElement","attribute","sources","cancelRequests","destroy","html5","check","crossorigin","poster","addStyleHook","insertElements","scrollPosition","jQuery","debug","plyr","original","tagName","hasAttribute","step","isFullScreen","pageXOffset","pageYOffset","scrollTo","x","y","overflow","webkitShowPlaybackTargetPicker","delay","isEnterFullscreen","noTransition","clearTimeout","mime","soft","done","replaceChild","unload","readyState","targetTime","fauxDuration","realDuration","mozHasAudio","webkitAudioDecodedByteCount","audioTracks","change","states","webkitPresentationMode"],"mappings":"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"}
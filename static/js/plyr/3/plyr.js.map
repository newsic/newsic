{"version":3,"file":"plyr.js","sources":["src/js/types.js","src/js/defaults.js","src/js/utils.js","src/js/support.js","src/js/console.js","src/js/storage.js","src/js/fullscreen.js","src/js/listeners.js","src/js/ui.js","src/js/controls.js","src/js/captions.js","src/js/plugins/youtube.js","src/js/plugins/vimeo.js","src/js/media.js","src/js/source.js","src/js/plyr.js"],"sourcesContent":["// ==========================================================================\n// Plyr supported types and providers\n// ==========================================================================\n\nexport const providers = {\n    html5: 'html5',\n    youtube: 'youtube',\n    vimeo: 'vimeo',\n};\n\nexport const types = {\n    audio: 'audio',\n    video: 'video',\n};\n\nexport default { providers, types };\n","// Default config\nconst defaults = {\n    // Disable\n    enabled: true,\n\n    // Custom media title\n    title: '',\n\n    // Logging to console\n    debug: false,\n\n    // Auto play (if supported)\n    autoplay: false,\n\n    // Only allow one media playing at once (vimeo only)\n    autopause: true,\n\n    // Default time to skip when rewind/fast forward\n    seekTime: 10,\n\n    // Default volume\n    volume: 1,\n    muted: false,\n\n    // Pass a custom duration\n    duration: null,\n\n    // Display the media duration on load in the current time position\n    // If you have opted to display both duration and currentTime, this is ignored\n    displayDuration: true,\n\n    // Invert the current time to be a countdown\n    invertTime: true,\n\n    // Clicking the currentTime inverts it's value to show time left rather than elapsed\n    toggleInvert: true,\n\n    // Aspect ratio (for embeds)\n    ratio: '16:9',\n\n    // Click video container to play/pause\n    clickToPlay: true,\n\n    // Auto hide the controls\n    hideControls: true,\n\n    // Revert to poster on finish (HTML5 - will cause reload)\n    showPosterOnEnd: false,\n\n    // Disable the standard context menu\n    disableContextMenu: true,\n\n    // Sprite (for icons)\n    loadSprite: true,\n    iconPrefix: 'plyr',\n    iconUrl: 'https://cdn.plyr.io/2.0.10/plyr.svg',\n\n    // Blank video (used to prevent errors on source change)\n    blankVideo: 'https://cdn.plyr.io/static/blank.mp4',\n\n    // Quality default\n    quality: {\n        default: 'default',\n        options: [\n            'hd2160',\n            'hd1440',\n            'hd1080',\n            'hd720',\n            'large',\n            'medium',\n            'small',\n            'tiny',\n            'default',\n        ],\n    },\n\n    // Set loops\n    loop: {\n        active: false,\n        // start: null,\n        // end: null,\n    },\n\n    // Speed default and options to display\n    speed: {\n        selected: 1,\n        options: [\n            0.5,\n            0.75,\n            1,\n            1.25,\n            1.5,\n            1.75,\n            2,\n        ],\n    },\n\n    // Keyboard shortcut settings\n    keyboard: {\n        focused: true,\n        global: false,\n    },\n\n    // Display tooltips\n    tooltips: {\n        controls: false,\n        seek: true,\n    },\n\n    // Captions settings\n    captions: {\n        active: false,\n        language: window.navigator.language.split('-')[0],\n    },\n\n    // Fullscreen settings\n    fullscreen: {\n        enabled: true, // Allow fullscreen?\n        fallback: true, // Fallback for vintage browsers\n    },\n\n    // Local storage\n    storage: {\n        enabled: true,\n        key: 'plyr',\n    },\n\n    // Default controls\n    controls: [\n        'play-large',\n        'play',\n        'progress',\n        'current-time',\n        'mute',\n        'volume',\n        'captions',\n        'settings',\n        'pip',\n        'airplay',\n        'fullscreen',\n    ],\n    settings: [\n        'captions',\n        'quality',\n        'speed',\n    ],\n\n    // Localisation\n    i18n: {\n        restart: 'Restart',\n        rewind: 'Rewind {seektime} secs',\n        play: 'Play',\n        pause: 'Pause',\n        forward: 'Forward {seektime} secs',\n        seek: 'Seek',\n        played: 'Played',\n        buffered: 'Buffered',\n        currentTime: 'Current time',\n        duration: 'Duration',\n        volume: 'Volume',\n        mute: 'Mute',\n        unmute: 'Unmute',\n        enableCaptions: 'Enable captions',\n        disableCaptions: 'Disable captions',\n        enterFullscreen: 'Enter fullscreen',\n        exitFullscreen: 'Exit fullscreen',\n        frameTitle: 'Player for {title}',\n        captions: 'Captions',\n        settings: 'Settings',\n        speed: 'Speed',\n        quality: 'Quality',\n        loop: 'Loop',\n        start: 'Start',\n        end: 'End',\n        all: 'All',\n        reset: 'Reset',\n        none: 'None',\n        disabled: 'Disabled',\n    },\n\n    // URLs\n    urls: {\n        vimeo: {\n            api: 'https://player.vimeo.com/api/player.js',\n        },\n        youtube: {\n            api: 'https://www.youtube.com/iframe_api',\n        },\n    },\n\n    // Custom control listeners\n    listeners: {\n        seek: null,\n        play: null,\n        pause: null,\n        restart: null,\n        rewind: null,\n        forward: null,\n        mute: null,\n        volume: null,\n        captions: null,\n        fullscreen: null,\n        pip: null,\n        airplay: null,\n        speed: null,\n        quality: null,\n        loop: null,\n        language: null,\n    },\n\n    // Events to watch and bubble\n    events: [\n        // Events to watch on HTML5 media elements and bubble\n        // https://developer.mozilla.org/en/docs/Web/Guide/Events/Media_events\n        'ended',\n        'progress',\n        'stalled',\n        'playing',\n        'waiting',\n        'canplay',\n        'canplaythrough',\n        'loadstart',\n        'loadeddata',\n        'loadedmetadata',\n        'timeupdate',\n        'volumechange',\n        'play',\n        'pause',\n        'error',\n        'seeking',\n        'seeked',\n        'emptied',\n        'ratechange',\n        'cuechange',\n\n        // Custom events\n        'enterfullscreen',\n        'exitfullscreen',\n        'captionsenabled',\n        'captionsdisabled',\n        'languagechange',\n        'controlshidden',\n        'controlsshown',\n        'ready',\n\n        // YouTube\n        'statechange',\n        'qualitychange',\n        'qualityrequested',\n    ],\n\n    // Selectors\n    // Change these to match your template if using custom HTML\n    selectors: {\n        editable: 'input, textarea, select, [contenteditable]',\n        container: '.plyr',\n        controls: {\n            container: null,\n            wrapper: '.plyr__controls',\n        },\n        labels: '[data-plyr]',\n        buttons: {\n            play: '[data-plyr=\"play\"]',\n            pause: '[data-plyr=\"pause\"]',\n            restart: '[data-plyr=\"restart\"]',\n            rewind: '[data-plyr=\"rewind\"]',\n            forward: '[data-plyr=\"fast-forward\"]',\n            mute: '[data-plyr=\"mute\"]',\n            captions: '[data-plyr=\"captions\"]',\n            fullscreen: '[data-plyr=\"fullscreen\"]',\n            pip: '[data-plyr=\"pip\"]',\n            airplay: '[data-plyr=\"airplay\"]',\n            settings: '[data-plyr=\"settings\"]',\n            loop: '[data-plyr=\"loop\"]',\n        },\n        inputs: {\n            seek: '[data-plyr=\"seek\"]',\n            volume: '[data-plyr=\"volume\"]',\n            speed: '[data-plyr=\"speed\"]',\n            language: '[data-plyr=\"language\"]',\n            quality: '[data-plyr=\"quality\"]',\n        },\n        display: {\n            currentTime: '.plyr__time--current',\n            duration: '.plyr__time--duration',\n            buffer: '.plyr__progress--buffer',\n            played: '.plyr__progress--played',\n            loop: '.plyr__progress--loop',\n            volume: '.plyr__volume--display',\n        },\n        progress: '.plyr__progress',\n        captions: '.plyr__captions',\n        menu: {\n            quality: '.js-plyr__menu__list--quality',\n        },\n    },\n\n    // Class hooks added to the player in different states\n    classNames: {\n        video: 'plyr__video-wrapper',\n        embed: 'plyr__video-embed',\n        control: 'plyr__control',\n        type: 'plyr--{0}',\n        provider: 'plyr--{0}',\n        stopped: 'plyr--stopped',\n        playing: 'plyr--playing',\n        loading: 'plyr--loading',\n        hover: 'plyr--hover',\n        tooltip: 'plyr__tooltip',\n        hidden: 'plyr__sr-only',\n        hideControls: 'plyr--hide-controls',\n        isIos: 'plyr--is-ios',\n        isTouch: 'plyr--is-touch',\n        uiSupported: 'plyr--full-ui',\n        noTransition: 'plyr--no-transition',\n        menu: {\n            value: 'plyr__menu__value',\n            badge: 'plyr__badge',\n            open: 'plyr--menu-open',\n        },\n        captions: {\n            enabled: 'plyr--captions-enabled',\n            active: 'plyr--captions-active',\n        },\n        fullscreen: {\n            enabled: 'plyr--fullscreen-enabled',\n            fallback: 'plyr--fullscreen-fallback',\n        },\n        pip: {\n            supported: 'plyr--pip-supported',\n            active: 'plyr--pip-active',\n        },\n        airplay: {\n            supported: 'plyr--airplay-supported',\n            active: 'plyr--airplay-active',\n        },\n        tabFocus: 'plyr__tab-focus',\n    },\n\n    // API keys\n    keys: {\n        google: null,\n    },\n};\n\nexport default defaults;\n","// ==========================================================================\n// Plyr utils\n// ==========================================================================\n\nimport support from './support';\n\nconst utils = {\n    // Check variable types\n    is: {\n        plyr(input) {\n            return this.instanceof(input, Plyr);\n        },\n        object(input) {\n            return this.getConstructor(input) === Object;\n        },\n        number(input) {\n            return this.getConstructor(input) === Number && !Number.isNaN(input);\n        },\n        string(input) {\n            return this.getConstructor(input) === String;\n        },\n        boolean(input) {\n            return this.getConstructor(input) === Boolean;\n        },\n        function(input) {\n            return this.getConstructor(input) === Function;\n        },\n        array(input) {\n            return !this.nullOrUndefined(input) && Array.isArray(input);\n        },\n        weakMap(input) {\n            return this.instanceof(input, window.WeakMap);\n        },\n        nodeList(input) {\n            return this.instanceof(input, window.NodeList);\n        },\n        element(input) {\n            return this.instanceof(input, window.Element);\n        },\n        textNode(input) {\n            return this.getConstructor(input) === Text;\n        },\n        event(input) {\n            return this.instanceof(input, window.Event);\n        },\n        cue(input) {\n            return this.instanceof(input, window.TextTrackCue) || this.instanceof(input, window.VTTCue);\n        },\n        track(input) {\n            return this.instanceof(input, TextTrack) || (!this.nullOrUndefined(input) && this.string(input.kind));\n        },\n        nullOrUndefined(input) {\n            return input === null || typeof input === 'undefined';\n        },\n        empty(input) {\n            return (\n                this.nullOrUndefined(input) ||\n                ((this.string(input) || this.array(input) || this.nodeList(input)) && !input.length) ||\n                (this.object(input) && !Object.keys(input).length)\n            );\n        },\n        instanceof(input, constructor) {\n            return Boolean(input && constructor && input instanceof constructor);\n        },\n        getConstructor(input) {\n            return !this.nullOrUndefined(input) ? input.constructor : null;\n        },\n    },\n\n    // Unfortunately, due to mixed support, UA sniffing is required\n    getBrowser() {\n        return {\n            isIE: /* @cc_on!@ */ false || !!document.documentMode,\n            isWebkit: 'WebkitAppearance' in document.documentElement.style && !/Edge/.test(navigator.userAgent),\n            isIPhone: /(iPhone|iPod)/gi.test(navigator.platform),\n            isIos: /(iPad|iPhone|iPod)/gi.test(navigator.platform),\n        };\n    },\n\n    // Load an external script\n    loadScript(url, callback) {\n        const current = document.querySelector(`script[src=\"${url}\"]`);\n\n        // Check script is not already referenced, if so wait for load\n        if (current !== null) {\n            current.callbacks = current.callbacks || [];\n            current.callbacks.push(callback);\n            return;\n        }\n\n        // Build the element\n        const element = document.createElement('script');\n\n        // Callback queue\n        element.callbacks = element.callbacks || [];\n        element.callbacks.push(callback);\n\n        // Bind callback\n        if (utils.is.function(callback)) {\n            element.addEventListener(\n                'load',\n                event => {\n                    element.callbacks.forEach(cb => cb.call(null, event));\n                    element.callbacks = null;\n                },\n                false\n            );\n        }\n\n        // Set the URL after binding callback\n        element.src = url;\n\n        // Inject\n        const first = document.getElementsByTagName('script')[0];\n        first.parentNode.insertBefore(element, first);\n    },\n\n    // Load an external SVG sprite\n    loadSprite(url, id) {\n        if (!utils.is.string(url)) {\n            return;\n        }\n\n        const prefix = 'cache-';\n        const hasId = utils.is.string(id);\n        let isCached = false;\n\n        function updateSprite(data) {\n            // Inject content\n            this.innerHTML = data;\n\n            // Inject the SVG to the body\n            document.body.insertBefore(this, document.body.childNodes[0]);\n        }\n\n        // Only load once\n        if (!hasId || !document.querySelectorAll(`#${id}`).length) {\n            // Create container\n            const container = document.createElement('div');\n            utils.toggleHidden(container, true);\n\n            if (hasId) {\n                container.setAttribute('id', id);\n            }\n\n            // Check in cache\n            if (support.storage) {\n                const cached = window.localStorage.getItem(prefix + id);\n                isCached = cached !== null;\n\n                if (isCached) {\n                    const data = JSON.parse(cached);\n                    updateSprite.call(container, data.content);\n                    return;\n                }\n            }\n\n            // Get the sprite\n            fetch(url)\n                .then(response => (response.ok ? response.text() : null))\n                .then(text => {\n                    if (text === null) {\n                        return;\n                    }\n\n                    if (support.storage) {\n                        window.localStorage.setItem(\n                            prefix + id,\n                            JSON.stringify({\n                                content: text,\n                            })\n                        );\n                    }\n\n                    updateSprite.call(container, text);\n                })\n                .catch(() => {});\n        }\n    },\n\n    // Generate a random ID\n    generateId(prefix) {\n        return `${prefix}-${Math.floor(Math.random() * 10000)}`;\n    },\n\n    // Determine if we're in an iframe\n    inFrame() {\n        try {\n            return window.self !== window.top;\n        } catch (e) {\n            return true;\n        }\n    },\n\n    // Wrap an element\n    wrap(elements, wrapper) {\n        // Convert `elements` to an array, if necessary.\n        const targets = elements.length ? elements : [elements];\n\n        // Loops backwards to prevent having to clone the wrapper on the\n        // first element (see `child` below).\n        Array.from(targets)\n            .reverse()\n            .forEach((element, index) => {\n                const child = index > 0 ? wrapper.cloneNode(true) : wrapper;\n\n                // Cache the current parent and sibling.\n                const parent = element.parentNode;\n                const sibling = element.nextSibling;\n\n                // Wrap the element (is automatically removed from its current\n                // parent).\n                child.appendChild(element);\n\n                // If the element had a sibling, insert the wrapper before\n                // the sibling to maintain the HTML structure; otherwise, just\n                // append it to the parent.\n                if (sibling) {\n                    parent.insertBefore(child, sibling);\n                } else {\n                    parent.appendChild(child);\n                }\n            });\n    },\n\n    // Create a DocumentFragment\n    createElement(type, attributes, text) {\n        // Create a new <element>\n        const element = document.createElement(type);\n\n        // Set all passed attributes\n        if (utils.is.object(attributes)) {\n            utils.setAttributes(element, attributes);\n        }\n\n        // Add text node\n        if (utils.is.string(text)) {\n            element.textContent = text;\n        }\n\n        // Return built element\n        return element;\n    },\n\n    // Inaert an element after another\n    insertAfter(element, target) {\n        target.parentNode.insertBefore(element, target.nextSibling);\n    },\n\n    // Insert a DocumentFragment\n    insertElement(type, parent, attributes, text) {\n        // Inject the new <element>\n        parent.appendChild(utils.createElement(type, attributes, text));\n    },\n\n    // Remove an element\n    removeElement(element) {\n        if (!utils.is.element(element) || !utils.is.element(element.parentNode)) {\n            return null;\n        }\n\n        element.parentNode.removeChild(element);\n\n        return element;\n    },\n\n    // Remove all child elements\n    emptyElement(element) {\n        let { length } = element.childNodes;\n\n        while (length > 0) {\n            element.removeChild(element.lastChild);\n            length -= 1;\n        }\n    },\n\n    // Set attributes\n    setAttributes(element, attributes) {\n        if (!utils.is.element(element) || utils.is.empty(attributes)) {\n            return;\n        }\n\n        Object.keys(attributes).forEach(key => {\n            element.setAttribute(key, attributes[key]);\n        });\n    },\n\n    // Get an attribute object from a string selector\n    getAttributesFromSelector(sel, existingAttributes) {\n        // For example:\n        // '.test' to { class: 'test' }\n        // '#test' to { id: 'test' }\n        // '[data-test=\"test\"]' to { 'data-test': 'test' }\n\n        if (!utils.is.string(sel) || utils.is.empty(sel)) {\n            return {};\n        }\n\n        const attributes = {};\n        const existing = existingAttributes;\n\n        sel.split(',').forEach(s => {\n            // Remove whitespace\n            const selector = s.trim();\n            const className = selector.replace('.', '');\n            const stripped = selector.replace(/[[\\]]/g, '');\n\n            // Get the parts and value\n            const parts = stripped.split('=');\n            const key = parts[0];\n            const value = parts.length > 1 ? parts[1].replace(/[\"']/g, '') : '';\n\n            // Get the first character\n            const start = selector.charAt(0);\n\n            switch (start) {\n                case '.':\n                    // Add to existing classname\n                    if (utils.is.object(existing) && utils.is.string(existing.class)) {\n                        existing.class += ` ${className}`;\n                    }\n\n                    attributes.class = className;\n                    break;\n\n                case '#':\n                    // ID selector\n                    attributes.id = selector.replace('#', '');\n                    break;\n\n                case '[':\n                    // Attribute selector\n                    attributes[key] = value;\n\n                    break;\n\n                default:\n                    break;\n            }\n        });\n\n        return attributes;\n    },\n\n    // Toggle class on an element\n    toggleClass(element, className, toggle) {\n        if (utils.is.element(element)) {\n            const contains = element.classList.contains(className);\n\n            element.classList[toggle ? 'add' : 'remove'](className);\n\n            return (toggle && !contains) || (!toggle && contains);\n        }\n\n        return null;\n    },\n\n    // Has class name\n    hasClass(element, className) {\n        return utils.is.element(element) && element.classList.contains(className);\n    },\n\n    // Toggle hidden attribute on an element\n    toggleHidden(element, toggle) {\n        if (!utils.is.element(element)) {\n            return;\n        }\n\n        if (toggle) {\n            element.setAttribute('hidden', '');\n        } else {\n            element.removeAttribute('hidden');\n        }\n    },\n\n    // Element matches selector\n    matches(element, selector) {\n        const prototype = { Element };\n\n        function match() {\n            return Array.from(document.querySelectorAll(selector)).includes(this);\n        }\n\n        const matches = prototype.matches || prototype.webkitMatchesSelector || prototype.mozMatchesSelector || prototype.msMatchesSelector || match;\n\n        return matches.call(element, selector);\n    },\n\n    // Find all elements\n    getElements(selector) {\n        return this.elements.container.querySelectorAll(selector);\n    },\n\n    // Find a single element\n    getElement(selector) {\n        return this.elements.container.querySelector(selector);\n    },\n\n    // Find the UI controls and store references in custom controls\n    // TODO: Allow settings menus with custom controls\n    findElements() {\n        try {\n            this.elements.controls = utils.getElement.call(this, this.config.selectors.controls.wrapper);\n\n            // Buttons\n            this.elements.buttons = {\n                play: utils.getElements.call(this, this.config.selectors.buttons.play),\n                pause: utils.getElement.call(this, this.config.selectors.buttons.pause),\n                restart: utils.getElement.call(this, this.config.selectors.buttons.restart),\n                rewind: utils.getElement.call(this, this.config.selectors.buttons.rewind),\n                forward: utils.getElement.call(this, this.config.selectors.buttons.forward),\n                mute: utils.getElement.call(this, this.config.selectors.buttons.mute),\n                pip: utils.getElement.call(this, this.config.selectors.buttons.pip),\n                airplay: utils.getElement.call(this, this.config.selectors.buttons.airplay),\n                settings: utils.getElement.call(this, this.config.selectors.buttons.settings),\n                captions: utils.getElement.call(this, this.config.selectors.buttons.captions),\n                fullscreen: utils.getElement.call(this, this.config.selectors.buttons.fullscreen),\n            };\n\n            // Progress\n            this.elements.progress = utils.getElement.call(this, this.config.selectors.progress);\n\n            // Inputs\n            this.elements.inputs = {\n                seek: utils.getElement.call(this, this.config.selectors.inputs.seek),\n                volume: utils.getElement.call(this, this.config.selectors.inputs.volume),\n            };\n\n            // Display\n            this.elements.display = {\n                buffer: utils.getElement.call(this, this.config.selectors.display.buffer),\n                duration: utils.getElement.call(this, this.config.selectors.display.duration),\n                currentTime: utils.getElement.call(this, this.config.selectors.display.currentTime),\n            };\n\n            // Seek tooltip\n            if (utils.is.element(this.elements.progress)) {\n                this.elements.display.seekTooltip = this.elements.progress.querySelector(`.${this.config.classNames.tooltip}`);\n            }\n\n            return true;\n        } catch (error) {\n            // Log it\n            this.debug.warn('It looks like there is a problem with your custom controls HTML', error);\n\n            // Restore native video controls\n            this.toggleNativeControls(true);\n\n            return false;\n        }\n    },\n\n    // Get the focused element\n    getFocusElement() {\n        let focused = document.activeElement;\n\n        if (!focused || focused === document.body) {\n            focused = null;\n        } else {\n            focused = document.querySelector(':focus');\n        }\n\n        return focused;\n    },\n\n    // Trap focus inside container\n    trapFocus() {\n        const focusable = utils.getElements.call(this, 'button:not(:disabled), input:not(:disabled), [tabindex]');\n        const first = focusable[0];\n        const last = focusable[focusable.length - 1];\n\n        utils.on(\n            this.elements.container,\n            'keydown',\n            event => {\n                // Bail if not tab key or not fullscreen\n                if (event.key !== 'Tab' || event.keyCode !== 9 || !this.fullscreen.active) {\n                    return;\n                }\n\n                // Get the current focused element\n                const focused = utils.getFocusElement();\n\n                if (focused === last && !event.shiftKey) {\n                    // Move focus to first element that can be tabbed if Shift isn't used\n                    first.focus();\n                    event.preventDefault();\n                } else if (focused === first && event.shiftKey) {\n                    // Move focus to last element that can be tabbed if Shift is used\n                    last.focus();\n                    event.preventDefault();\n                }\n            },\n            false\n        );\n    },\n\n    // Toggle event listener\n    toggleListener(elements, event, callback, toggle, passive, capture) {\n        // Bail if no elements\n        if (utils.is.nullOrUndefined(elements)) {\n            return;\n        }\n\n        // If a nodelist is passed, call itself on each node\n        if (utils.is.nodeList(elements)) {\n            // Create listener for each node\n            Array.from(elements).forEach(element => {\n                if (element instanceof Node) {\n                    utils.toggleListener.call(null, element, event, callback, toggle, passive, capture);\n                }\n            });\n\n            return;\n        }\n\n        // Allow multiple events\n        const events = event.split(' ');\n\n        // Build options\n        // Default to just capture boolean\n        let options = utils.is.boolean(capture) ? capture : false;\n\n        // If passive events listeners are supported\n        if (support.passiveListeners) {\n            options = {\n                // Whether the listener can be passive (i.e. default never prevented)\n                passive: utils.is.boolean(passive) ? passive : true,\n                // Whether the listener is a capturing listener or not\n                capture: utils.is.boolean(capture) ? capture : false,\n            };\n        }\n\n        // If a single node is passed, bind the event listener\n        events.forEach(type => {\n            elements[toggle ? 'addEventListener' : 'removeEventListener'](type, callback, options);\n        });\n    },\n\n    // Bind event handler\n    on(element, events, callback, passive, capture) {\n        utils.toggleListener(element, events, callback, true, passive, capture);\n    },\n\n    // Unbind event handler\n    off(element, events, callback, passive, capture) {\n        utils.toggleListener(element, events, callback, false, passive, capture);\n    },\n\n    // Trigger event\n    dispatchEvent(element, type, bubbles, detail) {\n        // Bail if no element\n        if (!element || !type) {\n            return;\n        }\n\n        // Create and dispatch the event\n        const event = new CustomEvent(type, {\n            bubbles: utils.is.boolean(bubbles) ? bubbles : false,\n            detail: Object.assign({}, detail, {\n                plyr: this instanceof Plyr ? this : null,\n            }),\n        });\n\n        // Dispatch the event\n        element.dispatchEvent(event);\n    },\n\n    // Toggle aria-pressed state on a toggle button\n    // http://www.ssbbartgroup.com/blog/how-not-to-misuse-aria-states-properties-and-roles\n    toggleState(element, input) {\n        // Bail if no target\n        if (!utils.is.element(element)) {\n            return;\n        }\n\n        // Get state\n        const pressed = element.getAttribute('aria-pressed') === 'true';\n        const state = utils.is.boolean(input) ? input : !pressed;\n\n        // Set the attribute on target\n        element.setAttribute('aria-pressed', state);\n    },\n\n    // Get percentage\n    getPercentage(current, max) {\n        if (current === 0 || max === 0 || Number.isNaN(current) || Number.isNaN(max)) {\n            return 0;\n        }\n        return (current / max * 100).toFixed(2);\n    },\n\n    // Deep extend destination object with N more objects\n    extend(target = {}, ...sources) {\n        if (!sources.length) {\n            return target;\n        }\n\n        const source = sources.shift();\n\n        if (!utils.is.object(source)) {\n            return target;\n        }\n\n        Object.keys(source).forEach(key => {\n            if (utils.is.object(source[key])) {\n                if (!Object.keys(target).includes(key)) {\n                    Object.assign(target, { [key]: {} });\n                }\n\n                utils.extend(target[key], source[key]);\n            } else {\n                Object.assign(target, { [key]: source[key] });\n            }\n        });\n\n        return utils.extend(target, ...sources);\n    },\n\n    // Parse YouTube ID from URL\n    parseYouTubeId(url) {\n        const regex = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n        return url.match(regex) ? RegExp.$2 : url;\n    },\n\n    // Parse Vimeo ID from URL\n    parseVimeoId(url) {\n        if (utils.is.number(Number(url))) {\n            return url;\n        }\n\n        const regex = /^.*(vimeo.com\\/|video\\/)(\\d+).*/;\n        return url.match(regex) ? RegExp.$2 : url;\n    },\n\n    // Convert object to URL parameters\n    buildUrlParameters(input) {\n        if (!utils.is.object(input)) {\n            return '';\n        }\n\n        return Object.keys(input)\n            .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(input[key])}`)\n            .join('&');\n    },\n\n    // Remove HTML from a string\n    stripHTML(source) {\n        const fragment = document.createDocumentFragment();\n        const element = document.createElement('div');\n        fragment.appendChild(element);\n        element.innerHTML = source;\n        return fragment.firstChild.innerText;\n    },\n\n    // Get aspect ratio for dimensions\n    getAspectRatio(width, height) {\n        const getRatio = (w, h) => (h === 0 ? w : getRatio(h, w % h));\n        const ratio = getRatio(width, height);\n        return `${width / ratio}:${height / ratio}`;\n    },\n\n    // Get the transition end event\n    transitionEnd: (() => {\n        const element = document.createElement('span');\n\n        const events = {\n            WebkitTransition: 'webkitTransitionEnd',\n            MozTransition: 'transitionend',\n            OTransition: 'oTransitionEnd otransitionend',\n            transition: 'transitionend',\n        };\n\n        const type = Object.keys(events).find(event => element.style[event] !== undefined);\n\n        return typeof type === 'string' ? type : false;\n    })(),\n\n    // Force repaint of element\n    repaint(element) {\n        window.setTimeout(() => {\n            element.setAttribute('hidden', '');\n            element.offsetHeight; // eslint-disable-line\n            element.removeAttribute('hidden');\n        }, 0);\n    },\n};\n\nexport default utils;\n","// ==========================================================================\n// Plyr support checks\n// ==========================================================================\n\nimport utils from './utils';\n\n// Check for feature support\nconst support = {\n    // Basic support\n    audio: 'canPlayType' in document.createElement('audio'),\n    video: 'canPlayType' in document.createElement('video'),\n\n    // Check for support\n    // Basic functionality vs full UI\n    check(type, provider, inline) {\n        let api = false;\n        let ui = false;\n        const browser = utils.getBrowser();\n        const playsInline = browser.isIPhone && inline && support.inline;\n\n        switch (`${provider}:${type}`) {\n            case 'html5:video':\n                api = support.video;\n                ui = api && support.rangeInput && (!browser.isIPhone || playsInline);\n                break;\n\n            case 'html5:audio':\n                api = support.audio;\n                ui = api && support.rangeInput;\n                break;\n\n            case 'youtube:video':\n                api = true;\n                ui = support.rangeInput && (!browser.isIPhone || playsInline);\n                break;\n\n            case 'vimeo:video':\n                api = true;\n                ui = support.rangeInput && !browser.isIPhone;\n                break;\n\n            default:\n                api = support.audio && support.video;\n                ui = api && support.rangeInput;\n        }\n\n        return {\n            api,\n            ui,\n        };\n    },\n\n    // Picture-in-picture support\n    // Safari only currently\n    pip: (() => {\n        const browser = utils.getBrowser();\n        return !browser.isIPhone && utils.is.function(utils.createElement('video').webkitSetPresentationMode);\n    })(),\n\n    // Airplay support\n    // Safari only currently\n    airplay: utils.is.function(window.WebKitPlaybackTargetAvailabilityEvent),\n\n    // Inline playback support\n    // https://webkit.org/blog/6784/new-video-policies-for-ios/\n    inline: 'playsInline' in document.createElement('video'),\n\n    // Check for mime type support against a player instance\n    // Credits: http://diveintohtml5.info/everything.html\n    // Related: http://www.leanbackplayer.com/test/h5mt.html\n    mime(type) {\n        const { media } = this;\n\n        try {\n            // Bail if no checking function\n            if (!this.isHTML5 || !utils.is.function(media.canPlayType)) {\n                return false;\n            }\n\n            // Type specific checks\n            if (this.isVideo) {\n                switch (type) {\n                    case 'video/webm':\n                        return media.canPlayType('video/webm; codecs=\"vp8, vorbis\"').replace(/no/, '');\n\n                    case 'video/mp4':\n                        return media.canPlayType('video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"').replace(/no/, '');\n\n                    case 'video/ogg':\n                        return media.canPlayType('video/ogg; codecs=\"theora\"').replace(/no/, '');\n\n                    default:\n                        return false;\n                }\n            } else if (this.isAudio) {\n                switch (type) {\n                    case 'audio/mpeg':\n                        return media.canPlayType('audio/mpeg;').replace(/no/, '');\n\n                    case 'audio/ogg':\n                        return media.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/no/, '');\n\n                    case 'audio/wav':\n                        return media.canPlayType('audio/wav; codecs=\"1\"').replace(/no/, '');\n\n                    default:\n                        return false;\n                }\n            }\n        } catch (e) {\n            return false;\n        }\n\n        // If we got this far, we're stuffed\n        return false;\n    },\n\n    // Check for textTracks support\n    textTracks: 'textTracks' in document.createElement('video'),\n\n    // Check for passive event listener support\n    // https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n    // https://www.youtube.com/watch?v=NPM6172J22g\n    passiveListeners: (() => {\n        // Test via a getter in the options object to see if the passive property is accessed\n        let supported = false;\n        try {\n            const options = Object.defineProperty({}, 'passive', {\n                get() {\n                    supported = true;\n                    return null;\n                },\n            });\n            window.addEventListener('test', null, options);\n        } catch (e) {\n            // Do nothing\n        }\n\n        return supported;\n    })(),\n\n    // <input type=\"range\"> Sliders\n    rangeInput: (() => {\n        const range = document.createElement('input');\n        range.type = 'range';\n        return range.type === 'range';\n    })(),\n\n    // Touch\n    // Remember a device can be moust + touch enabled\n    touch: 'ontouchstart' in document.documentElement,\n\n    // Detect transitions support\n    transitions: utils.transitionEnd !== false,\n\n    // Reduced motion iOS & MacOS setting\n    // https://webkit.org/blog/7551/responsive-design-for-motion/\n    reducedMotion: 'matchMedia' in window && window.matchMedia('(prefers-reduced-motion)').matches,\n};\n\nexport default support;\n","// ==========================================================================\n// Console wrapper\n// ==========================================================================\n\nconst noop = () => {};\n\nexport default class Console {\n    constructor(player) {\n        this.enabled = window.console && player.config.debug;\n\n        if (this.enabled) {\n            this.log('Debugging enabled');\n        }\n    }\n\n    get log() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.log, console) : noop;\n    }\n    get warn() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.warn, console) : noop;\n    }\n    get error() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.error, console) : noop;\n    }\n}\n","// ==========================================================================\n// Plyr storage\n// ==========================================================================\n\nimport utils from './utils';\n\nclass Storage {\n    constructor(player) {\n        this.enabled = player.config.storage.enabled;\n        this.key = player.config.storage.key;\n    }\n\n    // Check for actual support (see if we can use it)\n    static get supported() {\n        if (!('localStorage' in window)) {\n            return false;\n        }\n\n        const test = '___test';\n\n        // Try to use it (it might be disabled, e.g. user is in private mode)\n        // see: https://github.com/sampotts/plyr/issues/131\n        try {\n            window.localStorage.setItem(test, test);\n            window.localStorage.removeItem(test);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    get(key) {\n        const store = window.localStorage.getItem(this.key);\n\n        if (!Storage.supported || utils.is.empty(store)) {\n            return null;\n        }\n\n        const json = JSON.parse(store);\n\n        return utils.is.string(key) && key.length ? json[key] : json;\n    }\n\n    set(object) {\n        // Bail if we don't have localStorage support or it's disabled\n        if (!Storage.supported || !this.enabled) {\n            return;\n        }\n\n        // Can only store objectst\n        if (!utils.is.object(object)) {\n            return;\n        }\n\n        // Get current storage\n        const storage = this.get();\n\n        // Update the working copy of the values\n        utils.extend(storage, object);\n\n        // Update storage\n        window.localStorage.setItem(this.key, JSON.stringify(storage));\n    }\n}\n\nexport default Storage;\n","// ==========================================================================\n// Plyr fullscreen API\n// ==========================================================================\n\nimport utils from './utils';\n\n// Determine the prefix\nconst prefix = (() => {\n    let value = false;\n\n    if (utils.is.function(document.cancelFullScreen)) {\n        value = '';\n    } else {\n        // Check for fullscreen support by vendor prefix\n        [\n            'webkit',\n            'o',\n            'moz',\n            'ms',\n            'khtml',\n        ].some(pre => {\n            if (utils.is.function(document[`${pre}CancelFullScreen`])) {\n                value = pre;\n                return true;\n            } else if (utils.is.function(document.msExitFullscreen) && document.msFullscreenEnabled) {\n                // Special case for MS (when isn't it?)\n                value = 'ms';\n                return true;\n            }\n\n            return false;\n        });\n    }\n\n    return value;\n})();\n\n// Fullscreen API\nconst fullscreen = {\n    // Get the prefix\n    prefix,\n\n    // Check if we can use it\n    enabled: document.fullscreenEnabled || document.webkitFullscreenEnabled || document.mozFullScreenEnabled || document.msFullscreenEnabled,\n\n    // Yet again Microsoft awesomeness,\n    // Sometimes the prefix is 'ms', sometimes 'MS' to keep you on your toes\n    eventType: prefix === 'ms' ? 'MSFullscreenChange' : `${prefix}fullscreenchange`,\n\n    // Is an element fullscreen\n    isFullScreen(element) {\n        if (!fullscreen.enabled) {\n            return false;\n        }\n\n        const target = utils.is.nullOrUndefined(element) ? document.body : element;\n\n        switch (prefix) {\n            case '':\n                return document.fullscreenElement === target;\n\n            case 'moz':\n                return document.mozFullScreenElement === target;\n\n            default:\n                return document[`${prefix}FullscreenElement`] === target;\n        }\n    },\n\n    // Make an element fullscreen\n    requestFullScreen(element) {\n        if (!fullscreen.enabled) {\n            return false;\n        }\n\n        const target = utils.is.nullOrUndefined(element) ? document.body : element;\n\n        return !prefix.length ? target.requestFullScreen() : target[prefix + (prefix === 'ms' ? 'RequestFullscreen' : 'RequestFullScreen')]();\n    },\n\n    // Bail from fullscreen\n    cancelFullScreen() {\n        if (!fullscreen.enabled) {\n            return false;\n        }\n\n        return !prefix.length ? document.cancelFullScreen() : document[prefix + (prefix === 'ms' ? 'ExitFullscreen' : 'CancelFullScreen')]();\n    },\n\n    // Get the current element\n    element() {\n        if (!fullscreen.enabled) {\n            return null;\n        }\n\n        return !prefix.length ? document.fullscreenElement : document[`${prefix}FullscreenElement`];\n    },\n\n    // Setup fullscreen\n    setup() {\n        if (!this.supported.ui || this.isAudio || !this.config.fullscreen.enabled) {\n            return;\n        }\n\n        // Check for native support\n        const nativeSupport = fullscreen.enabled;\n\n        if (nativeSupport || (this.config.fullscreen.fallback && !utils.inFrame())) {\n            this.debug.log(`${nativeSupport ? 'Native' : 'Fallback'} fullscreen enabled`);\n\n            // Add styling hook to show button\n            utils.toggleClass(this.elements.container, this.config.classNames.fullscreen.enabled, true);\n        } else {\n            this.debug.log('Fullscreen not supported and fallback disabled');\n        }\n\n        // Toggle state\n        if (this.elements.buttons && this.elements.buttons.fullscreen) {\n            utils.toggleState(this.elements.buttons.fullscreen, false);\n        }\n\n        // Trap focus in container\n        utils.trapFocus.call(this);\n    },\n};\n\nexport default fullscreen;\n","// ==========================================================================\n// Plyr Event Listeners\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport controls from './controls';\nimport fullscreen from './fullscreen';\nimport ui from './ui';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nconst listeners = {\n    // Global listeners\n    global() {\n        let last = null;\n\n        // Get the key code for an event\n        const getKeyCode = event => (event.keyCode ? event.keyCode : event.which);\n\n        // Handle key press\n        const handleKey = event => {\n            const code = getKeyCode(event);\n            const pressed = event.type === 'keydown';\n            const repeat = pressed && code === last;\n\n            // Bail if a modifier key is set\n            if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\n                return;\n            }\n\n            // If the event is bubbled from the media element\n            // Firefox doesn't get the keycode for whatever reason\n            if (!utils.is.number(code)) {\n                return;\n            }\n\n            // Seek by the number keys\n            const seekByKey = () => {\n                // Divide the max duration into 10th's and times by the number value\n                this.currentTime = this.duration / 10 * (code - 48);\n            };\n\n            // Handle the key on keydown\n            // Reset on keyup\n            if (pressed) {\n                // Which keycodes should we prevent default\n                const preventDefault = [\n                    48,\n                    49,\n                    50,\n                    51,\n                    52,\n                    53,\n                    54,\n                    56,\n                    57,\n                    32,\n                    75,\n                    38,\n                    40,\n                    77,\n                    39,\n                    37,\n                    70,\n                    67,\n                    73,\n                    76,\n                    79,\n                ];\n\n                // Check focused element\n                // and if the focused element is not editable (e.g. text input)\n                // and any that accept key input http://webaim.org/techniques/keyboard/\n                const focused = utils.getFocusElement();\n                if (utils.is.element(focused) && utils.matches(focused, this.config.selectors.editable)) {\n                    return;\n                }\n\n                // If the code is found prevent default (e.g. prevent scrolling for arrows)\n                if (preventDefault.includes(code)) {\n                    event.preventDefault();\n                    event.stopPropagation();\n                }\n\n                switch (code) {\n                    case 48:\n                    case 49:\n                    case 50:\n                    case 51:\n                    case 52:\n                    case 53:\n                    case 54:\n                    case 55:\n                    case 56:\n                    case 57:\n                        // 0-9\n                        if (!repeat) {\n                            seekByKey();\n                        }\n                        break;\n\n                    case 32:\n                    case 75:\n                        // Space and K key\n                        if (!repeat) {\n                            this.togglePlay();\n                        }\n                        break;\n\n                    case 38:\n                        // Arrow up\n                        this.increaseVolume(0.1);\n                        break;\n\n                    case 40:\n                        // Arrow down\n                        this.decreaseVolume(0.1);\n                        break;\n\n                    case 77:\n                        // M key\n                        if (!repeat) {\n                            this.muted = !this.muted;\n                        }\n                        break;\n\n                    case 39:\n                        // Arrow forward\n                        this.forward();\n                        break;\n\n                    case 37:\n                        // Arrow back\n                        this.rewind();\n                        break;\n\n                    case 70:\n                        // F key\n                        this.toggleFullscreen();\n                        break;\n\n                    case 67:\n                        // C key\n                        if (!repeat) {\n                            this.toggleCaptions();\n                        }\n                        break;\n\n                    case 76:\n                        // L key\n                        this.loop = !this.loop;\n                        break;\n\n                    /* case 73:\n                        this.setLoop('start');\n                        break;\n\n                    case 76:\n                        this.setLoop();\n                        break;\n\n                    case 79:\n                        this.setLoop('end');\n                        break; */\n\n                    default:\n                        break;\n                }\n\n                // Escape is handle natively when in full screen\n                // So we only need to worry about non native\n                if (!fullscreen.enabled && this.fullscreen.active && code === 27) {\n                    this.toggleFullscreen();\n                }\n\n                // Store last code for next cycle\n                last = code;\n            } else {\n                last = null;\n            }\n        };\n\n        // Keyboard shortcuts\n        if (this.config.keyboard.global) {\n            utils.on(window, 'keydown keyup', handleKey, false);\n        } else if (this.config.keyboard.focused) {\n            utils.on(this.elements.container, 'keydown keyup', handleKey, false);\n        }\n\n        // Detect tab focus\n        // Remove class on blur/focusout\n        utils.on(this.elements.container, 'focusout', event => {\n            utils.toggleClass(event.target, this.config.classNames.tabFocus, false);\n        });\n\n        // Add classname to tabbed elements\n        utils.on(this.elements.container, 'keydown', event => {\n            if (event.keyCode !== 9) {\n                return;\n            }\n\n            // Delay the adding of classname until the focus has changed\n            // This event fires before the focusin event\n            window.setTimeout(() => {\n                utils.toggleClass(utils.getFocusElement(), this.config.classNames.tabFocus, true);\n            }, 0);\n        });\n\n        // Toggle controls visibility based on mouse movement\n        if (this.config.hideControls) {\n            // Toggle controls on mouse events and entering fullscreen\n            utils.on(this.elements.container, 'mouseenter mouseleave mousemove touchstart touchend touchmove enterfullscreen exitfullscreen', event => {\n                this.toggleControls(event);\n            });\n        }\n\n        // Handle user exiting fullscreen by escaping etc\n        if (fullscreen.enabled) {\n            utils.on(document, fullscreen.eventType, event => {\n                this.toggleFullscreen(event);\n            });\n        }\n    },\n\n    // Listen for media events\n    media() {\n        // Time change on media\n        utils.on(this.media, 'timeupdate seeking', event => ui.timeUpdate.call(this, event));\n\n        // Display duration\n        utils.on(this.media, 'durationchange loadedmetadata', event => ui.durationUpdate.call(this, event));\n\n        // Check for audio tracks on load\n        // We can't use `loadedmetadata` as it doesn't seem to have audio tracks at that point\n        utils.on(this.media, 'loadeddata', () => {\n            utils.toggleHidden(this.elements.volume, !this.hasAudio);\n            utils.toggleHidden(this.elements.buttons.mute, !this.hasAudio);\n        });\n\n        // Handle the media finishing\n        utils.on(this.media, 'ended', () => {\n            // Show poster on end\n            if (this.isHTML5 && this.isVideo && this.config.showPosterOnEnd) {\n                // Restart\n                this.restart();\n\n                // Re-load media\n                this.media.load();\n            }\n        });\n\n        // Check for buffer progress\n        utils.on(this.media, 'progress playing', event => ui.updateProgress.call(this, event));\n\n        // Handle native mute\n        utils.on(this.media, 'volumechange', event => ui.updateVolume.call(this, event));\n\n        // Handle native play/pause\n        utils.on(this.media, 'playing play pause ended', event => ui.checkPlaying.call(this, event));\n\n        // Loading\n        utils.on(this.media, 'stalled waiting canplay seeked playing', event => ui.checkLoading.call(this, event));\n\n        // Click video\n        if (this.supported.ui && this.config.clickToPlay && !this.isAudio) {\n            // Re-fetch the wrapper\n            const wrapper = utils.getElement.call(this, `.${this.config.classNames.video}`);\n\n            // Bail if there's no wrapper (this should never happen)\n            if (!utils.is.element(wrapper)) {\n                return;\n            }\n\n            // On click play, pause ore restart\n            utils.on(wrapper, 'click', () => {\n                // Touch devices will just show controls (if we're hiding controls)\n                if (this.config.hideControls && support.touch && !this.paused) {\n                    return;\n                }\n\n                if (this.paused) {\n                    this.play();\n                } else if (this.ended) {\n                    this.restart();\n                    this.play();\n                } else {\n                    this.pause();\n                }\n            });\n        }\n\n        // Disable right click\n        if (this.supported.ui && this.config.disableContextMenu) {\n            utils.on(\n                this.media,\n                'contextmenu',\n                event => {\n                    event.preventDefault();\n                },\n                false\n            );\n        }\n\n        // Volume change\n        utils.on(this.media, 'volumechange', () => {\n            // Save to storage\n            this.storage.set({ volume: this.volume, muted: this.muted });\n        });\n\n        // Speed change\n        utils.on(this.media, 'ratechange', () => {\n            // Update UI\n            controls.updateSetting.call(this, 'speed');\n\n            // Save to storage\n            this.storage.set({ speed: this.speed });\n        });\n\n        // Quality change\n        utils.on(this.media, 'qualitychange', () => {\n            // Update UI\n            controls.updateSetting.call(this, 'quality');\n\n            // Save to storage\n            this.storage.set({ quality: this.quality });\n        });\n\n        // Caption language change\n        utils.on(this.media, 'languagechange', () => {\n            // Update UI\n            controls.updateSetting.call(this, 'captions');\n\n            // Save to storage\n            this.storage.set({ language: this.language });\n        });\n\n        // Captions toggle\n        utils.on(this.media, 'captionsenabled captionsdisabled', () => {\n            // Update UI\n            controls.updateSetting.call(this, 'captions');\n\n            // Save to storage\n            this.storage.set({ captions: this.captions.active });\n        });\n\n        // Proxy events to container\n        // Bubble up key events for Edge\n        utils.on(this.media, this.config.events.concat([\n            'keyup',\n            'keydown',\n        ]).join(' '), event => {\n            let detail = {};\n\n            // Get error details from media\n            if (event.type === 'error') {\n                detail = this.media.error;\n            }\n\n            utils.dispatchEvent.call(this, this.elements.container, event.type, true, detail);\n        });\n    },\n\n    // Listen for control events\n    controls() {\n        // IE doesn't support input event, so we fallback to change\n        const inputEvent = browser.isIE ? 'change' : 'input';\n\n        // Trigger custom and default handlers\n        const proxy = (event, handlerKey, defaultHandler) => {\n            const customHandler = this.config.listeners[handlerKey];\n\n            // Execute custom handler\n            if (utils.is.function(customHandler)) {\n                customHandler.call(this, event);\n            }\n\n            // Only call default handler if not prevented in custom handler\n            if (!event.defaultPrevented && utils.is.function(defaultHandler)) {\n                defaultHandler.call(this, event);\n            }\n        };\n\n        // Play/pause toggle\n        utils.on(this.elements.buttons.play, 'click', event =>\n            proxy(event, 'play', () => {\n                this.togglePlay();\n            })\n        );\n\n        // Pause\n        utils.on(this.elements.buttons.restart, 'click', event =>\n            proxy(event, 'restart', () => {\n                this.restart();\n            })\n        );\n\n        // Rewind\n        utils.on(this.elements.buttons.rewind, 'click', event =>\n            proxy(event, 'rewind', () => {\n                this.rewind();\n            })\n        );\n\n        // Rewind\n        utils.on(this.elements.buttons.forward, 'click', event =>\n            proxy(event, 'forward', () => {\n                this.forward();\n            })\n        );\n\n        // Mute toggle\n        utils.on(this.elements.buttons.mute, 'click', event =>\n            proxy(event, 'mute', () => {\n                this.muted = !this.muted;\n            })\n        );\n\n        // Captions toggle\n        utils.on(this.elements.buttons.captions, 'click', event =>\n            proxy(event, 'captions', () => {\n                this.toggleCaptions();\n            })\n        );\n\n        // Fullscreen toggle\n        utils.on(this.elements.buttons.fullscreen, 'click', event =>\n            proxy(event, 'fullscreen', () => {\n                this.toggleFullscreen();\n            })\n        );\n\n        // Picture-in-Picture\n        utils.on(this.elements.buttons.pip, 'click', event =>\n            proxy(event, 'pip', () => {\n                this.pip = 'toggle';\n            })\n        );\n\n        // Airplay\n        utils.on(this.elements.buttons.airplay, 'click', event =>\n            proxy(event, 'airplay', () => {\n                this.airplay();\n            })\n        );\n\n        // Settings menu\n        utils.on(this.elements.buttons.settings, 'click', event => {\n            controls.toggleMenu.call(this, event);\n        });\n\n        // Click anywhere closes menu\n        utils.on(document.documentElement, 'click', event => {\n            controls.toggleMenu.call(this, event);\n        });\n\n        // Settings menu\n        utils.on(this.elements.settings.form, 'click', event => {\n            event.stopPropagation();\n\n            // Settings menu items - use event delegation as items are added/removed\n            if (utils.matches(event.target, this.config.selectors.inputs.language)) {\n                proxy(event, 'language', () => {\n                    this.language = event.target.value;\n                });\n            } else if (utils.matches(event.target, this.config.selectors.inputs.quality)) {\n                proxy(event, 'quality', () => {\n                    this.quality = event.target.value;\n                });\n            } else if (utils.matches(event.target, this.config.selectors.inputs.speed)) {\n                proxy(event, 'speed', () => {\n                    this.speed = parseFloat(event.target.value);\n                });\n            } else {\n                controls.showTab.call(this, event);\n            }\n        });\n\n        // Seek\n        utils.on(this.elements.inputs.seek, inputEvent, event =>\n            proxy(event, 'seek', () => {\n                this.currentTime = event.target.value / event.target.max * this.duration;\n            })\n        );\n\n        // Current time invert\n        // Only if one time element is used for both currentTime and duration\n        if (this.config.toggleInvert && !utils.is.element(this.elements.display.duration)) {\n            utils.on(this.elements.display.currentTime, 'click', () => {\n                // Do nothing if we're at the start\n                if (this.currentTime === 0) {\n                    return;\n                }\n\n                this.config.invertTime = !this.config.invertTime;\n                ui.timeUpdate.call(this);\n            });\n        }\n\n        // Volume\n        utils.on(this.elements.inputs.volume, inputEvent, event =>\n            proxy(event, 'volume', () => {\n                this.volume = event.target.value;\n            })\n        );\n\n        // Polyfill for lower fill in <input type=\"range\"> for webkit\n        if (browser.isWebkit) {\n            utils.on(utils.getElements.call(this, 'input[type=\"range\"]'), 'input', event => {\n                controls.updateRangeFill.call(this, event.target);\n            });\n        }\n\n        // Seek tooltip\n        utils.on(this.elements.progress, 'mouseenter mouseleave mousemove', event => controls.updateSeekTooltip.call(this, event));\n\n        // Toggle controls visibility based on mouse movement\n        if (this.config.hideControls) {\n            // Watch for cursor over controls so they don't hide when trying to interact\n            utils.on(this.elements.controls, 'mouseenter mouseleave', event => {\n                this.elements.controls.hover = event.type === 'mouseenter';\n            });\n\n            // Watch for cursor over controls so they don't hide when trying to interact\n            utils.on(this.elements.controls, 'mousedown mouseup touchstart touchend touchcancel', event => {\n                this.elements.controls.pressed = [\n                    'mousedown',\n                    'touchstart',\n                ].includes(event.type);\n            });\n\n            // Focus in/out on controls\n            utils.on(this.elements.controls, 'focusin focusout', event => {\n                this.toggleControls(event);\n            });\n        }\n\n        // Mouse wheel for volume\n        utils.on(\n            this.elements.inputs.volume,\n            'wheel',\n            event =>\n                proxy(event, 'volume', () => {\n                    // Detect \"natural\" scroll - suppored on OS X Safari only\n                    // Other browsers on OS X will be inverted until support improves\n                    const inverted = event.webkitDirectionInvertedFromDevice;\n                    const step = 1 / 50;\n                    let direction = 0;\n\n                    // Scroll down (or up on natural) to decrease\n                    if (event.deltaY < 0 || event.deltaX > 0) {\n                        if (inverted) {\n                            this.decreaseVolume(step);\n                            direction = -1;\n                        } else {\n                            this.increaseVolume(step);\n                            direction = 1;\n                        }\n                    }\n\n                    // Scroll up (or down on natural) to increase\n                    if (event.deltaY > 0 || event.deltaX < 0) {\n                        if (inverted) {\n                            this.increaseVolume(step);\n                            direction = 1;\n                        } else {\n                            this.decreaseVolume(step);\n                            direction = -1;\n                        }\n                    }\n\n                    // Don't break page scrolling at max and min\n                    if ((direction === 1 && this.media.volume < 1) || (direction === -1 && this.media.volume > 0)) {\n                        event.preventDefault();\n                    }\n                }),\n            false\n        );\n    },\n};\n\nexport default listeners;\n","// ==========================================================================\n// Plyr UI\n// ==========================================================================\n\nimport utils from './utils';\nimport captions from './captions';\nimport controls from './controls';\nimport fullscreen from './fullscreen';\nimport listeners from './listeners';\n\nconst ui = {\n    addStyleHook() {\n        utils.toggleClass(this.elements.container, this.config.selectors.container.replace('.', ''), true);\n        utils.toggleClass(this.elements.container, this.config.classNames.uiSupported, this.supported.ui);\n    },\n\n    // Toggle native HTML5 media controls\n    toggleNativeControls(toggle = false) {\n        if (toggle && this.isHTML5) {\n            this.media.setAttribute('controls', '');\n        } else {\n            this.media.removeAttribute('controls');\n        }\n    },\n\n    // Setup the UI\n    build() {\n        // Re-attach media element listeners\n        // TODO: Use event bubbling\n        listeners.media.call(this);\n\n        // Don't setup interface if no support\n        if (!this.supported.ui) {\n            this.debug.warn(`Basic support only for ${this.provider} ${this.type}`);\n\n            // Remove controls\n            utils.removeElement.call(this, 'controls');\n\n            // Remove large play\n            utils.removeElement.call(this, 'buttons.play');\n\n            // Restore native controls\n            ui.toggleNativeControls.call(this, true);\n\n            // Bail\n            return;\n        }\n\n        // Inject custom controls if not present\n        if (!utils.is.element(this.elements.controls)) {\n            // Inject custom controls\n            controls.inject.call(this);\n\n            // Re-attach control listeners\n            listeners.controls.call(this);\n        }\n\n        // If there's no controls, bail\n        if (!utils.is.element(this.elements.controls)) {\n            return;\n        }\n\n        // Remove native controls\n        ui.toggleNativeControls.call(this);\n\n        // Setup fullscreen\n        fullscreen.setup.call(this);\n\n        // Captions\n        captions.setup.call(this);\n\n        // Reset volume\n        this.volume = null;\n\n        // Reset mute state\n        this.muted = null;\n\n        // Reset speed\n        this.speed = null;\n\n        // Reset loop state\n        this.loop = null;\n\n        // Reset quality options\n        this.options.quality = [];\n\n        // Reset time display\n        ui.timeUpdate.call(this);\n\n        // Update the UI\n        ui.checkPlaying.call(this);\n\n        // Ready for API calls\n        this.ready = true;\n\n        // Ready event at end of execution stack\n        utils.dispatchEvent.call(this, this.media, 'ready');\n\n        // Set the title\n        ui.setTitle.call(this);\n    },\n\n    // Setup aria attribute for play and iframe title\n    setTitle() {\n        // Find the current text\n        let label = this.config.i18n.play;\n\n        // If there's a media title set, use that for the label\n        if (utils.is.string(this.config.title) && !utils.is.empty(this.config.title)) {\n            label += `, ${this.config.title}`;\n\n            // Set container label\n            this.elements.container.setAttribute('aria-label', this.config.title);\n        }\n\n        // If there's a play button, set label\n        if (utils.is.nodeList(this.elements.buttons.play)) {\n            Array.from(this.elements.buttons.play).forEach(button => {\n                button.setAttribute('aria-label', label);\n            });\n        }\n\n        // Set iframe title\n        // https://github.com/sampotts/plyr/issues/124\n        if (this.isEmbed) {\n            const iframe = utils.getElement.call(this, 'iframe');\n\n            if (!utils.is.element(iframe)) {\n                return;\n            }\n\n            // Default to media type\n            const title = !utils.is.empty(this.config.title) ? this.config.title : 'video';\n\n            iframe.setAttribute('title', this.config.i18n.frameTitle.replace('{title}', title));\n        }\n    },\n\n    // Check playing state\n    checkPlaying() {\n        // Class hooks\n        utils.toggleClass(this.elements.container, this.config.classNames.playing, this.playing);\n        utils.toggleClass(this.elements.container, this.config.classNames.stopped, this.paused);\n\n        // Set aria state\n        if (utils.is.nodeList(this.elements.buttons.play)) {\n            Array.from(this.elements.buttons.play).forEach(button => utils.toggleState(button, this.playing));\n        }\n\n        // Toggle controls\n        this.toggleControls(!this.playing);\n    },\n\n    // Check if media is loading\n    checkLoading(event) {\n        this.loading = [\n            'stalled',\n            'waiting',\n        ].includes(event.type);\n\n        // Clear timer\n        clearTimeout(this.timers.loading);\n\n        // Timer to prevent flicker when seeking\n        this.timers.loading = setTimeout(() => {\n            // Toggle container class hook\n            utils.toggleClass(this.elements.container, this.config.classNames.loading, this.loading);\n\n            // Show controls if loading, hide if done\n            this.toggleControls(this.loading);\n        }, this.loading ? 250 : 0);\n    },\n\n    // Update volume UI and storage\n    updateVolume() {\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // Update range\n        if (utils.is.element(this.elements.inputs.volume)) {\n            ui.setRange.call(this, this.elements.inputs.volume, this.muted ? 0 : this.volume);\n        }\n\n        // Update mute state\n        if (utils.is.element(this.elements.buttons.mute)) {\n            utils.toggleState(this.elements.buttons.mute, this.muted || this.volume === 0);\n        }\n    },\n\n    // Update seek value and lower fill\n    setRange(target, value = 0) {\n        if (!utils.is.element(target)) {\n            return;\n        }\n\n        // eslint-disable-next-line\n        target.value = value;\n\n        // Webkit range fill\n        controls.updateRangeFill.call(this, target);\n    },\n\n    // Set <progress> value\n    setProgress(target, input) {\n        const value = utils.is.number(input) ? input : 0;\n        const progress = utils.is.element(target) ? target : this.elements.display.buffer;\n\n        // Update value and label\n        if (utils.is.element(progress)) {\n            progress.value = value;\n\n            // Update text label inside\n            const label = progress.getElementsByTagName('span')[0];\n            if (utils.is.element(label)) {\n                label.childNodes[0].nodeValue = value;\n            }\n        }\n    },\n\n    // Update <progress> elements\n    updateProgress(event) {\n        if (!this.supported.ui || !utils.is.event(event)) {\n            return;\n        }\n\n        let value = 0;\n\n        if (event) {\n            switch (event.type) {\n                // Video playing\n                case 'timeupdate':\n                case 'seeking':\n                    value = utils.getPercentage(this.currentTime, this.duration);\n\n                    // Set seek range value only if it's a 'natural' time event\n                    if (event.type === 'timeupdate') {\n                        ui.setRange.call(this, this.elements.inputs.seek, value);\n                    }\n\n                    break;\n\n                // Check buffer status\n                case 'playing':\n                case 'progress':\n                    value = (() => {\n                        const { buffered } = this.media;\n\n                        if (buffered && buffered.length) {\n                            // HTML5\n                            return utils.getPercentage(buffered.end(0), this.duration);\n                        } else if (utils.is.number(buffered)) {\n                            // YouTube returns between 0 and 1\n                            return buffered * 100;\n                        }\n\n                        return 0;\n                    })();\n\n                    ui.setProgress.call(this, this.elements.display.buffer, value);\n\n                    break;\n\n                default:\n                    break;\n            }\n        }\n    },\n\n    // Update the displayed time\n    updateTimeDisplay(target = null, time = 0, inverted = false) {\n        // Bail if there's no element to display or the value isn't a number\n        if (!utils.is.element(target) || !utils.is.number(time)) {\n            return;\n        }\n\n        // Format time component to add leading zero\n        const format = value => `0${value}`.slice(-2);\n\n        // Helpers\n        const getHours = value => parseInt((value / 60 / 60) % 60, 10);\n        const getMinutes = value => parseInt((value / 60) % 60, 10);\n        const getSeconds = value => parseInt(value % 60, 10);\n\n        // Breakdown to hours, mins, secs\n        let hours = getHours(time);\n        const mins = getMinutes(time);\n        const secs = getSeconds(time);\n\n        // Do we need to display hours?\n        if (getHours(this.duration) > 0) {\n            hours = `${hours}:`;\n        } else {\n            hours = '';\n        }\n\n        // Render\n        // eslint-disable-next-line no-param-reassign\n        target.textContent = `${inverted ? '-' : ''}${hours}${format(mins)}:${format(secs)}`;\n    },\n\n    // Handle time change event\n    timeUpdate(event) {\n        // Only invert if only one time element is displayed and used for both duration and currentTime\n        const invert = !utils.is.element(this.elements.display.duration) && this.config.invertTime;\n\n        // Duration\n        ui.updateTimeDisplay.call(this, this.elements.display.currentTime, invert ? this.duration - this.currentTime : this.currentTime, invert);\n\n        // Ignore updates while seeking\n        if (event && event.type === 'timeupdate' && this.media.seeking) {\n            return;\n        }\n\n        // Playing progress\n        ui.updateProgress.call(this, event);\n    },\n\n    // Show the duration on metadataloaded\n    durationUpdate() {\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // If there's only one time display, display duration there\n        if (!utils.is.element(this.elements.display.duration) && this.config.displayDuration && this.paused) {\n            ui.updateTimeDisplay.call(this, this.elements.display.currentTime, this.duration);\n        }\n\n        // If there's a duration element, update content\n        if (utils.is.element(this.elements.display.duration)) {\n            ui.updateTimeDisplay.call(this, this.elements.display.duration, this.duration);\n        }\n\n        // Update the tooltip (if visible)\n        controls.updateSeekTooltip.call(this);\n    },\n};\n\nexport default ui;\n","// ==========================================================================\n// Plyr controls\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport ui from './ui';\nimport captions from './captions';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nconst controls = {\n    // Webkit polyfill for lower fill range\n    updateRangeFill(target) {\n        // WebKit only\n        if (!browser.isWebkit) {\n            return;\n        }\n\n        // Get range from event if event passed\n        const range = utils.is.event(target) ? target.target : target;\n\n        // Needs to be a valid <input type='range'>\n        if (!utils.is.element(range) || range.getAttribute('type') !== 'range') {\n            return;\n        }\n\n        // Inject the stylesheet if needed\n        if (!utils.is.element(this.elements.styleSheet)) {\n            this.elements.styleSheet = utils.createElement('style');\n            this.elements.container.appendChild(this.elements.styleSheet);\n        }\n\n        const styleSheet = this.elements.styleSheet.sheet;\n        const percentage = range.value / range.max * 100;\n        const selector = `#${range.id}::-webkit-slider-runnable-track`;\n        const styles = `{ background-image: linear-gradient(to right, currentColor ${percentage}%, transparent ${percentage}%) }`;\n\n        // Find old rule if it exists\n        const index = Array.from(styleSheet.rules).findIndex(rule => rule.selectorText === selector);\n\n        // Remove old rule\n        if (index !== -1) {\n            styleSheet.deleteRule(index);\n        }\n\n        // Insert new one\n        styleSheet.insertRule([\n            selector,\n            styles,\n        ].join(' '));\n    },\n\n    // Get icon URL\n    getIconUrl() {\n        return {\n            url: this.config.iconUrl,\n            absolute: this.config.iconUrl.indexOf('http') === 0 || (browser.isIE && !window.svg4everybody),\n        };\n    },\n\n    // Create <svg> icon\n    createIcon(type, attributes) {\n        const namespace = 'http://www.w3.org/2000/svg';\n        const iconUrl = controls.getIconUrl.call(this);\n        const iconPath = `${!iconUrl.absolute ? iconUrl.url : ''}#${this.config.iconPrefix}`;\n\n        // Create <svg>\n        const icon = document.createElementNS(namespace, 'svg');\n        utils.setAttributes(\n            icon,\n            utils.extend(attributes, {\n                role: 'presentation',\n            })\n        );\n\n        // Create the <use> to reference sprite\n        const use = document.createElementNS(namespace, 'use');\n        const path = `${iconPath}-${type}`;\n\n        // Set `href` attributes\n        // https://github.com/sampotts/plyr/issues/460\n        // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/xlink:href\n        if ('href' in use) {\n            use.setAttributeNS('http://www.w3.org/1999/xlink', 'href', path);\n        } else {\n            use.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', path);\n        }\n\n        // Add <use> to <svg>\n        icon.appendChild(use);\n\n        return icon;\n    },\n\n    // Create hidden text label\n    createLabel(type, attr) {\n        let text = this.config.i18n[type];\n        const attributes = Object.assign({}, attr);\n\n        switch (type) {\n            case 'pip':\n                text = 'PIP';\n                break;\n\n            case 'airplay':\n                text = 'AirPlay';\n                break;\n\n            default:\n                break;\n        }\n\n        if ('class' in attributes) {\n            attributes.class += ` ${this.config.classNames.hidden}`;\n        } else {\n            attributes.class = this.config.classNames.hidden;\n        }\n\n        return utils.createElement('span', attributes, text);\n    },\n\n    // Create a badge\n    createBadge(text) {\n        if (utils.is.empty(text)) {\n            return null;\n        }\n\n        const badge = utils.createElement('span', {\n            class: this.config.classNames.menu.value,\n        });\n\n        badge.appendChild(\n            utils.createElement(\n                'span',\n                {\n                    class: this.config.classNames.menu.badge,\n                },\n                text\n            )\n        );\n\n        return badge;\n    },\n\n    // Create a <button>\n    createButton(buttonType, attr) {\n        const button = utils.createElement('button');\n        const attributes = Object.assign({}, attr);\n        let type = buttonType;\n\n        let toggle = false;\n        let label;\n        let icon;\n        let labelPressed;\n        let iconPressed;\n\n        if (!('type' in attributes)) {\n            attributes.type = 'button';\n        }\n\n        if ('class' in attributes) {\n            if (attributes.class.includes(this.config.classNames.control)) {\n                attributes.class += ` ${this.config.classNames.control}`;\n            }\n        } else {\n            attributes.class = this.config.classNames.control;\n        }\n\n        // Large play button\n        switch (type) {\n            case 'play':\n                toggle = true;\n                label = 'play';\n                labelPressed = 'pause';\n                icon = 'play';\n                iconPressed = 'pause';\n                break;\n\n            case 'mute':\n                toggle = true;\n                label = 'mute';\n                labelPressed = 'unmute';\n                icon = 'volume';\n                iconPressed = 'muted';\n                break;\n\n            case 'captions':\n                toggle = true;\n                label = 'enableCaptions';\n                labelPressed = 'disableCaptions';\n                icon = 'captions-off';\n                iconPressed = 'captions-on';\n                break;\n\n            case 'fullscreen':\n                toggle = true;\n                label = 'enterFullscreen';\n                labelPressed = 'exitFullscreen';\n                icon = 'enter-fullscreen';\n                iconPressed = 'exit-fullscreen';\n                break;\n\n            case 'play-large':\n                attributes.class += ` ${this.config.classNames.control}--overlaid`;\n                type = 'play';\n                label = 'play';\n                icon = 'play';\n                break;\n\n            default:\n                label = type;\n                icon = type;\n        }\n\n        // Setup toggle icon and labels\n        if (toggle) {\n            // Icon\n            button.appendChild(controls.createIcon.call(this, iconPressed, { class: 'icon--pressed' }));\n            button.appendChild(controls.createIcon.call(this, icon, { class: 'icon--not-pressed' }));\n\n            // Label/Tooltip\n            button.appendChild(controls.createLabel.call(this, labelPressed, { class: 'label--pressed' }));\n            button.appendChild(controls.createLabel.call(this, label, { class: 'label--not-pressed' }));\n\n            // Add aria attributes\n            attributes['aria-pressed'] = false;\n            attributes['aria-label'] = this.config.i18n[label];\n        } else {\n            button.appendChild(controls.createIcon.call(this, icon));\n            button.appendChild(controls.createLabel.call(this, label));\n        }\n\n        // Merge attributes\n        utils.extend(attributes, utils.getAttributesFromSelector(this.config.selectors.buttons[type], attributes));\n\n        utils.setAttributes(button, attributes);\n\n        this.elements.buttons[type] = button;\n\n        return button;\n    },\n\n    // Create an <input type='range'>\n    createRange(type, attributes) {\n        // Seek label\n        const label = utils.createElement(\n            'label',\n            {\n                for: attributes.id,\n                class: this.config.classNames.hidden,\n            },\n            this.config.i18n[type]\n        );\n\n        // Seek input\n        const input = utils.createElement(\n            'input',\n            utils.extend(\n                utils.getAttributesFromSelector(this.config.selectors.inputs[type]),\n                {\n                    type: 'range',\n                    min: 0,\n                    max: 100,\n                    step: 0.01,\n                    value: 0,\n                    autocomplete: 'off',\n                },\n                attributes\n            )\n        );\n\n        this.elements.inputs[type] = input;\n\n        // Set the fill for webkit now\n        controls.updateRangeFill.call(this, input);\n\n        return {\n            label,\n            input,\n        };\n    },\n\n    // Create a <progress>\n    createProgress(type, attributes) {\n        const progress = utils.createElement(\n            'progress',\n            utils.extend(\n                utils.getAttributesFromSelector(this.config.selectors.display[type]),\n                {\n                    min: 0,\n                    max: 100,\n                    value: 0,\n                },\n                attributes\n            )\n        );\n\n        // Create the label inside\n        if (type !== 'volume') {\n            progress.appendChild(utils.createElement('span', null, '0'));\n\n            let suffix = '';\n            switch (type) {\n                case 'played':\n                    suffix = this.config.i18n.played;\n                    break;\n\n                case 'buffer':\n                    suffix = this.config.i18n.buffered;\n                    break;\n\n                default:\n                    break;\n            }\n\n            progress.textContent = `% ${suffix.toLowerCase()}`;\n        }\n\n        this.elements.display[type] = progress;\n\n        return progress;\n    },\n\n    // Create time display\n    createTime(type) {\n        const container = utils.createElement('div', {\n            class: 'plyr__time',\n        });\n\n        container.appendChild(\n            utils.createElement(\n                'span',\n                {\n                    class: this.config.classNames.hidden,\n                },\n                this.config.i18n[type]\n            )\n        );\n\n        container.appendChild(utils.createElement('span', utils.getAttributesFromSelector(this.config.selectors.display[type]), '00:00'));\n\n        this.elements.display[type] = container;\n\n        return container;\n    },\n\n    // Create a settings menu item\n    createMenuItem(value, list, type, title, badge = null, checked = false) {\n        const item = utils.createElement('li');\n\n        const label = utils.createElement('label', {\n            class: this.config.classNames.control,\n        });\n\n        const radio = utils.createElement(\n            'input',\n            utils.extend(utils.getAttributesFromSelector(this.config.selectors.inputs[type]), {\n                type: 'radio',\n                name: `plyr-${type}`,\n                value,\n                checked,\n                class: 'plyr__sr-only',\n            })\n        );\n\n        const faux = utils.createElement('span', { 'aria-hidden': true });\n\n        label.appendChild(radio);\n        label.appendChild(faux);\n        label.insertAdjacentHTML('beforeend', title);\n\n        if (utils.is.element(badge)) {\n            label.appendChild(badge);\n        }\n\n        item.appendChild(label);\n        list.appendChild(item);\n    },\n\n    // Update hover tooltip for seeking\n    updateSeekTooltip(event) {\n        // Bail if setting not true\n        if (\n            !this.config.tooltips.seek ||\n            !utils.is.element(this.elements.inputs.seek) ||\n            !utils.is.element(this.elements.display.seekTooltip) ||\n            this.duration === 0\n        ) {\n            return;\n        }\n\n        // Calculate percentage\n        let percent = 0;\n        const clientRect = this.elements.inputs.seek.getBoundingClientRect();\n        const visible = `${this.config.classNames.tooltip}--visible`;\n\n        // Determine percentage, if already visible\n        if (utils.is.event(event)) {\n            percent = 100 / clientRect.width * (event.pageX - clientRect.left);\n        } else if (utils.hasClass(this.elements.display.seekTooltip, visible)) {\n            percent = parseFloat(this.elements.display.seekTooltip.style.left, 10);\n        } else {\n            return;\n        }\n\n        // Set bounds\n        if (percent < 0) {\n            percent = 0;\n        } else if (percent > 100) {\n            percent = 100;\n        }\n\n        // Display the time a click would seek to\n        ui.updateTimeDisplay.call(this, this.elements.display.seekTooltip, this.duration / 100 * percent);\n\n        // Set position\n        this.elements.display.seekTooltip.style.left = `${percent}%`;\n\n        // Show/hide the tooltip\n        // If the event is a moues in/out and percentage is inside bounds\n        if (utils.is.event(event) && [\n            'mouseenter',\n            'mouseleave',\n        ].includes(event.type)) {\n            utils.toggleClass(this.elements.display.seekTooltip, visible, event.type === 'mouseenter');\n        }\n    },\n\n    // Hide/show a tab\n    toggleTab(setting, toggle) {\n        const tab = this.elements.settings.tabs[setting];\n        const pane = this.elements.settings.panes[setting];\n\n        utils.toggleHidden(tab, !toggle);\n        utils.toggleHidden(pane, !toggle);\n    },\n\n    // Set the YouTube quality menu\n    // TODO: Support for HTML5\n    setQualityMenu(options) {\n        const type = 'quality';\n        const list = this.elements.settings.panes.quality.querySelector('ul');\n\n        // Set options if passed and filter based on config\n        if (utils.is.array(options)) {\n            this.options.quality = options.filter(quality => this.config.quality.options.includes(quality));\n        } else {\n            this.options.quality = this.config.quality.options;\n        }\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.options.quality) && this.isYouTube;\n        controls.toggleTab.call(this, type, toggle);\n\n        // If we're hiding, nothing more to do\n        if (!toggle) {\n            return;\n        }\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // Get the badge HTML for HD, 4K etc\n        const getBadge = quality => {\n            let label = '';\n\n            switch (quality) {\n                case 'hd2160':\n                    label = '4K';\n                    break;\n\n                case 'hd1440':\n                    label = 'WQHD';\n                    break;\n\n                case 'hd1080':\n                    label = 'HD';\n                    break;\n\n                case 'hd720':\n                    label = 'HD';\n                    break;\n\n                default:\n                    break;\n            }\n\n            if (!label.length) {\n                return null;\n            }\n\n            return controls.createBadge.call(this, label);\n        };\n\n        this.options.quality.forEach(quality =>\n            controls.createMenuItem.call(this, quality, list, type, controls.getLabel.call(this, 'quality', quality), getBadge(quality))\n        );\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Translate a value into a nice label\n    // TODO: Localisation\n    getLabel(setting, value) {\n        switch (setting) {\n            case 'speed':\n                return value === 1 ? 'Normal' : `${value}&times;`;\n\n            case 'quality':\n                switch (value) {\n                    case 'hd2160':\n                        return '2160P';\n                    case 'hd1440':\n                        return '1440P';\n                    case 'hd1080':\n                        return '1080P';\n                    case 'hd720':\n                        return '720P';\n                    case 'large':\n                        return '480P';\n                    case 'medium':\n                        return '360P';\n                    case 'small':\n                        return '240P';\n                    case 'tiny':\n                        return 'Tiny';\n                    case 'default':\n                        return 'Auto';\n                    default:\n                        return value;\n                }\n\n            case 'captions':\n                return controls.getLanguage.call(this);\n\n            default:\n                return null;\n        }\n    },\n\n    // Update the selected setting\n    updateSetting(setting, container) {\n        const pane = this.elements.settings.panes[setting];\n        let value = null;\n        let list = container;\n\n        switch (setting) {\n            case 'captions':\n                value = this.captions.active ? this.captions.language : '';\n                break;\n\n            default:\n                value = this[setting];\n\n                // Get default\n                if (utils.is.empty(value)) {\n                    value = this.config[setting].default;\n                }\n\n                // Unsupported value\n                if (!this.options[setting].includes(value)) {\n                    this.debug.warn(`Unsupported value of '${value}' for ${setting}`);\n                    return;\n                }\n\n                // Disabled value\n                if (!this.config[setting].options.includes(value)) {\n                    this.debug.warn(`Disabled value of '${value}' for ${setting}`);\n                    return;\n                }\n\n                break;\n        }\n\n        // Get the list if we need to\n        if (!utils.is.element(list)) {\n            list = pane && pane.querySelector('ul');\n        }\n\n        // Update the label\n        if (!utils.is.empty(value)) {\n            const label = this.elements.settings.tabs[setting].querySelector(`.${this.config.classNames.menu.value}`);\n            label.innerHTML = controls.getLabel.call(this, setting, value);\n        }\n\n        // Find the radio option\n        const target = list && list.querySelector(`input[value=\"${value}\"]`);\n\n        if (utils.is.element(target)) {\n            // Check it\n            target.checked = true;\n        }\n    },\n\n    // Set the looping options\n    /* setLoopMenu() {\n        const options = ['start', 'end', 'all', 'reset'];\n        const list = this.elements.settings.panes.loop.querySelector('ul');\n\n        // Show the pane and tab\n        utils.toggleHidden(this.elements.settings.tabs.loop, false);\n        utils.toggleHidden(this.elements.settings.panes.loop, false);\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.loop.options);\n        controls.toggleTab.call(this, 'loop', toggle);\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        options.forEach(option => {\n            const item = utils.createElement('li');\n\n            const button = utils.createElement(\n                'button',\n                utils.extend(utils.getAttributesFromSelector(this.config.selectors.buttons.loop), {\n                    type: 'button',\n                    class: this.config.classNames.control,\n                    'data-plyr-loop-action': option,\n                }),\n                this.config.i18n[option]\n            );\n\n            if (['start', 'end'].includes(option)) {\n                const badge = controls.createBadge.call(this, '00:00');\n                button.appendChild(badge);\n            }\n\n            item.appendChild(button);\n            list.appendChild(item);\n        });\n    }, */\n\n    // Get current selected caption language\n    // TODO: rework this to user the getter in the API?\n    getLanguage() {\n        if (!this.supported.ui) {\n            return null;\n        }\n\n        if (!support.textTracks || !captions.getTracks.call(this).length) {\n            return this.config.i18n.none;\n        }\n\n        if (this.captions.active) {\n            const currentTrack = captions.getCurrentTrack.call(this);\n\n            if (utils.is.track(currentTrack)) {\n                return currentTrack.label;\n            }\n        }\n\n        return this.config.i18n.disabled;\n    },\n\n    // Set a list of available captions languages\n    setCaptionsMenu() {\n        // TODO: Captions or language? Currently it's mixed\n        const type = 'captions';\n        const list = this.elements.settings.panes.captions.querySelector('ul');\n\n        // Toggle the pane and tab\n        const hasTracks = captions.getTracks.call(this).length;\n        controls.toggleTab.call(this, type, hasTracks);\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // If there's no captions, bail\n        if (!hasTracks) {\n            return;\n        }\n\n        // Re-map the tracks into just the data we need\n        const tracks = captions.getTracks.call(this).map(track => ({\n            language: track.language,\n            label: !utils.is.empty(track.label) ? track.label : track.language.toUpperCase(),\n        }));\n\n        // Add the \"None\" option to turn off captions\n        tracks.unshift({\n            language: '',\n            label: this.config.i18n.none,\n        });\n\n        // Generate options\n        tracks.forEach(track => {\n            controls.createMenuItem.call(\n                this,\n                track.language,\n                list,\n                'language',\n                track.label || track.language,\n                controls.createBadge.call(this, track.language.toUpperCase()),\n                track.language.toLowerCase() === this.captions.language.toLowerCase()\n            );\n        });\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Set a list of available captions languages\n    setSpeedMenu() {\n        const type = 'speed';\n\n        // Set the default speeds\n        if (!utils.is.object(this.options.speed) || !Object.keys(this.options.speed).length) {\n            this.options.speed = [\n                0.5,\n                0.75,\n                1,\n                1.25,\n                1.5,\n                1.75,\n                2,\n            ];\n        }\n\n        // Set options if passed and filter based on config\n        this.options.speed = this.options.speed.filter(speed => this.config.speed.options.includes(speed));\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.options.speed);\n        controls.toggleTab.call(this, type, toggle);\n\n        // If we're hiding, nothing more to do\n        if (!toggle) {\n            return;\n        }\n\n        // Get the list to populate\n        const list = this.elements.settings.panes.speed.querySelector('ul');\n\n        // Show the pane and tab\n        utils.toggleHidden(this.elements.settings.tabs.speed, false);\n        utils.toggleHidden(this.elements.settings.panes.speed, false);\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // Create items\n        this.options.speed.forEach(speed => controls.createMenuItem.call(this, speed, list, type, controls.getLabel.call(this, 'speed', speed)));\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Show/hide menu\n    toggleMenu(event) {\n        const { form } = this.elements.settings;\n        const button = this.elements.buttons.settings;\n        const show = utils.is.boolean(event) ? event : utils.is.element(form) && form.getAttribute('aria-hidden') === 'true';\n\n        if (utils.is.event(event)) {\n            const isMenuItem = utils.is.element(form) && form.contains(event.target);\n            const isButton = event.target === this.elements.buttons.settings;\n\n            // If the click was inside the form or if the click\n            // wasn't the button or menu item and we're trying to\n            // show the menu (a doc click shouldn't show the menu)\n            if (isMenuItem || (!isMenuItem && !isButton && show)) {\n                return;\n            }\n\n            // Prevent the toggle being caught by the doc listener\n            if (isButton) {\n                event.stopPropagation();\n            }\n        }\n\n        // Set form and button attributes\n        if (utils.is.element(button)) {\n            button.setAttribute('aria-expanded', show);\n        }\n\n        if (utils.is.element(form)) {\n            form.setAttribute('aria-hidden', !show);\n            utils.toggleClass(this.elements.container, this.config.classNames.menu.open, show);\n\n            if (show) {\n                form.removeAttribute('tabindex');\n            } else {\n                form.setAttribute('tabindex', -1);\n            }\n        }\n    },\n\n    // Get the natural size of a tab\n    getTabSize(tab) {\n        const clone = tab.cloneNode(true);\n        clone.style.position = 'absolute';\n        clone.style.opacity = 0;\n        clone.setAttribute('aria-hidden', false);\n\n        // Prevent input's being unchecked due to the name being identical\n        Array.from(clone.querySelectorAll('input[name]')).forEach(input => {\n            const name = input.getAttribute('name');\n            input.setAttribute('name', `${name}-clone`);\n        });\n\n        // Append to parent so we get the \"real\" size\n        tab.parentNode.appendChild(clone);\n\n        // Get the sizes before we remove\n        const width = clone.scrollWidth;\n        const height = clone.scrollHeight;\n\n        // Remove from the DOM\n        utils.removeElement(clone);\n\n        return {\n            width,\n            height,\n        };\n    },\n\n    // Toggle Menu\n    showTab(event) {\n        const { menu } = this.elements.settings;\n        const tab = event.target;\n        const show = tab.getAttribute('aria-expanded') === 'false';\n        const pane = document.getElementById(tab.getAttribute('aria-controls'));\n\n        // Nothing to show, bail\n        if (!utils.is.element(pane)) {\n            return;\n        }\n\n        // Are we targetting a tab? If not, bail\n        const isTab = pane.getAttribute('role') === 'tabpanel';\n        if (!isTab) {\n            return;\n        }\n\n        // Hide all other tabs\n        // Get other tabs\n        const current = menu.querySelector('[role=\"tabpanel\"][aria-hidden=\"false\"]');\n        const container = current.parentNode;\n\n        // Set other toggles to be expanded false\n        Array.from(menu.querySelectorAll(`[aria-controls=\"${current.getAttribute('id')}\"]`)).forEach(toggle => {\n            toggle.setAttribute('aria-expanded', false);\n        });\n\n        // If we can do fancy animations, we'll animate the height/width\n        if (support.transitions && !support.reducedMotion) {\n            // Set the current width as a base\n            container.style.width = `${current.scrollWidth}px`;\n            container.style.height = `${current.scrollHeight}px`;\n\n            // Get potential sizes\n            const size = controls.getTabSize.call(this, pane);\n\n            // Restore auto height/width\n            const restore = e => {\n                // We're only bothered about height and width on the container\n                if (e.target !== container || ![\n                    'width',\n                    'height',\n                ].includes(e.propertyName)) {\n                    return;\n                }\n\n                // Revert back to auto\n                container.style.width = '';\n                container.style.height = '';\n\n                // Only listen once\n                utils.off(container, utils.transitionEnd, restore);\n            };\n\n            // Listen for the transition finishing and restore auto height/width\n            utils.on(container, utils.transitionEnd, restore);\n\n            // Set dimensions to target\n            container.style.width = `${size.width}px`;\n            container.style.height = `${size.height}px`;\n        }\n\n        // Set attributes on current tab\n        current.setAttribute('aria-hidden', true);\n        current.setAttribute('tabindex', -1);\n\n        // Set attributes on target\n        pane.setAttribute('aria-hidden', !show);\n        tab.setAttribute('aria-expanded', show);\n        pane.removeAttribute('tabindex');\n\n        // Focus the first item\n        pane.querySelectorAll('button:not(:disabled), input:not(:disabled), [tabindex]')[0].focus();\n    },\n\n    // Build the default HTML\n    // TODO: Set order based on order in the config.controls array?\n    create(data) {\n        // Do nothing if we want no controls\n        if (utils.is.empty(this.config.controls)) {\n            return null;\n        }\n\n        // Create the container\n        const container = utils.createElement('div', utils.getAttributesFromSelector(this.config.selectors.controls.wrapper));\n\n        // Restart button\n        if (this.config.controls.includes('restart')) {\n            container.appendChild(controls.createButton.call(this, 'restart'));\n        }\n\n        // Rewind button\n        if (this.config.controls.includes('rewind')) {\n            container.appendChild(controls.createButton.call(this, 'rewind'));\n        }\n\n        // Play/Pause button\n        if (this.config.controls.includes('play')) {\n            container.appendChild(controls.createButton.call(this, 'play'));\n            // container.appendChild(controls.createButton.call(this, 'pause'));\n        }\n\n        // Fast forward button\n        if (this.config.controls.includes('fast-forward')) {\n            container.appendChild(controls.createButton.call(this, 'fast-forward'));\n        }\n\n        // Progress\n        if (this.config.controls.includes('progress')) {\n            const progress = utils.createElement('div', utils.getAttributesFromSelector(this.config.selectors.progress));\n\n            // Seek range slider\n            const seek = controls.createRange.call(this, 'seek', {\n                id: `plyr-seek-${data.id}`,\n            });\n            progress.appendChild(seek.label);\n            progress.appendChild(seek.input);\n\n            // Buffer progress\n            progress.appendChild(controls.createProgress.call(this, 'buffer'));\n\n            // TODO: Add loop display indicator\n\n            // Seek tooltip\n            if (this.config.tooltips.seek) {\n                const tooltip = utils.createElement(\n                    'span',\n                    {\n                        role: 'tooltip',\n                        class: this.config.classNames.tooltip,\n                    },\n                    '00:00'\n                );\n\n                progress.appendChild(tooltip);\n                this.elements.display.seekTooltip = tooltip;\n            }\n\n            this.elements.progress = progress;\n            container.appendChild(this.elements.progress);\n        }\n\n        // Media current time display\n        if (this.config.controls.includes('current-time')) {\n            container.appendChild(controls.createTime.call(this, 'currentTime'));\n        }\n\n        // Media duration display\n        if (this.config.controls.includes('duration')) {\n            container.appendChild(controls.createTime.call(this, 'duration'));\n        }\n\n        // Toggle mute button\n        if (this.config.controls.includes('mute')) {\n            container.appendChild(controls.createButton.call(this, 'mute'));\n        }\n\n        // Volume range control\n        if (this.config.controls.includes('volume')) {\n            const volume = utils.createElement('div', {\n                class: 'plyr__volume',\n            });\n\n            // Set the attributes\n            const attributes = {\n                max: 1,\n                step: 0.05,\n                value: this.config.volume,\n            };\n\n            // Create the volume range slider\n            const range = controls.createRange.call(\n                this,\n                'volume',\n                utils.extend(attributes, {\n                    id: `plyr-volume-${data.id}`,\n                })\n            );\n            volume.appendChild(range.label);\n            volume.appendChild(range.input);\n\n            this.elements.volume = volume;\n\n            container.appendChild(volume);\n        }\n\n        // Toggle captions button\n        if (this.config.controls.includes('captions')) {\n            container.appendChild(controls.createButton.call(this, 'captions'));\n        }\n\n        // Settings button / menu\n        if (this.config.controls.includes('settings') && !utils.is.empty(this.config.settings)) {\n            const menu = utils.createElement('div', {\n                class: 'plyr__menu',\n            });\n\n            menu.appendChild(\n                controls.createButton.call(this, 'settings', {\n                    id: `plyr-settings-toggle-${data.id}`,\n                    'aria-haspopup': true,\n                    'aria-controls': `plyr-settings-${data.id}`,\n                    'aria-expanded': false,\n                })\n            );\n\n            const form = utils.createElement('form', {\n                class: 'plyr__menu__container',\n                id: `plyr-settings-${data.id}`,\n                'aria-hidden': true,\n                'aria-labelled-by': `plyr-settings-toggle-${data.id}`,\n                role: 'tablist',\n                tabindex: -1,\n            });\n\n            const inner = utils.createElement('div');\n\n            const home = utils.createElement('div', {\n                id: `plyr-settings-${data.id}-home`,\n                'aria-hidden': false,\n                'aria-labelled-by': `plyr-settings-toggle-${data.id}`,\n                role: 'tabpanel',\n            });\n\n            // Create the tab list\n            const tabs = utils.createElement('ul', {\n                role: 'tablist',\n            });\n\n            // Build the tabs\n            this.config.settings.forEach(type => {\n                const tab = utils.createElement('li', {\n                    role: 'tab',\n                    hidden: '',\n                });\n\n                const button = utils.createElement(\n                    'button',\n                    utils.extend(utils.getAttributesFromSelector(this.config.selectors.buttons.settings), {\n                        type: 'button',\n                        class: `${this.config.classNames.control} ${this.config.classNames.control}--forward`,\n                        id: `plyr-settings-${data.id}-${type}-tab`,\n                        'aria-haspopup': true,\n                        'aria-controls': `plyr-settings-${data.id}-${type}`,\n                        'aria-expanded': false,\n                    }),\n                    this.config.i18n[type]\n                );\n\n                const value = utils.createElement('span', {\n                    class: this.config.classNames.menu.value,\n                });\n\n                // Speed contains HTML entities\n                value.innerHTML = data[type];\n\n                button.appendChild(value);\n                tab.appendChild(button);\n                tabs.appendChild(tab);\n\n                this.elements.settings.tabs[type] = tab;\n            });\n\n            home.appendChild(tabs);\n            inner.appendChild(home);\n\n            // Build the panes\n            this.config.settings.forEach(type => {\n                const pane = utils.createElement('div', {\n                    id: `plyr-settings-${data.id}-${type}`,\n                    'aria-hidden': true,\n                    'aria-labelled-by': `plyr-settings-${data.id}-${type}-tab`,\n                    role: 'tabpanel',\n                    tabindex: -1,\n                    hidden: '',\n                });\n\n                const back = utils.createElement(\n                    'button',\n                    {\n                        type: 'button',\n                        class: `${this.config.classNames.control} ${this.config.classNames.control}--back`,\n                        'aria-haspopup': true,\n                        'aria-controls': `plyr-settings-${data.id}-home`,\n                        'aria-expanded': false,\n                    },\n                    this.config.i18n[type]\n                );\n\n                pane.appendChild(back);\n\n                const options = utils.createElement('ul');\n\n                pane.appendChild(options);\n                inner.appendChild(pane);\n\n                this.elements.settings.panes[type] = pane;\n            });\n\n            form.appendChild(inner);\n            menu.appendChild(form);\n            container.appendChild(menu);\n\n            this.elements.settings.form = form;\n            this.elements.settings.menu = menu;\n        }\n\n        // Picture in picture button\n        if (this.config.controls.includes('pip') && support.pip) {\n            container.appendChild(controls.createButton.call(this, 'pip'));\n        }\n\n        // Airplay button\n        if (this.config.controls.includes('airplay') && support.airplay) {\n            container.appendChild(controls.createButton.call(this, 'airplay'));\n        }\n\n        // Toggle fullscreen button\n        if (this.config.controls.includes('fullscreen')) {\n            container.appendChild(controls.createButton.call(this, 'fullscreen'));\n        }\n\n        // Larger overlaid play button\n        if (this.config.controls.includes('play-large')) {\n            this.elements.container.appendChild(controls.createButton.call(this, 'play-large'));\n        }\n\n        this.elements.controls = container;\n\n        if (this.config.controls.includes('settings') && this.config.settings.includes('speed')) {\n            controls.setSpeedMenu.call(this);\n        }\n\n        return container;\n    },\n\n    // Insert controls\n    inject() {\n        // Sprite\n        if (this.config.loadSprite) {\n            const icon = controls.getIconUrl.call(this);\n\n            // Only load external sprite using AJAX\n            if (icon.absolute) {\n                utils.loadSprite(icon.url, 'sprite-plyr');\n            }\n        }\n\n        // Create a unique ID\n        this.id = Math.floor(Math.random() * 10000);\n\n        // Null by default\n        let container = null;\n\n        // HTML passed as the option\n        if (utils.is.string(this.config.controls)) {\n            container = this.config.controls;\n        } else if (utils.is.function(this.config.controls)) {\n            // A custom function to build controls\n            // The function can return a HTMLElement or String\n            container = this.config.controls({\n                id: this.id,\n                seektime: this.config.seekTime,\n                title: this.config.title,\n            });\n        } else {\n            // Create controls\n            container = controls.create.call(this, {\n                id: this.id,\n                seektime: this.config.seekTime,\n                speed: this.speed,\n                quality: this.quality,\n                captions: controls.getLanguage.call(this),\n                // TODO: Looping\n                // loop: 'None',\n            });\n        }\n\n        // Controls container\n        let target;\n\n        // Inject to custom location\n        if (utils.is.string(this.config.selectors.controls.container)) {\n            target = document.querySelector(this.config.selectors.controls.container);\n        }\n\n        // Inject into the container by default\n        if (!utils.is.element(target)) {\n            target = this.elements.container;\n        }\n\n        // Inject controls HTML\n        if (utils.is.element(container)) {\n            target.appendChild(container);\n        } else {\n            target.insertAdjacentHTML('beforeend', container);\n        }\n\n        // Find the elements if need be\n        if (utils.is.element(this.elements.controls)) {\n            utils.findElements.call(this);\n        }\n\n        // Edge sometimes doesn't finish the paint so force a redraw\n        if (window.navigator.userAgent.includes('Edge')) {\n            utils.repaint(target);\n        }\n\n        // Setup tooltips\n        if (this.config.tooltips.controls) {\n            const labels = utils.getElements.call(\n                this,\n                [\n                    this.config.selectors.controls.wrapper,\n                    ' ',\n                    this.config.selectors.labels,\n                    ' .',\n                    this.config.classNames.hidden,\n                ].join('')\n            );\n\n            Array.from(labels).forEach(label => {\n                utils.toggleClass(label, this.config.classNames.hidden, false);\n                utils.toggleClass(label, this.config.classNames.tooltip, true);\n                label.setAttribute('role', 'tooltip');\n            });\n        }\n    },\n};\n\nexport default controls;\n","// ==========================================================================\n// Plyr Captions\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport controls from './controls';\n\nconst captions = {\n    // Setup captions\n    setup() {\n        // Requires UI support\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // Set default language if not set\n        const stored = this.storage.get('language');\n\n        if (!utils.is.empty(stored)) {\n            this.captions.language = stored;\n        }\n\n        if (utils.is.empty(this.captions.language)) {\n            this.captions.language = this.config.captions.language.toLowerCase();\n        }\n\n        // Set captions enabled state if not set\n        if (!utils.is.boolean(this.captions.active)) {\n            const active = this.storage.get('captions');\n\n            if (utils.is.boolean(active)) {\n                this.captions.active = active;\n            } else {\n                this.captions.active = this.config.captions.active;\n            }\n        }\n\n        // Only Vimeo and HTML5 video supported at this point\n        if (!this.isVideo || this.isYouTube || (this.isHTML5 && !support.textTracks)) {\n            // Clear menu and hide\n            if (this.config.controls.includes('settings') && this.config.settings.includes('captions')) {\n                controls.setCaptionsMenu.call(this);\n            }\n\n            return;\n        }\n\n        // Inject the container\n        if (!utils.is.element(this.elements.captions)) {\n            this.elements.captions = utils.createElement('div', utils.getAttributesFromSelector(this.config.selectors.captions));\n\n            utils.insertAfter(this.elements.captions, this.elements.wrapper);\n        }\n\n        // Set the class hook\n        utils.toggleClass(this.elements.container, this.config.classNames.captions.enabled, !utils.is.empty(captions.getTracks.call(this)));\n\n        // If no caption file exists, hide container for caption text\n        if (utils.is.empty(captions.getTracks.call(this))) {\n            return;\n        }\n\n        // Set language\n        captions.setLanguage.call(this);\n\n        // Enable UI\n        captions.show.call(this);\n\n        // Set available languages in list\n        if (this.config.controls.includes('settings') && this.config.settings.includes('captions')) {\n            controls.setCaptionsMenu.call(this);\n        }\n    },\n\n    // Set the captions language\n    setLanguage() {\n        // Setup HTML5 track rendering\n        if (this.isHTML5 && this.isVideo) {\n            captions.getTracks.call(this).forEach(track => {\n                // Remove previous bindings\n                utils.on(track, 'cuechange', event => captions.setCue.call(this, event));\n\n                // Turn off native caption rendering to avoid double captions\n                // eslint-disable-next-line\n                track.mode = 'hidden';\n            });\n\n            // Get current track\n            const currentTrack = captions.getCurrentTrack.call(this);\n\n            // Check if suported kind\n            if (utils.is.track(currentTrack)) {\n                // If we change the active track while a cue is already displayed we need to update it\n                if (Array.from(currentTrack.activeCues || []).length) {\n                    captions.setCue.call(this, currentTrack);\n                }\n            }\n        } else if (this.isVimeo && this.captions.active) {\n            this.embed.enableTextTrack(this.language);\n        }\n    },\n\n    // Get the tracks\n    getTracks() {\n        // Return empty array at least\n        if (utils.is.nullOrUndefined(this.media)) {\n            return [];\n        }\n\n        // Only get accepted kinds\n        return Array.from(this.media.textTracks || []).filter(track => [\n            'captions',\n            'subtitles',\n        ].includes(track.kind));\n    },\n\n    // Get the current track for the current language\n    getCurrentTrack() {\n        return captions.getTracks.call(this).find(track => track.language.toLowerCase() === this.language);\n    },\n\n    // Display active caption if it contains text\n    setCue(input) {\n        // Get the track from the event if needed\n        const track = utils.is.event(input) ? input.target : input;\n        const active = track.activeCues[0];\n        const currentTrack = captions.getCurrentTrack.call(this);\n\n        // Only display current track\n        if (track !== currentTrack) {\n            return;\n        }\n\n        // Display a cue, if there is one\n        if (utils.is.cue(active)) {\n            captions.setText.call(this, active.getCueAsHTML());\n        } else {\n            captions.setText.call(this, null);\n        }\n\n        utils.dispatchEvent.call(this, this.media, 'cuechange');\n    },\n\n    // Set the current caption\n    setText(input) {\n        // Requires UI\n        if (!this.supported.ui) {\n            return;\n        }\n\n        if (utils.is.element(this.elements.captions)) {\n            const content = utils.createElement('span');\n\n            // Empty the container\n            utils.emptyElement(this.elements.captions);\n\n            // Default to empty\n            const caption = !utils.is.nullOrUndefined(input) ? input : '';\n\n            // Set the span content\n            if (utils.is.string(caption)) {\n                content.textContent = caption.trim();\n            } else {\n                content.appendChild(caption);\n            }\n\n            // Set new caption text\n            this.elements.captions.appendChild(content);\n        } else {\n            this.debug.warn('No captions element to render to');\n        }\n    },\n\n    // Display captions container and button (for initialization)\n    show() {\n        // If there's no caption toggle, bail\n        if (!utils.is.element(this.elements.buttons.captions)) {\n            return;\n        }\n\n        // Try to load the value from storage\n        let active = this.storage.get('captions');\n\n        // Otherwise fall back to the default config\n        if (!utils.is.boolean(active)) {\n            ({ active } = this.config.captions);\n        } else {\n            this.captions.active = active;\n        }\n\n        if (active) {\n            utils.toggleClass(this.elements.container, this.config.classNames.captions.active, true);\n            utils.toggleState(this.elements.buttons.captions, true);\n        }\n    },\n};\n\nexport default captions;\n","// ==========================================================================\n// YouTube plugin\n// ==========================================================================\n\nimport utils from './../utils';\nimport controls from './../controls';\nimport ui from './../ui';\n\nconst youtube = {\n    setup() {\n        const videoId = utils.parseYouTubeId(this.embedId);\n\n        // Remove old containers\n        const containers = utils.getElements.call(this, `[id^=\"${this.provider}-\"]`);\n        Array.from(containers).forEach(utils.removeElement);\n\n        // Add embed class for responsive\n        utils.toggleClass(this.elements.wrapper, this.config.classNames.embed, true);\n\n        // Set aspect ratio\n        youtube.setAspectRatio.call(this);\n\n        // Set ID\n        this.media.setAttribute('id', utils.generateId(this.provider));\n\n        // Setup API\n        if (utils.is.object(window.YT)) {\n            youtube.ready.call(this, videoId);\n        } else {\n            // Load the API\n            utils.loadScript(this.config.urls.youtube.api);\n\n            // Setup callback for the API\n            // YouTube has it's own system of course...\n            window.onYouTubeReadyCallbacks = window.onYouTubeReadyCallbacks || [];\n\n            // Add to queue\n            window.onYouTubeReadyCallbacks.push(() => {\n                youtube.ready.call(this, videoId);\n            });\n\n            // Set callback to process queue\n            window.onYouTubeIframeAPIReady = () => {\n                window.onYouTubeReadyCallbacks.forEach(callback => {\n                    callback();\n                });\n            };\n        }\n    },\n\n    // Get the media title\n    getTitle() {\n        // Try via undocumented API method first\n        // This method disappears now and then though...\n        // https://github.com/sampotts/plyr/issues/709\n        if (utils.is.function(this.embed.getVideoData)) {\n            const { title } = this.embed.getVideoData();\n\n            if (utils.is.empty(title)) {\n                this.config.title = title;\n                ui.setTitle.call(this);\n                return;\n            }\n        }\n\n        // Or via Google API\n        const key = this.config.keys.google;\n        const videoId = utils.parseYouTubeId(this.embedId);\n        if (utils.is.string(key) && !utils.is.empty(key)) {\n            const url = `https://www.googleapis.com/youtube/v3/videos?id=${videoId}&key=${key}&fields=items(snippet(title))&part=snippet`;\n\n            fetch(url)\n                .then(response => (response.ok ? response.json() : null))\n                .then(result => {\n                    if (result !== null && utils.is.object(result)) {\n                        this.config.title = result.items[0].snippet.title;\n                        ui.setTitle.call(this);\n                    }\n                })\n                .catch(() => {});\n        }\n    },\n\n    // Set aspect ratio\n    setAspectRatio() {\n        const ratio = this.config.ratio.split(':');\n        this.elements.wrapper.style.paddingBottom = `${100 / ratio[0] * ratio[1]}%`;\n    },\n\n    // API ready\n    ready(videoId) {\n        const player = this;\n\n        // Setup instance\n        // https://developers.google.com/youtube/iframe_api_reference\n        player.embed = new window.YT.Player(player.media.id, {\n            videoId,\n            playerVars: {\n                autoplay: player.config.autoplay ? 1 : 0, // Autoplay\n                controls: player.supported.ui ? 0 : 1, // Only show controls if not fully supported\n                rel: 0, // No related vids\n                showinfo: 0, // Hide info\n                iv_load_policy: 3, // Hide annotations\n                modestbranding: 1, // Hide logos as much as possible (they still show one in the corner when paused)\n                disablekb: 1, // Disable keyboard as we handle it\n                playsinline: 1, // Allow iOS inline playback\n\n                // Tracking for stats\n                origin: window && window.location.hostname,\n                widget_referrer: window && window.location.href,\n\n                // Captions are flaky on YouTube\n                cc_load_policy: this.captions.active ? 1 : 0,\n                cc_lang_pref: this.config.captions.language,\n            },\n            events: {\n                onError(event) {\n                    // If we've already fired an error, don't do it again\n                    // YouTube fires onError twice\n                    if (utils.is.object(player.media.error)) {\n                        return;\n                    }\n\n                    const detail = {\n                        code: event.data,\n                    };\n\n                    // Messages copied from https://developers.google.com/youtube/iframe_api_reference#onError\n                    switch (event.data) {\n                        case 2:\n                            detail.message =\n                                'The request contains an invalid parameter value. For example, this error occurs if you specify a video ID that does not have 11 characters, or if the video ID contains invalid characters, such as exclamation points or asterisks.';\n                            break;\n\n                        case 5:\n                            detail.message =\n                                'The requested content cannot be played in an HTML5 player or another error related to the HTML5 player has occurred.';\n                            break;\n\n                        case 100:\n                            detail.message =\n                                'The video requested was not found. This error occurs when a video has been removed (for any reason) or has been marked as private.';\n                            break;\n\n                        case 101:\n                        case 150:\n                            detail.message = 'The owner of the requested video does not allow it to be played in embedded players.';\n                            break;\n\n                        default:\n                            detail.message = 'An unknown error occured';\n                            break;\n                    }\n\n                    player.media.error = detail;\n\n                    utils.dispatchEvent.call(player, player.media, 'error');\n                },\n                onPlaybackQualityChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get current quality\n                    player.media.quality = instance.getPlaybackQuality();\n\n                    utils.dispatchEvent.call(player, player.media, 'qualitychange');\n                },\n                onPlaybackRateChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get current speed\n                    player.media.playbackRate = instance.getPlaybackRate();\n\n                    utils.dispatchEvent.call(player, player.media, 'ratechange');\n                },\n                onReady(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get the title\n                    youtube.getTitle.call(player);\n\n                    // Create a faux HTML5 API using the YouTube API\n                    player.media.play = () => {\n                        instance.playVideo();\n                        player.media.paused = false;\n                    };\n\n                    player.media.pause = () => {\n                        instance.pauseVideo();\n                        player.media.paused = true;\n                    };\n\n                    player.media.stop = () => {\n                        instance.stopVideo();\n                        player.media.paused = true;\n                    };\n\n                    player.media.duration = instance.getDuration();\n                    player.media.paused = true;\n\n                    // Seeking\n                    player.media.currentTime = 0;\n                    Object.defineProperty(player.media, 'currentTime', {\n                        get() {\n                            return Number(instance.getCurrentTime());\n                        },\n                        set(time) {\n                            // Set seeking flag\n                            player.media.seeking = true;\n\n                            // Trigger seeking\n                            utils.dispatchEvent.call(player, player.media, 'seeking');\n\n                            // Seek after events sent\n                            instance.seekTo(time);\n                        },\n                    });\n\n                    // Playback speed\n                    Object.defineProperty(player.media, 'playbackRate', {\n                        get() {\n                            return instance.getPlaybackRate();\n                        },\n                        set(input) {\n                            instance.setPlaybackRate(input);\n                        },\n                    });\n\n                    // Quality\n                    Object.defineProperty(player.media, 'quality', {\n                        get() {\n                            return instance.getPlaybackQuality();\n                        },\n                        set(input) {\n                            // Trigger request event\n                            utils.dispatchEvent.call(player, player.media, 'qualityrequested', false, {\n                                quality: input,\n                            });\n\n                            instance.setPlaybackQuality(input);\n                        },\n                    });\n\n                    // Volume\n                    let { volume } = player.config;\n                    Object.defineProperty(player.media, 'volume', {\n                        get() {\n                            return volume;\n                        },\n                        set(input) {\n                            volume = input;\n                            instance.setVolume(volume * 100);\n                            utils.dispatchEvent.call(player, player.media, 'volumechange');\n                        },\n                    });\n\n                    // Muted\n                    let { muted } = player.config;\n                    Object.defineProperty(player.media, 'muted', {\n                        get() {\n                            return muted;\n                        },\n                        set(input) {\n                            const toggle = utils.is.boolean(input) ? input : muted;\n                            muted = toggle;\n                            instance[toggle ? 'mute' : 'unMute']();\n                            utils.dispatchEvent.call(player, player.media, 'volumechange');\n                        },\n                    });\n\n                    // Source\n                    Object.defineProperty(player.media, 'currentSrc', {\n                        get() {\n                            return instance.getVideoUrl();\n                        },\n                    });\n\n                    // Ended\n                    Object.defineProperty(player.media, 'ended', {\n                        get() {\n                            return player.currentTime === player.duration;\n                        },\n                    });\n\n                    // Get available speeds\n                    player.options.speed = instance.getAvailablePlaybackRates();\n\n                    // Set the tabindex to avoid focus entering iframe\n                    if (player.supported.ui) {\n                        player.media.setAttribute('tabindex', -1);\n                    }\n\n                    utils.dispatchEvent.call(player, player.media, 'timeupdate');\n                    utils.dispatchEvent.call(player, player.media, 'durationchange');\n\n                    // Reset timer\n                    window.clearInterval(player.timers.buffering);\n\n                    // Setup buffering\n                    player.timers.buffering = window.setInterval(() => {\n                        // Get loaded % from YouTube\n                        player.media.buffered = instance.getVideoLoadedFraction();\n\n                        // Trigger progress only when we actually buffer something\n                        if (player.media.lastBuffered === null || player.media.lastBuffered < player.media.buffered) {\n                            utils.dispatchEvent.call(player, player.media, 'progress');\n                        }\n\n                        // Set last buffer point\n                        player.media.lastBuffered = player.media.buffered;\n\n                        // Bail if we're at 100%\n                        if (player.media.buffered === 1) {\n                            window.clearInterval(player.timers.buffering);\n\n                            // Trigger event\n                            utils.dispatchEvent.call(player, player.media, 'canplaythrough');\n                        }\n                    }, 200);\n\n                    // Rebuild UI\n                    window.setTimeout(() => ui.build.call(player), 50);\n                },\n                onStateChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Reset timer\n                    window.clearInterval(player.timers.playing);\n\n                    // Handle events\n                    // -1   Unstarted\n                    // 0    Ended\n                    // 1    Playing\n                    // 2    Paused\n                    // 3    Buffering\n                    // 5    Video cued\n                    switch (event.data) {\n                        case 0:\n                            player.media.paused = true;\n\n                            // YouTube doesn't support loop for a single video, so mimick it.\n                            if (player.media.loop) {\n                                // YouTube needs a call to `stopVideo` before playing again\n                                instance.stopVideo();\n                                instance.playVideo();\n                            } else {\n                                utils.dispatchEvent.call(player, player.media, 'ended');\n                            }\n\n                            break;\n\n                        case 1:\n                            // If we were seeking, fire seeked event\n                            if (player.media.seeking) {\n                                utils.dispatchEvent.call(player, player.media, 'seeked');\n                            }\n                            player.media.seeking = false;\n\n                            // Only fire play if paused before\n                            if (player.media.paused) {\n                                utils.dispatchEvent.call(player, player.media, 'play');\n                            }\n                            player.media.paused = false;\n\n                            utils.dispatchEvent.call(player, player.media, 'playing');\n\n                            // Poll to get playback progress\n                            player.timers.playing = window.setInterval(() => {\n                                utils.dispatchEvent.call(player, player.media, 'timeupdate');\n                            }, 50);\n\n                            // Check duration again due to YouTube bug\n                            // https://github.com/sampotts/plyr/issues/374\n                            // https://code.google.com/p/gdata-issues/issues/detail?id=8690\n                            if (player.media.duration !== instance.getDuration()) {\n                                player.media.duration = instance.getDuration();\n                                utils.dispatchEvent.call(player, player.media, 'durationchange');\n                            }\n\n                            // Get quality\n                            controls.setQualityMenu.call(player, instance.getAvailableQualityLevels());\n\n                            break;\n\n                        case 2:\n                            player.media.paused = true;\n\n                            utils.dispatchEvent.call(player, player.media, 'pause');\n\n                            break;\n\n                        default:\n                            break;\n                    }\n\n                    utils.dispatchEvent.call(player, player.elements.container, 'statechange', false, {\n                        code: event.data,\n                    });\n                },\n            },\n        });\n    },\n};\n\nexport default youtube;\n","// ==========================================================================\n// Vimeo plugin\n// ==========================================================================\n\nimport utils from './../utils';\nimport captions from './../captions';\nimport ui from './../ui';\n\nconst vimeo = {\n    setup() {\n        // Remove old containers\n        const containers = utils.getElements.call(this, `[id^=\"${this.provider}-\"]`);\n        Array.from(containers).forEach(utils.removeElement);\n\n        // Add embed class for responsive\n        utils.toggleClass(this.elements.wrapper, this.config.classNames.embed, true);\n\n        // Set intial ratio\n        vimeo.setAspectRatio.call(this);\n\n        // Set ID\n        this.media.setAttribute('id', utils.generateId(this.provider));\n\n        // Load the API if not already\n        if (!utils.is.object(window.Vimeo)) {\n            utils.loadScript(this.config.urls.vimeo.api, () => {\n                vimeo.ready.call(this);\n            });\n        } else {\n            vimeo.ready.call(this);\n        }\n    },\n\n    // Set aspect ratio\n    // For Vimeo we have an extra 300% height <div> to hide the standard controls and UI\n    setAspectRatio(input) {\n        const ratio = utils.is.string(input) ? input.split(':') : this.config.ratio.split(':');\n        const padding = 100 / ratio[0] * ratio[1];\n        const height = 200;\n        const offset = (height - padding) / (height / 50);\n        this.elements.wrapper.style.paddingBottom = `${padding}%`;\n        this.media.style.transform = `translateY(-${offset}%)`;\n    },\n\n    // API Ready\n    ready() {\n        const player = this;\n\n        // Get Vimeo params for the iframe\n        const options = {\n            loop: player.config.loop.active,\n            autoplay: player.autoplay,\n            byline: false,\n            portrait: false,\n            title: false,\n            speed: true,\n            transparent: 0,\n            gesture: 'media',\n        };\n        const params = utils.buildUrlParameters(options);\n        const id = utils.parseVimeoId(player.embedId);\n\n        // Build an iframe\n        const iframe = utils.createElement('iframe');\n        const src = `https://player.vimeo.com/video/${id}?${params}`;\n        iframe.setAttribute('src', src);\n        iframe.setAttribute('allowfullscreen', '');\n        player.media.appendChild(iframe);\n\n        // Setup instance\n        // https://github.com/vimeo/player.js\n        player.embed = new window.Vimeo.Player(iframe);\n\n        player.media.paused = true;\n        player.media.currentTime = 0;\n\n        // Create a faux HTML5 API using the Vimeo API\n        player.media.play = () => {\n            player.embed.play().then(() => {\n                player.media.paused = false;\n            });\n        };\n\n        player.media.pause = () => {\n            player.embed.pause().then(() => {\n                player.media.paused = true;\n            });\n        };\n\n        player.media.stop = () => {\n            player.embed.stop().then(() => {\n                player.media.paused = true;\n                player.currentTime = 0;\n            });\n        };\n\n        // Seeking\n        let { currentTime } = player.media;\n        Object.defineProperty(player.media, 'currentTime', {\n            get() {\n                return currentTime;\n            },\n            set(time) {\n                // Get current paused state\n                // Vimeo will automatically play on seek\n                const { paused } = player.media;\n\n                // Set seeking flag\n                player.media.seeking = true;\n\n                // Trigger seeking\n                utils.dispatchEvent.call(player, player.media, 'seeking');\n\n                // Seek after events\n                player.embed.setCurrentTime(time);\n\n                // Restore pause state\n                if (paused) {\n                    player.pause();\n                }\n            },\n        });\n\n        // Playback speed\n        let speed = player.config.speed.selected;\n        Object.defineProperty(player.media, 'playbackRate', {\n            get() {\n                return speed;\n            },\n            set(input) {\n                player.embed.setPlaybackRate(input).then(() => {\n                    speed = input;\n                    utils.dispatchEvent.call(player, player.media, 'ratechange');\n                });\n            },\n        });\n\n        // Volume\n        let { volume } = player.config;\n        Object.defineProperty(player.media, 'volume', {\n            get() {\n                return volume;\n            },\n            set(input) {\n                player.embed.setVolume(input).then(() => {\n                    volume = input;\n                    utils.dispatchEvent.call(player, player.media, 'volumechange');\n                });\n            },\n        });\n\n        // Muted\n        let { muted } = player.config;\n        Object.defineProperty(player.media, 'muted', {\n            get() {\n                return muted;\n            },\n            set(input) {\n                const toggle = utils.is.boolean(input) ? input : false;\n\n                player.embed.setVolume(toggle ? 0 : player.config.volume).then(() => {\n                    muted = toggle;\n                    utils.dispatchEvent.call(player, player.media, 'volumechange');\n                });\n            },\n        });\n\n        // Loop\n        let { loop } = player.config;\n        Object.defineProperty(player.media, 'loop', {\n            get() {\n                return loop;\n            },\n            set(input) {\n                const toggle = utils.is.boolean(input) ? input : player.config.loop.active;\n\n                player.embed.setLoop(toggle).then(() => {\n                    loop = toggle;\n                });\n            },\n        });\n\n        // Source\n        let currentSrc;\n        player.embed.getVideoUrl().then(value => {\n            currentSrc = value;\n        });\n        Object.defineProperty(player.media, 'currentSrc', {\n            get() {\n                return currentSrc;\n            },\n        });\n\n        // Ended\n        Object.defineProperty(player.media, 'ended', {\n            get() {\n                return player.currentTime === player.duration;\n            },\n        });\n\n        // Set aspect ratio based on video size\n        Promise.all([\n            player.embed.getVideoWidth(),\n            player.embed.getVideoHeight(),\n        ]).then(dimensions => {\n            const ratio = utils.getAspectRatio(dimensions[0], dimensions[1]);\n            vimeo.setAspectRatio.call(this, ratio);\n        });\n\n        // Set autopause\n        player.embed.setAutopause(player.config.autopause).then(state => {\n            player.config.autopause = state;\n        });\n\n        // Get title\n        player.embed.getVideoTitle().then(title => {\n            player.config.title = title;\n            ui.setTitle.call(this);\n        });\n\n        // Get current time\n        player.embed.getCurrentTime().then(value => {\n            currentTime = value;\n            utils.dispatchEvent.call(player, player.media, 'timeupdate');\n        });\n\n        // Get duration\n        player.embed.getDuration().then(value => {\n            player.media.duration = value;\n            utils.dispatchEvent.call(player, player.media, 'durationchange');\n        });\n\n        // Get captions\n        player.embed.getTextTracks().then(tracks => {\n            player.media.textTracks = tracks;\n            captions.setup.call(player);\n        });\n\n        player.embed.on('cuechange', data => {\n            let cue = null;\n\n            if (data.cues.length) {\n                cue = utils.stripHTML(data.cues[0].text);\n            }\n\n            captions.setText.call(player, cue);\n        });\n\n        player.embed.on('loaded', () => {\n            if (utils.is.element(player.embed.element) && player.supported.ui) {\n                const frame = player.embed.element;\n\n                // Fix keyboard focus issues\n                // https://github.com/sampotts/plyr/issues/317\n                frame.setAttribute('tabindex', -1);\n            }\n        });\n\n        player.embed.on('play', () => {\n            // Only fire play if paused before\n            if (player.media.paused) {\n                utils.dispatchEvent.call(player, player.media, 'play');\n            }\n            player.media.paused = false;\n            utils.dispatchEvent.call(player, player.media, 'playing');\n        });\n\n        player.embed.on('pause', () => {\n            player.media.paused = true;\n            utils.dispatchEvent.call(player, player.media, 'pause');\n        });\n\n        player.embed.on('timeupdate', data => {\n            player.media.seeking = false;\n            currentTime = data.seconds;\n            utils.dispatchEvent.call(player, player.media, 'timeupdate');\n        });\n\n        player.embed.on('progress', data => {\n            player.media.buffered = data.percent;\n            utils.dispatchEvent.call(player, player.media, 'progress');\n\n            // Check all loaded\n            if (parseInt(data.percent, 10) === 1) {\n                utils.dispatchEvent.call(player, player.media, 'canplaythrough');\n            }\n        });\n\n        player.embed.on('seeked', () => {\n            player.media.seeking = false;\n            utils.dispatchEvent.call(player, player.media, 'seeked');\n            utils.dispatchEvent.call(player, player.media, 'play');\n        });\n\n        player.embed.on('ended', () => {\n            player.media.paused = true;\n            utils.dispatchEvent.call(player, player.media, 'ended');\n        });\n\n        player.embed.on('error', detail => {\n            player.media.error = detail;\n            utils.dispatchEvent.call(player, player.media, 'error');\n        });\n\n        // Rebuild UI\n        window.setTimeout(() => ui.build.call(player), 0);\n    },\n};\n\nexport default vimeo;\n","// ==========================================================================\n// Plyr Media\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport youtube from './plugins/youtube';\nimport vimeo from './plugins/vimeo';\nimport ui from './ui';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nconst media = {\n    // Setup media\n    setup() {\n        // If there's no media, bail\n        if (!this.media) {\n            this.debug.warn('No media element found!');\n            return;\n        }\n\n        // Add type class\n        utils.toggleClass(this.elements.container, this.config.classNames.type.replace('{0}', this.type), true);\n\n        // Add provider class\n        utils.toggleClass(this.elements.container, this.config.classNames.provider.replace('{0}', this.provider), true);\n\n        // Add video class for embeds\n        // This will require changes if audio embeds are added\n        if (this.isEmbed) {\n            utils.toggleClass(this.elements.container, this.config.classNames.type.replace('{0}', 'video'), true);\n        }\n\n        if (this.supported.ui) {\n            // Check for picture-in-picture support\n            utils.toggleClass(this.elements.container, this.config.classNames.pip.supported, support.pip && this.isHTML5 && this.isVideo);\n\n            // Check for airplay support\n            utils.toggleClass(this.elements.container, this.config.classNames.airplay.supported, support.airplay && this.isHTML5);\n\n            // If there's no autoplay attribute, assume the video is stopped and add state class\n            utils.toggleClass(this.elements.container, this.config.classNames.stopped, this.config.autoplay);\n\n            // Add iOS class\n            utils.toggleClass(this.elements.container, this.config.classNames.isIos, browser.isIos);\n\n            // Add touch class\n            utils.toggleClass(this.elements.container, this.config.classNames.isTouch, support.touch);\n        }\n\n        // Inject the player wrapper\n        if (this.isVideo || this.isYouTube || this.isVimeo) {\n            // Create the wrapper div\n            this.elements.wrapper = utils.createElement('div', {\n                class: this.config.classNames.video,\n            });\n\n            // Wrap the video in a container\n            utils.wrap(this.media, this.elements.wrapper);\n        }\n\n        if (this.isEmbed) {\n            switch (this.provider) {\n                case 'youtube':\n                    youtube.setup.call(this);\n                    break;\n\n                case 'vimeo':\n                    vimeo.setup.call(this);\n                    break;\n\n                default:\n                    break;\n            }\n        } else if (this.isHTML5) {\n            ui.setTitle.call(this);\n        }\n    },\n\n    // Cancel current network requests\n    // See https://github.com/sampotts/plyr/issues/174\n    cancelRequests() {\n        if (!this.isHTML5) {\n            return;\n        }\n\n        // Remove child sources\n        Array.from(this.media.querySelectorAll('source')).forEach(utils.removeElement);\n\n        // Set blank video src attribute\n        // This is to prevent a MEDIA_ERR_SRC_NOT_SUPPORTED error\n        // Info: http://stackoverflow.com/questions/32231579/how-to-properly-dispose-of-an-html5-video-and-close-socket-or-connection\n        this.media.setAttribute('src', this.config.blankVideo);\n\n        // Load the new empty source\n        // This will cancel existing requests\n        // See https://github.com/sampotts/plyr/issues/174\n        this.media.load();\n\n        // Debugging\n        this.debug.log('Cancelled network requests');\n    },\n};\n\nexport default media;\n","// ==========================================================================\n// Plyr source update\n// ==========================================================================\n\nimport { providers } from './types';\nimport utils from './utils';\nimport media from './media';\nimport ui from './ui';\nimport support from './support';\n\nconst source = {\n    // Add elements to HTML5 media (source, tracks, etc)\n    insertElements(type, attributes) {\n        if (utils.is.string(attributes)) {\n            utils.insertElement(type, this.media, {\n                src: attributes,\n            });\n        } else if (utils.is.array(attributes)) {\n            attributes.forEach(attribute => {\n                utils.insertElement(type, this.media, attribute);\n            });\n        }\n    },\n\n    // Update source\n    // Sources are not checked for support so be careful\n    change(input) {\n        if (!utils.is.object(input) || !('sources' in input) || !input.sources.length) {\n            this.debug.warn('Invalid source format');\n            return;\n        }\n\n        // Cancel current network requests\n        media.cancelRequests.call(this);\n\n        // Destroy instance and re-setup\n        this.destroy.call(\n            this,\n            () => {\n                // TODO: Reset menus here\n\n                // Remove elements\n                utils.removeElement(this.media);\n                this.media = null;\n\n                // Reset class name\n                if (utils.is.element(this.elements.container)) {\n                    this.elements.container.removeAttribute('class');\n                }\n\n                // Set the type and provider\n                this.type = input.type;\n                this.provider = !utils.is.empty(input.sources[0].provider) ? input.sources[0].provider : providers.html5;\n\n                // Check for support\n                this.supported = support.check(this.type, this.provider, this.config.inline);\n\n                // Create new markup\n                switch (`${this.provider}:${this.type}`) {\n                    case 'html5:video':\n                        this.media = utils.createElement('video');\n                        break;\n\n                    case 'html5:audio':\n                        this.media = utils.createElement('audio');\n                        break;\n\n                    case 'youtube:video':\n                    case 'vimeo:video':\n                        this.media = utils.createElement('div');\n                        this.embedId = input.sources[0].src;\n                        break;\n\n                    default:\n                        break;\n                }\n\n                // Inject the new element\n                this.elements.container.appendChild(this.media);\n\n                // Autoplay the new source?\n                if (utils.is.boolean(input.autoplay)) {\n                    this.config.autoplay = input.autoplay;\n                }\n\n                // Set attributes for audio and video\n                if (this.isHTML5) {\n                    if (this.config.crossorigin) {\n                        this.media.setAttribute('crossorigin', '');\n                    }\n                    if (this.config.autoplay) {\n                        this.media.setAttribute('autoplay', '');\n                    }\n                    if ('poster' in input) {\n                        this.media.setAttribute('poster', input.poster);\n                    }\n                    if (this.config.loop.active) {\n                        this.media.setAttribute('loop', '');\n                    }\n                    if (this.config.muted) {\n                        this.media.setAttribute('muted', '');\n                    }\n                    if (this.config.inline) {\n                        this.media.setAttribute('playsinline', '');\n                    }\n                }\n\n                // Restore class hook\n                ui.addStyleHook.call(this);\n\n                // Set new sources for html5\n                if (this.isHTML5) {\n                    source.insertElements.call(this, 'source', input.sources);\n                }\n\n                // Set video title\n                this.config.title = input.title;\n\n                // Set up from scratch\n                media.setup.call(this);\n\n                // HTML5 stuff\n                if (this.isHTML5) {\n                    // Setup captions\n                    if ('tracks' in input) {\n                        source.insertElements.call(this, 'track', input.tracks);\n                    }\n\n                    // Load HTML5 sources\n                    this.media.load();\n                }\n\n                // If HTML5 or embed but not fully supported, setupInterface and call ready now\n                if (this.isHTML5 || (this.isEmbed && !this.supported.ui)) {\n                    // Setup interface\n                    ui.build.call(this);\n                }\n            },\n            true\n        );\n    },\n};\n\nexport default source;\n","﻿// ==========================================================================\n// Plyr\n// plyr.js v3.0.0\n// https://github.com/sampotts/plyr\n// License: The MIT License (MIT)\n// ==========================================================================\n\nimport { providers, types } from './types';\nimport defaults from './defaults';\nimport support from './support';\nimport utils from './utils';\n\nimport Console from './console';\nimport Storage from './storage';\n\nimport captions from './captions';\nimport controls from './controls';\nimport fullscreen from './fullscreen';\nimport listeners from './listeners';\nimport media from './media';\nimport source from './source';\nimport ui from './ui';\n\n// Private properties\n// TODO: Use a WeakMap for private globals\n// const globals = new WeakMap();\n\n// Globals\nlet scrollPosition = {\n    x: 0,\n    y: 0,\n};\n\n// Plyr instance\nclass Plyr {\n    constructor(target, options) {\n        this.timers = {};\n        this.ready = false;\n\n        // Set the media element\n        this.media = target;\n\n        // String selector passed\n        if (utils.is.string(this.media)) {\n            this.media = document.querySelectorAll(this.media);\n        }\n\n        // jQuery, NodeList or Array passed, use first element\n        if ((window.jQuery && this.media instanceof jQuery) || utils.is.nodeList(this.media) || utils.is.array(this.media)) {\n            // eslint-disable-next-line\n            this.media = this.media[0];\n        }\n\n        // Set config\n        this.config = utils.extend(\n            {},\n            defaults,\n            options,\n            (() => {\n                try {\n                    return JSON.parse(this.media.getAttribute('data-plyr-config'));\n                } catch (e) {\n                    return {};\n                }\n            })()\n        );\n\n        // Elements cache\n        this.elements = {\n            container: null,\n            buttons: {},\n            display: {},\n            progress: {},\n            inputs: {},\n            settings: {\n                menu: null,\n                panes: {},\n                tabs: {},\n            },\n            captions: null,\n        };\n\n        // Captions\n        this.captions = {\n            active: null,\n            currentTrack: null,\n        };\n\n        // Fullscreen\n        this.fullscreen = {\n            active: false,\n        };\n\n        // Options\n        this.options = {\n            speed: [],\n            quality: [],\n        };\n\n        // Debugging\n        // TODO: move to globals\n        this.debug = new Console(this);\n\n        // Log config options and support\n        this.debug.log('Config', this.config);\n        this.debug.log('Support', support);\n\n        // We need an element to setup\n        if (utils.is.nullOrUndefined(this.media) || !utils.is.element(this.media)) {\n            this.debug.error('Setup failed: no suitable element passed');\n            return;\n        }\n\n        // Bail if the element is initialized\n        if (this.media.plyr) {\n            this.debug.warn('Target already setup');\n            return;\n        }\n\n        // Bail if not enabled\n        if (!this.config.enabled) {\n            this.debug.error('Setup failed: disabled by config');\n            return;\n        }\n\n        // Bail if disabled or no basic support\n        // You may want to disable certain UAs etc\n        if (!support.check().api) {\n            this.debug.error('Setup failed: no support');\n            return;\n        }\n\n        // Cache original element state for .destroy()\n        this.elements.original = this.media.cloneNode(true);\n\n        // Set media type based on tag or data attribute\n        // Supported: video, audio, vimeo, youtube\n        const type = this.media.tagName.toLowerCase();\n\n        // Embed attributes\n        const attributes = {\n            provider: 'data-plyr-provider',\n            id: 'data-plyr-embed-id',\n        };\n\n        // Different setup based on type\n        switch (type) {\n            // TODO: Handle passing an iframe for true progressive enhancement\n            // case 'iframe':\n            case 'div':\n                this.type = types.video; // Audio will come later for external providers\n                this.provider = this.media.getAttribute(attributes.provider);\n                this.embedId = this.media.getAttribute(attributes.id);\n\n                if (utils.is.empty(this.provider) || !Object.keys(providers).includes(this.provider)) {\n                    this.debug.error('Setup failed: Invalid provider');\n                    return;\n                }\n\n                // Try and get the embed id\n                if (utils.is.empty(this.embedId)) {\n                    this.debug.error('Setup failed: Embed ID or URL missing');\n                    return;\n                }\n\n                // Clean up\n                this.media.removeAttribute(attributes.provider);\n                this.media.removeAttribute(attributes.id);\n\n                break;\n\n            case 'video':\n            case 'audio':\n                this.type = type;\n                this.provider = providers.html5;\n\n                if (this.media.hasAttribute('crossorigin')) {\n                    this.config.crossorigin = true;\n                }\n\n                if (this.media.hasAttribute('autoplay')) {\n                    this.config.autoplay = true;\n                }\n\n                if (this.media.hasAttribute('playsinline')) {\n                    this.config.inline = true;\n                }\n\n                if (this.media.hasAttribute('muted')) {\n                    this.config.muted = true;\n                }\n\n                if (this.media.hasAttribute('loop')) {\n                    this.config.loop.active = true;\n                }\n\n                break;\n\n            default:\n                this.debug.error('Setup failed: unsupported type');\n                return;\n        }\n\n        // Setup local storage for user settings\n        this.storage = new Storage(this);\n\n        // Check for support again but with type\n        this.supported = support.check(this.type, this.provider, this.config.inline);\n\n        // If no support for even API, bail\n        if (!this.supported.api) {\n            this.debug.error('Setup failed: no support');\n            return;\n        }\n\n        // Store reference\n        this.media.plyr = this;\n\n        // Wrap media\n        this.elements.container = utils.createElement('div');\n        utils.wrap(this.media, this.elements.container);\n\n        // Allow focus to be captured\n        this.elements.container.setAttribute('tabindex', 0);\n\n        // Global listeners\n        listeners.global.call(this);\n\n        // Add style hook\n        ui.addStyleHook.call(this);\n\n        // Setup media\n        media.setup.call(this);\n\n        // Listen for events if debugging\n        if (this.config.debug) {\n            utils.on(this.elements.container, this.config.events.join(' '), event => {\n                this.debug.log(`event: ${event.type}`);\n            });\n        }\n\n        // Setup interface\n        // If embed but not fully supported, build interface now to avoid flash of controls\n        if (this.isHTML5 || (this.isEmbed && !this.supported.ui)) {\n            ui.build.call(this);\n        }\n    }\n\n    // ---------------------------------------\n    // API\n    // ---------------------------------------\n\n    /**\n     * Types and provider helpers\n     */\n    get isHTML5() {\n        return this.provider === providers.html5;\n    }\n    get isEmbed() {\n        return this.isYouTube || this.isVimeo;\n    }\n    get isYouTube() {\n        return this.provider === providers.youtube;\n    }\n    get isVimeo() {\n        return this.provider === providers.vimeo;\n    }\n    get isVideo() {\n        return this.type === types.video;\n    }\n    get isAudio() {\n        return this.type === types.audio;\n    }\n\n    /**\n     * Play the media\n     */\n    play() {\n        return this.media.play();\n    }\n\n    /**\n     * Pause the media\n     */\n    pause() {\n        if (!this.playing) {\n            return;\n        }\n\n        this.media.pause();\n    }\n\n    /**\n     * Get paused state\n     */\n    get paused() {\n        return this.media.paused;\n    }\n\n    /**\n     * Get playing state\n     */\n    get playing() {\n        return !this.paused && !this.ended && (this.isHTML5 ? this.media.readyState > 2 : true);\n    }\n\n    /**\n     * Get ended state\n     */\n    get ended() {\n        return this.media.ended;\n    }\n\n    /**\n     * Toggle playback based on current status\n     * @param {boolean} input\n     */\n    togglePlay(input) {\n        // Toggle based on current state if nothing passed\n        const toggle = utils.is.boolean(input) ? input : !this.playing;\n\n        if (toggle) {\n            this.play();\n        } else {\n            this.pause();\n        }\n    }\n\n    /**\n     * Stop playback\n     */\n    stop() {\n        this.restart();\n        this.pause();\n    }\n\n    /**\n     * Restart playback\n     */\n    restart() {\n        this.currentTime = 0;\n    }\n\n    /**\n     * Rewind\n     * @param {number} seekTime - how far to rewind in seconds. Defaults to the config.seekTime\n     */\n    rewind(seekTime) {\n        this.currentTime = this.currentTime - (utils.is.number(seekTime) ? seekTime : this.config.seekTime);\n    }\n\n    /**\n     * Fast forward\n     * @param {number} seekTime - how far to fast forward in seconds. Defaults to the config.seekTime\n     */\n    forward(seekTime) {\n        this.currentTime = this.currentTime + (utils.is.number(seekTime) ? seekTime : this.config.seekTime);\n    }\n\n    /**\n     * Seek to a time\n     * @param {number} input - where to seek to in seconds. Defaults to 0 (the start)\n     */\n    set currentTime(input) {\n        let targetTime = 0;\n\n        if (utils.is.number(input)) {\n            targetTime = input;\n        }\n\n        // Normalise targetTime\n        if (targetTime < 0) {\n            targetTime = 0;\n        } else if (targetTime > this.duration) {\n            targetTime = this.duration;\n        }\n\n        // Set\n        this.media.currentTime = targetTime.toFixed(4);\n\n        // Logging\n        this.debug.log(`Seeking to ${this.currentTime} seconds`);\n    }\n\n    /**\n     * Get current time\n     */\n    get currentTime() {\n        return Number(this.media.currentTime);\n    }\n\n    /**\n     * Get seeking status\n     */\n    get seeking() {\n        return this.media.seeking;\n    }\n\n    /**\n     * Get the duration of the current media\n     */\n    get duration() {\n        // Faux duration set via config\n        const fauxDuration = parseInt(this.config.duration, 10);\n\n        // True duration\n        const realDuration = Number(this.media.duration);\n\n        // If custom duration is funky, use regular duration\n        return !Number.isNaN(fauxDuration) ? fauxDuration : realDuration;\n    }\n\n    /**\n     * Set the player volume\n     * @param {number} value - must be between 0 and 1. Defaults to the value from local storage and config.volume if not set in storage\n     */\n    set volume(value) {\n        let volume = value;\n        const max = 1;\n        const min = 0;\n\n        if (utils.is.string(volume)) {\n            volume = Number(volume);\n        }\n\n        // Load volume from storage if no value specified\n        if (!utils.is.number(volume)) {\n            volume = this.storage.get('volume');\n        }\n\n        // Use config if all else fails\n        if (!utils.is.number(volume)) {\n            ({ volume } = this.config);\n        }\n\n        // Maximum is volumeMax\n        if (volume > max) {\n            volume = max;\n        }\n        // Minimum is volumeMin\n        if (volume < min) {\n            volume = min;\n        }\n\n        // Update config\n        this.config.volume = volume;\n\n        // Set the player volume\n        this.media.volume = volume;\n\n        // If muted, and we're increasing volume, reset muted state\n        if (this.muted && volume > 0) {\n            this.muted = false;\n        }\n    }\n\n    /**\n     * Get the current player volume\n     */\n    get volume() {\n        return this.media.volume;\n    }\n\n    /**\n     * Increase volume\n     * @param {boolean} step - How much to decrease by (between 0 and 1)\n     */\n    increaseVolume(step) {\n        const volume = this.media.muted ? 0 : this.volume;\n        this.volume = volume + (utils.is.number(step) ? step : 1);\n    }\n\n    /**\n     * Decrease volume\n     * @param {boolean} step - How much to decrease by (between 0 and 1)\n     */\n    decreaseVolume(step) {\n        const volume = this.media.muted ? 0 : this.volume;\n        this.volume = volume - (utils.is.number(step) ? step : 1);\n    }\n\n    /**\n     * Set muted state\n     * @param {boolean} mute\n     */\n    set muted(mute) {\n        let toggle = mute;\n\n        // Load muted state from storage\n        if (!utils.is.boolean(toggle)) {\n            toggle = this.storage.get('muted');\n        }\n\n        // Use config if all else fails\n        if (!utils.is.boolean(toggle)) {\n            toggle = this.config.muted;\n        }\n\n        // Update config\n        this.config.muted = toggle;\n\n        // Set mute on the player\n        this.media.muted = toggle;\n    }\n\n    /**\n     * Get current muted state\n     */\n    get muted() {\n        return this.media.muted;\n    }\n\n    /**\n     * Check if the media has audio\n     */\n    get hasAudio() {\n        // Assume yes for all non HTML5 (as we can't tell...)\n        if (!this.isHTML5) {\n            return true;\n        }\n\n        // Get audio tracks\n        return this.media.mozHasAudio || Boolean(this.media.webkitAudioDecodedByteCount) || Boolean(this.media.audioTracks && this.media.audioTracks.length);\n    }\n\n    /**\n     * Set playback speed\n     * @param {decimal} speed - the speed of playback (0.5-2.0)\n     */\n    set speed(input) {\n        let speed = null;\n\n        if (utils.is.number(input)) {\n            speed = input;\n        }\n\n        if (!utils.is.number(speed)) {\n            speed = this.storage.get('speed');\n        }\n\n        if (!utils.is.number(speed)) {\n            speed = this.config.speed.selected;\n        }\n\n        // Set min/max\n        if (speed < 0.1) {\n            speed = 0.1;\n        }\n        if (speed > 2.0) {\n            speed = 2.0;\n        }\n\n        if (!this.config.speed.options.includes(speed)) {\n            this.debug.warn(`Unsupported speed (${speed})`);\n            return;\n        }\n\n        // Update config\n        this.config.speed.selected = speed;\n\n        // Set media speed\n        this.media.playbackRate = speed;\n    }\n\n    /**\n     * Get current playback speed\n     */\n    get speed() {\n        return this.media.playbackRate;\n    }\n\n    /**\n     * Set playback quality\n     * Currently YouTube only\n     * @param {string} input - Quality level\n     */\n    set quality(input) {\n        let quality = null;\n\n        if (utils.is.string(input)) {\n            quality = input;\n        }\n\n        if (!utils.is.string(quality)) {\n            quality = this.storage.get('quality');\n        }\n\n        if (!utils.is.string(quality)) {\n            quality = this.config.quality.selected;\n        }\n\n        if (!this.options.quality.includes(quality)) {\n            this.debug.warn(`Unsupported quality option (${quality})`);\n            return;\n        }\n\n        // Update config\n        this.config.quality.selected = quality;\n\n        // Set quality\n        this.media.quality = quality;\n    }\n\n    /**\n     * Get current quality level\n     */\n    get quality() {\n        return this.media.quality;\n    }\n\n    /**\n     * Toggle loop\n     * TODO: Finish fancy new logic. Set the indicator on load as user may pass loop as config\n     * @param {boolean} input - Whether to loop or not\n     */\n    set loop(input) {\n        const toggle = utils.is.boolean(input) ? input : this.config.loop.active;\n        this.config.loop.active = toggle;\n        this.media.loop = toggle;\n\n        // Set default to be a true toggle\n        /* const type = ['start', 'end', 'all', 'none', 'toggle'].includes(input) ? input : 'toggle';\n\n        switch (type) {\n            case 'start':\n                if (this.config.loop.end && this.config.loop.end <= this.currentTime) {\n                    this.config.loop.end = null;\n                }\n                this.config.loop.start = this.currentTime;\n                // this.config.loop.indicator.start = this.elements.display.played.value;\n                break;\n\n            case 'end':\n                if (this.config.loop.start >= this.currentTime) {\n                    return this;\n                }\n                this.config.loop.end = this.currentTime;\n                // this.config.loop.indicator.end = this.elements.display.played.value;\n                break;\n\n            case 'all':\n                this.config.loop.start = 0;\n                this.config.loop.end = this.duration - 2;\n                this.config.loop.indicator.start = 0;\n                this.config.loop.indicator.end = 100;\n                break;\n\n            case 'toggle':\n                if (this.config.loop.active) {\n                    this.config.loop.start = 0;\n                    this.config.loop.end = null;\n                } else {\n                    this.config.loop.start = 0;\n                    this.config.loop.end = this.duration - 2;\n                }\n                break;\n\n            default:\n                this.config.loop.start = 0;\n                this.config.loop.end = null;\n                break;\n        } */\n    }\n\n    /**\n     * Get current loop state\n     */\n    get loop() {\n        return this.media.loop;\n    }\n\n    /**\n     * Set new media source\n     * @param {object} input - The new source object (see docs)\n     */\n    set source(input) {\n        source.change.call(this, input);\n    }\n\n    /**\n     * Get current source\n     */\n    get source() {\n        return this.media.currentSrc;\n    }\n\n    /**\n     * Set the poster image for a HTML5 video\n     * @param {input} - the URL for the new poster image\n     */\n    set poster(input) {\n        if (!this.isHTML5 || !this.isVideo) {\n            this.debug.warn('Poster can only be set on HTML5 video');\n            return;\n        }\n\n        if (utils.is.string(input)) {\n            this.media.setAttribute('poster', input);\n        }\n    }\n\n    /**\n     * Get the current poster image\n     */\n    get poster() {\n        if (!this.isHTML5 || !this.isVideo) {\n            return null;\n        }\n\n        return this.media.getAttribute('poster');\n    }\n\n    /**\n     * Set the autoplay state\n     * @param {boolean} input - Whether to autoplay or not\n     */\n    set autoplay(input) {\n        const toggle = utils.is.boolean(input) ? input : this.config.autoplay;\n        this.config.autoplay = toggle;\n    }\n\n    /**\n     * Get the current autoplay state\n     */\n    get autoplay() {\n        return this.config.autoplay;\n    }\n\n    /**\n     * Toggle captions\n     * @param {boolean} input - Whether to enable captions\n     */\n    toggleCaptions(input) {\n        // If there's no full support, or there's no caption toggle\n        if (!this.supported.ui || !utils.is.element(this.elements.buttons.captions)) {\n            return;\n        }\n\n        // If the method is called without parameter, toggle based on current value\n        const show = utils.is.boolean(input) ? input : this.elements.container.className.indexOf(this.config.classNames.captions.active) === -1;\n\n        // Nothing to change...\n        if (this.captions.active === show) {\n            return;\n        }\n\n        // Set global\n        this.captions.active = show;\n\n        // Toggle state\n        utils.toggleState(this.elements.buttons.captions, this.captions.active);\n\n        // Add class hook\n        utils.toggleClass(this.elements.container, this.config.classNames.captions.active, this.captions.active);\n\n        // Trigger an event\n        utils.dispatchEvent.call(this, this.media, this.captions.active ? 'captionsenabled' : 'captionsdisabled');\n    }\n\n    /**\n     * Set the captions language\n     * @param {string} - Two character ISO language code (e.g. EN, FR, PT, etc)\n     */\n    set language(input) {\n        // Nothing specified\n        if (!utils.is.string(input)) {\n            return;\n        }\n\n        // Toggle captions based on input\n        this.toggleCaptions(!utils.is.empty(input));\n\n        // If empty string is passed, assume disable captions\n        if (utils.is.empty(input)) {\n            return;\n        }\n\n        // Normalize\n        const language = input.toLowerCase();\n\n        // If nothing to change, bail\n        if (this.language === language) {\n            return;\n        }\n\n        // Update config\n        this.captions.language = language;\n\n        // Clear caption\n        captions.setText.call(this, null);\n\n        // Update captions\n        captions.setLanguage.call(this);\n\n        // Trigger an event\n        utils.dispatchEvent.call(this, this.media, 'languagechange');\n    }\n\n    /**\n     * Get the current captions language\n     */\n    get language() {\n        return this.captions.language;\n    }\n\n    /**\n     * Toggle fullscreen playback\n     * Requires user input event\n     * @param {event} event\n     */\n    toggleFullscreen(event) {\n        // Check for native support\n        if (fullscreen.enabled) {\n            if (utils.is.event(event) && event.type === fullscreen.eventType) {\n                // If it's a fullscreen change event, update the state\n                this.fullscreen.active = fullscreen.isFullScreen(this.elements.container);\n            } else {\n                // Else it's a user request to enter or exit\n                if (!this.fullscreen.active) {\n                    fullscreen.requestFullScreen(this.elements.container);\n                } else {\n                    fullscreen.cancelFullScreen();\n                }\n\n                return;\n            }\n        } else {\n            // Otherwise, it's a simple toggle\n            this.fullscreen.active = !this.fullscreen.active;\n\n            // Add class hook\n            utils.toggleClass(this.elements.container, this.config.classNames.fullscreen.fallback, this.fullscreen.active);\n\n            // Make sure we don't lose scroll position\n            if (this.fullscreen.active) {\n                scrollPosition = {\n                    x: window.pageXOffset || 0,\n                    y: window.pageYOffset || 0,\n                };\n            } else {\n                window.scrollTo(scrollPosition.x, scrollPosition.y);\n            }\n\n            // Bind/unbind escape key\n            document.body.style.overflow = this.fullscreen.active ? 'hidden' : '';\n        }\n\n        // Set button state\n        if (utils.is.element(this.elements.buttons.fullscreen)) {\n            utils.toggleState(this.elements.buttons.fullscreen, this.fullscreen.active);\n        }\n\n        // Trigger an event\n        utils.dispatchEvent.call(this, this.media, this.fullscreen.active ? 'enterfullscreen' : 'exitfullscreen');\n    }\n\n    /**\n     * Toggle picture-in-picture playback on WebKit/MacOS\n     * TODO: update player with state, support, enabled\n     * TODO: detect outside changes\n     */\n    set pip(input) {\n        const states = {\n            pip: 'picture-in-picture',\n            inline: 'inline',\n        };\n\n        // Bail if no support\n        if (!support.pip) {\n            return;\n        }\n\n        // Toggle based on current state if not passed\n        const toggle = utils.is.boolean(input) ? input : this.pip === states.inline;\n\n        // Toggle based on current state\n        this.media.webkitSetPresentationMode(toggle ? states.pip : states.inline);\n    }\n\n    /**\n     * Get the current picture-in-picture state\n     */\n    get pip() {\n        if (!support.pip) {\n            return null;\n        }\n\n        return this.media.webkitPresentationMode;\n    }\n\n    /**\n     * Trigger the airplay dialog\n     * TODO: update player with state, support, enabled\n     */\n    airplay() {\n        // Show dialog if supported\n        if (support.airplay) {\n            this.media.webkitShowPlaybackTargetPicker();\n        }\n    }\n\n    /**\n     * Toggle the player controls\n     * @param {boolean} toggle - Whether to show the controls\n     */\n    toggleControls(toggle) {\n        // We need controls of course...\n        if (!utils.is.element(this.elements.controls)) {\n            return;\n        }\n\n        // Don't hide if no UI support or it's audio\n        if (!this.supported.ui || this.isAudio) {\n            return;\n        }\n\n        let delay = 0;\n        let show = toggle;\n        let isEnterFullscreen = false;\n\n        // Get toggle state if not set\n        if (!utils.is.boolean(toggle)) {\n            if (utils.is.event(toggle)) {\n                // Is the enter fullscreen event\n                isEnterFullscreen = toggle.type === 'enterfullscreen';\n\n                // Whether to show controls\n                show = [\n                    'mouseenter',\n                    'mousemove',\n                    'touchstart',\n                    'touchmove',\n                    'focusin',\n                ].includes(toggle.type);\n\n                // Delay hiding on move events\n                if ([\n                    'mousemove',\n                    'touchmove',\n                    'touchend',\n                ].includes(toggle.type)) {\n                    delay = 2000;\n                }\n\n                // Delay a little more for keyboard users\n                if (toggle.type === 'focusin') {\n                    delay = 3000;\n                    utils.toggleClass(this.elements.controls, this.config.classNames.noTransition, true);\n                }\n            } else {\n                show = utils.hasClass(this.elements.container, this.config.classNames.hideControls);\n            }\n        }\n\n        // Clear timer on every call\n        window.clearTimeout(this.timers.controls);\n\n        // If the mouse is not over the controls, set a timeout to hide them\n        if (show || this.paused || this.loading) {\n            // Check if controls toggled\n            const toggled = utils.toggleClass(this.elements.container, this.config.classNames.hideControls, false);\n\n            // Trigger event\n            if (toggled) {\n                utils.dispatchEvent.call(this, this.media, 'controlsshown');\n            }\n\n            // Always show controls when paused or if touch\n            if (this.paused || this.loading) {\n                return;\n            }\n\n            // Delay for hiding on touch\n            if (support.touch) {\n                delay = 3000;\n            }\n        }\n\n        // If toggle is false or if we're playing (regardless of toggle),\n        // then set the timer to hide the controls\n        if (!show || this.playing) {\n            this.timers.controls = window.setTimeout(() => {\n                /* this.debug.warn({\n                    pressed: this.elements.controls.pressed,\n                    hover: this.elements.controls.pressed,\n                    playing: this.playing,\n                    paused: this.paused,\n                    loading: this.loading,\n                }); */\n\n                // If the mouse is over the controls (and not entering fullscreen), bail\n                if ((this.elements.controls.pressed || this.elements.controls.hover) && !isEnterFullscreen) {\n                    return;\n                }\n\n                // Restore transition behaviour\n                if (!utils.hasClass(this.elements.container, this.config.classNames.hideControls)) {\n                    utils.toggleClass(this.elements.controls, this.config.classNames.noTransition, false);\n                }\n\n                // Check if controls toggled\n                const toggled = utils.toggleClass(this.elements.container, this.config.classNames.hideControls, true);\n\n                // Trigger event and close menu\n                if (toggled) {\n                    utils.dispatchEvent.call(this, this.media, 'controlshidden');\n\n                    if (this.config.controls.includes('settings') && !utils.is.empty(this.config.settings)) {\n                        controls.toggleMenu.call(this, false);\n                    }\n                }\n            }, delay);\n        }\n    }\n\n    /**\n     * Add event listeners\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     */\n    on(event, callback) {\n        utils.on(this.elements.container, event, callback);\n    }\n\n    /**\n     * Remove event listeners\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     */\n    off(event, callback) {\n        utils.off(this.elements.container, event, callback);\n    }\n\n\n\n    /**\n     * Destroy an instance\n     * Event listeners are removed when elements are removed\n     * http://stackoverflow.com/questions/12528049/if-a-dom-element-is-removed-are-its-listeners-also-removed-from-memory\n     * @param {function} callback - Callback for when destroy is complete\n     * @param {boolean} soft - Whether it's a soft destroy (for source changes etc)\n     */\n    destroy(callback, soft = false) {\n        const done = () => {\n            // Reset overflow (incase destroyed while in fullscreen)\n            document.body.style.overflow = '';\n\n            // GC for embed\n            this.embed = null;\n            this.embedId = null;\n\n            // If it's a soft destroy, make minimal changes\n            if (soft) {\n                if (Object.keys(this.elements).length) {\n                    // Remove buttons\n                    if (this.elements.buttons && this.elements.buttons.play) {\n                        Array.from(this.elements.buttons.play).forEach(button => utils.removeElement(button));\n                    }\n\n                    // Remove others\n                    utils.removeElement(this.elements.captions);\n                    utils.removeElement(this.elements.controls);\n                    utils.removeElement(this.elements.wrapper);\n\n                    // Clear for GC\n                    this.elements.buttons.play = null;\n                    this.elements.captions = null;\n                    this.elements.controls = null;\n                    this.elements.wrapper = null;\n                }\n\n                // Callback\n                if (utils.is.function(callback)) {\n                    callback();\n                }\n            } else {\n                // Replace the container with the original element provided\n                const parent = this.elements.container.parentNode;\n\n                if (utils.is.element(parent)) {\n                    parent.replaceChild(this.elements.original, this.elements.container);\n                }\n\n                // Event\n                utils.dispatchEvent.call(this, this.elements.original, 'destroyed', true);\n\n                // Callback\n                if (utils.is.function(callback)) {\n                    callback.call(this.elements.original);\n                }\n\n                // Clear for GC\n                this.elements = null;\n            }\n        };\n\n        // Type specific stuff\n        switch (`${this.provider}:${this.type}`) {\n            case 'html5:video':\n            case 'html5:audio':\n                // Restore native video controls\n                ui.toggleNativeControls.call(this, true);\n\n                // Clean up\n                done();\n\n                break;\n\n            case 'youtube:video':\n                // Clear timers\n                window.clearInterval(this.timers.buffering);\n                window.clearInterval(this.timers.playing);\n\n                // Destroy YouTube API\n                this.embed.destroy();\n\n                // Clean up\n                done();\n\n                break;\n\n            case 'vimeo:video':\n                // Destroy Vimeo API\n                // then clean up (wait, to prevent postmessage errors)\n                this.embed.unload().then(done);\n\n                // Vimeo does not always return\n                window.setTimeout(done, 200);\n\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    /**\n     * Check for support for a mime type (HTML5 only)\n     * @param {string} type - Mime type\n     */\n    supports(type) {\n        return support.mime.call(this, type);\n    }\n\n    /**\n     * Check for support\n     * @param {string} type - Player type (audio/video)\n     * @param {string} provider - Provider (html5/youtube/vimeo)\n     * @param {bool} inline - Where player has `playsinline` sttribute\n     */\n    static supported(type, provider, inline) {\n        return support.check(type, provider, inline);\n    }\n\n    /**\n     * Load an SVG sprite into the page\n     * @param {string} url - URL for the SVG sprite\n     * @param {string} [id] - Unique ID\n     */\n    static loadSprite(url, id) {\n        return utils.loadSprite(url, id);\n    }\n}\n\nexport default Plyr;\n"],"names":["providers","types","defaults","window","navigator","language","split","utils","input","this","instanceof","Plyr","getConstructor","Object","Number","isNaN","String","Boolean","Function","nullOrUndefined","Array","isArray","WeakMap","NodeList","Element","Text","Event","TextTrackCue","VTTCue","TextTrack","string","kind","array","nodeList","length","object","keys","constructor","document","documentMode","documentElement","style","test","userAgent","platform","url","callback","current","querySelector","callbacks","push","element","createElement","is","function","addEventListener","forEach","cb","call","event","src","first","getElementsByTagName","parentNode","insertBefore","id","updateSprite","data","innerHTML","body","childNodes","hasId","querySelectorAll","container","toggleHidden","setAttribute","support","storage","cached","localStorage","getItem","JSON","parse","content","then","response","ok","text","setItem","stringify","catch","prefix","Math","floor","random","self","top","e","elements","wrapper","targets","from","reverse","index","child","cloneNode","parent","sibling","nextSibling","appendChild","type","attributes","setAttributes","textContent","target","removeChild","lastChild","empty","key","sel","existingAttributes","existing","selector","s","trim","className","replace","parts","value","charAt","class","toggle","contains","classList","removeAttribute","prototype","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","includes","controls","getElement","config","selectors","buttons","getElements","play","pause","restart","rewind","forward","mute","pip","airplay","settings","captions","fullscreen","progress","inputs","seek","volume","display","buffer","duration","currentTime","seekTooltip","classNames","tooltip","error","debug","warn","toggleNativeControls","focused","activeElement","focusable","last","on","keyCode","_this","active","getFocusElement","shiftKey","focus","preventDefault","passive","capture","Node","toggleListener","events","options","boolean","passiveListeners","bubbles","detail","CustomEvent","assign","dispatchEvent","pressed","getAttribute","state","max","toFixed","sources","source","shift","extend","match","RegExp","$2","number","map","encodeURIComponent","join","fragment","createDocumentFragment","firstChild","innerText","width","height","ratio","getRatio","w","h","find","undefined","setTimeout","offsetHeight","provider","inline","api","ui","browser","getBrowser","playsInline","isIPhone","video","rangeInput","audio","webkitSetPresentationMode","WebKitPlaybackTargetAvailabilityEvent","media","isHTML5","canPlayType","isVideo","isAudio","supported","defineProperty","range","transitionEnd","matchMedia","noop","Console","player","enabled","console","log","bind","Storage","store","json","get","removeItem","cancelFullScreen","some","pre","msExitFullscreen","msFullscreenEnabled","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","fullscreenElement","mozFullScreenElement","requestFullScreen","nativeSupport","fallback","inFrame","toggleClass","toggleState","trapFocus","listeners","handleKey","code","which","getKeyCode","repeat","altKey","ctrlKey","metaKey","editable","stopPropagation","togglePlay","increaseVolume","decreaseVolume","muted","toggleFullscreen","toggleCaptions","loop","keyboard","global","tabFocus","hideControls","toggleControls","eventType","timeUpdate","durationUpdate","_this2","hasAudio","showPosterOnEnd","load","updateProgress","updateVolume","checkPlaying","checkLoading","clickToPlay","touch","paused","ended","disableContextMenu","set","updateSetting","speed","quality","concat","inputEvent","isIE","proxy","handlerKey","defaultHandler","customHandler","_this3","defaultPrevented","toggleMenu","form","parseFloat","showTab","toggleInvert","invertTime","isWebkit","updateRangeFill","updateSeekTooltip","hover","inverted","webkitDirectionInvertedFromDevice","direction","deltaY","deltaX","uiSupported","removeElement","inject","setup","ready","setTitle","label","i18n","title","isEmbed","iframe","frameTitle","playing","stopped","button","loading","timers","setRange","nodeValue","getPercentage","buffered","end","setProgress","time","format","slice","getHours","parseInt","hours","mins","getMinutes","secs","getSeconds","invert","updateTimeDisplay","seeking","displayDuration","styleSheet","sheet","percentage","styles","rules","findIndex","rule","selectorText","deleteRule","insertRule","iconUrl","indexOf","svg4everybody","namespace","getIconUrl","iconPath","absolute","iconPrefix","icon","createElementNS","use","path","setAttributeNS","attr","hidden","badge","menu","buttonType","labelPressed","iconPressed","control","createIcon","createLabel","getAttributesFromSelector","suffix","played","toLowerCase","list","checked","item","radio","faux","aria-hidden","insertAdjacentHTML","tooltips","percent","clientRect","getBoundingClientRect","visible","pageX","left","hasClass","setting","tab","tabs","pane","panes","filter","isYouTube","toggleTab","emptyElement","createMenuItem","getLabel","createBadge","getBadge","getLanguage","default","textTracks","getTracks","none","currentTrack","getCurrentTrack","track","disabled","hasTracks","tracks","toUpperCase","unshift","show","isMenuItem","isButton","open","clone","position","opacity","name","scrollWidth","scrollHeight","getElementById","transitions","reducedMotion","size","getTabSize","restore","propertyName","off","createButton","createRange","createProgress","createTime","inner","home","_this4","back","setSpeedMenu","loadSprite","seekTime","create","findElements","repaint","labels","_this5","stored","setCaptionsMenu","insertAfter","setLanguage","setCue","mode","activeCues","isVimeo","embed","enableTextTrack","cue","setText","getCueAsHTML","caption","youtube","videoId","parseYouTubeId","embedId","containers","setAspectRatio","generateId","YT","loadScript","urls","onYouTubeReadyCallbacks","onYouTubeIframeAPIReady","getVideoData","google","result","items","snippet","paddingBottom","Player","autoplay","location","hostname","href","message","instance","getPlaybackQuality","playbackRate","getPlaybackRate","getTitle","playVideo","pauseVideo","stop","stopVideo","getDuration","getCurrentTime","seekTo","setPlaybackRate","setPlaybackQuality","setVolume","getVideoUrl","getAvailablePlaybackRates","clearInterval","buffering","setInterval","getVideoLoadedFraction","lastBuffered","build","setQualityMenu","getAvailableQualityLevels","vimeo","Vimeo","padding","offset","transform","params","buildUrlParameters","parseVimeoId","setCurrentTime","selected","setLoop","currentSrc","all","getVideoWidth","getVideoHeight","getAspectRatio","dimensions","setAutopause","autopause","getVideoTitle","getTextTracks","cues","stripHTML","seconds","isIos","isTouch","wrap","blankVideo","insertElement","attribute","cancelRequests","destroy","html5","check","crossorigin","poster","addStyleHook","insertElements","scrollPosition","jQuery","plyr","original","tagName","hasAttribute","step","isFullScreen","pageXOffset","pageYOffset","scrollTo","x","y","overflow","webkitShowPlaybackTargetPicker","delay","isEnterFullscreen","noTransition","clearTimeout","soft","done","replaceChild","unload","mime","readyState","targetTime","fauxDuration","realDuration","mozHasAudio","webkitAudioDecodedByteCount","audioTracks","change","states","webkitPresentationMode"],"mappings":"uLAIA,IAAaA,SACF,gBACE,gBACF,SAGEC,SACF,cACA,SCXLC,YAEO,QAGF,UAGA,YAGG,aAGC,WAGD,UAGF,SACD,WAGG,sBAIO,cAGL,gBAGE,QAGP,oBAGM,gBAGC,mBAGG,sBAGG,cAGR,aACA,eACH,iDAGG,wDAIC,mBAEL,SACA,SACA,SACA,QACA,QACA,SACA,QACA,OACA,0BAMI,mBAOE,WAEN,GACA,IACA,EACA,KACA,IACA,KACA,uBAMK,UACD,uBAKE,QACJ,qBAKE,WACEC,OAAOC,UAAUC,SAASC,MAAM,KAAK,yBAKtC,YACC,qBAKD,MACJ,kBAKL,aACA,OACA,WACA,eACA,OACA,SACA,WACA,WACA,MACA,UACA,wBAGA,WACA,UACA,uBAKS,iBACD,8BACF,aACC,gBACE,+BACH,cACE,kBACE,uBACG,wBACH,kBACF,cACF,cACE,wBACQ,kCACC,mCACA,kCACD,6BACJ,8BACF,oBACA,iBACH,gBACE,eACH,aACC,YACF,UACA,YACE,aACD,gBACI,6BAMD,uDAGA,uDAMH,UACA,WACC,aACE,YACD,aACC,UACH,YACE,cACE,gBACE,SACP,aACI,WACF,aACE,UACH,cACI,sBAQV,WACA,UACA,UACA,UACA,UACA,iBACA,YACA,aACA,iBACA,aACA,eACA,OACA,QACA,QACA,UACA,SACA,UACA,aACA,8BAIA,iBACA,kBACA,mBACA,iBACA,iBACA,gBACA,sBAIA,gBACA,wCAMU,uDACC,4BAEI,aACF,0BAEL,4BAEE,2BACC,8BACE,+BACD,+BACC,kCACH,8BACI,oCACE,+BACP,4BACI,iCACC,8BACJ,mCAGA,4BACE,6BACD,+BACG,iCACD,8CAGI,gCACH,+BACF,iCACA,+BACF,+BACE,mCAEF,2BACA,gCAEG,oDAMN,4BACA,4BACE,qBACH,qBACI,oBACD,wBACA,wBACA,sBACF,sBACE,uBACD,6BACM,4BACP,uBACE,6BACI,6BACC,kCAEH,0BACA,mBACD,qCAGG,gCACD,6CAGC,oCACC,4CAGC,6BACH,uCAGG,iCACH,iCAEF,gCAKF,g3CC/UVC,qBA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"}
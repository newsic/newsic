{"version":3,"sources":["src/js/types.js","src/js/support.js","src/js/defaults.js","src/js/utils.js","src/js/console.js","src/js/fullscreen.js","src/js/captions.js","src/js/ui.js","src/js/controls.js","src/js/listeners.js","src/js/storage.js","src/js/plugins/ads.js","src/js/plugins/youtube.js","src/js/plugins/vimeo.js","src/js/media.js","src/js/source.js","src/js/plyr.js"],"names":["range","providers","types","defaults","window","navigator","language","split","utils","input","this","instanceof","Plyr","getConstructor","Object","Number","isNaN","String","Boolean","Function","nullOrUndefined","Array","isArray","WeakMap","NodeList","Element","Text","Event","TextTrackCue","VTTCue","TextTrack","string","kind","test","array","nodeList","length","object","keys","constructor","document","documentMode","documentElement","style","userAgent","platform","url","responseType","arguments","undefined","Promise","resolve","reject","request","XMLHttpRequest","addEventListener","JSON","parse","responseText","e","response","Error","statusText","open","send","current","querySelector","callbacks","push","element","createElement","errors","event","forEach","cb","call","err","src","first","getElementsByTagName","parentNode","insertBefore","id","is","hasId","querySelectorAll","container","toggleHidden","setAttribute","support","storage","cached","localStorage","getItem","data","content","fetch","then","result","empty","setItem","stringify","catch","updateSprite","innerHTML","body","childNodes","prefix","Math","floor","random","self","top","elements","wrapper","targets","from","reverse","index","child","cloneNode","parent","sibling","nextSibling","appendChild","type","attributes","text","setAttributes","textContent","target","removeElement","removeChild","lastChild","newChild","oldChild","replaceChild","key","sel","existingAttributes","existing","s","selector","trim","className","replace","parts","value","charAt","class","toggle","contains","classList","removeAttribute","prototype","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","includes","controls","getElement","config","selectors","buttons","getElements","play","pause","restart","rewind","forward","mute","pip","airplay","settings","captions","fullscreen","progress","inputs","seek","volume","display","buffer","duration","currentTime","seekTooltip","classNames","tooltip","error","debug","warn","toggleNativeControls","focused","activeElement","focusable","last","trap","keyCode","getFocusElement","shiftKey","focus","preventDefault","on","off","callback","passive","capture","function","Node","toggleListener","events","options","boolean","passiveListeners","bubbles","detail","CustomEvent","assign","plyr","dispatchEvent","toggleState","pressed","getAttribute","state","max","toFixed","parseInt","time","displayHours","inverted","number","formatTime","format","slice","hours","getHours","mins","getMinutes","secs","getSeconds","sources","_len","_key","source","shift","defineProperty","extend","apply","concat","toConsumableArray","youtube","vimeo","match","RegExp","$2","parser","href","search","startsWith","parseUrl","indexOf","reduce","params","hash","_hash$split2","val","decodeURIComponent","map","encodeURIComponent","join","fragment","createDocumentFragment","firstChild","innerText","width","height","ratio","getRatio","w","h","find","offsetHeight","provider","inline","api","ui","browser","getBrowser","playsInline","isIPhone","video","rangeInput","audio","webkitSetPresentationMode","WebKitPlaybackTargetAvailabilityEvent","media","isHTML5","canPlayType","isVideo","isAudio","supported","transitionEndEvent","matchMedia","noop","Console","enabled","console","log","bind","onChange","button","player","active","isIos","trapFocus","toggleFallback","scrollPosition","scrollX","scrollY","scrollTo","x","y","overflow","toggleClass","fallback","Fullscreen","_this","stopPropagation","update","native","iosNative","playing","webkitEnterFullscreen","requestFullScreen","webkitExitFullscreen","cancelFullScreen","exit","enter","inFrame","fullscreenElement","hasClass","fullscreenEnabled","webkitFullscreenEnabled","mozFullScreenEnabled","msFullscreenEnabled","some","pre","msExitFullscreen","stored","get","toLowerCase","isYouTube","textTracks","setCaptionsMenu","getAttributesFromSelector","insertAfter","getTracks","tracks","isIE","URL","track","hostname","location","protocol","blob","createObjectURL","setLanguage","show","setCue","mode","currentTrack","getCurrentTrack","activeCues","isVimeo","embed","enableTextTrack","filter","_this2","cue","setText","getCueAsHTML","emptyElement","caption","uiSupported","listeners","inject","setup","muted","speed","loop","quality","timeUpdate","checkPlaying","ready","setTitle","label","i18n","title","isEmbed","iframe","frameTitle","stopped","paused","toggleControls","loading","timers","setTimeout","failed","networkState","_this3","setRange","updateRangeFill","nodeValue","buffered","getPercentage","_this4","end","setProgress","invert","invertTime","updateTimeDisplay","seeking","updateProgress","hasDuration","displayDuration","updateSeekTooltip","isWebkit","setProperty","iconUrl","svg4everybody","getIconUrl","iconPath","absolute","iconPrefix","icon","createElementNS","use","path","setAttributeNS","attr","hidden","badge","menu","buttonType","labelPressed","iconPressed","control","createIcon","createLabel","suffix","played","list","checked","item","radio","faux","aria-hidden","insertAdjacentHTML","tooltips","percent","clientRect","getBoundingClientRect","visible","pageX","left","parseFloat","setting","tab","tabs","pane","panes","toggleTab","createMenuItem","getLabel","createBadge","getBadge","updateSetting","getLanguage","default","none","disabled","hasTracks","toUpperCase","unshift","form","isMenuItem","isButton","clone","position","opacity","name","scrollWidth","scrollHeight","getElementById","transitions","reducedMotion","size","getTabSize","restore","propertyName","createButton","createRange","createProgress","createTime","inner","home","back","setSpeedMenu","loadSprite","seekTime","create","findElements","repaint","labels","_this5","Listeners","lastKey","handleKey","toggleMenu","code","which","repeat","altKey","ctrlKey","metaKey","editable","togglePlay","increaseVolume","decreaseVolume","toggleCaptions","keyboard","global","tabFocus","hideControls","durationUpdate","hasAudio","showPosterOnEnd","load","updateVolume","checkLoading","clickToPlay","touch","ended","disableContextMenu","set","inputEvent","proxy","handlerKey","defaultHandler","customHandler","defaultPrevented","showTab","toggleInvert","hover","webkitDirectionInvertedFromDevice","direction","deltaY","deltaX","Storage","store","json","removeItem","Ads","publisherId","ads","initialized","manager","loader","cuePoints","safetyTimer","countdownTimer","managerPromise","google","ima","loadScript","urls","googleIMA","trigger","startSafetyTimer","clearSafetyTimer","setupIMA","setVpaidMode","ImaSdkSettings","VpaidMode","ENABLED","setLocale","displayContainer","AdDisplayContainer","requestAds","AdsLoader","AdsManagerLoadedEvent","Type","ADS_MANAGER_LOADED","onAdsManagerLoaded","AdErrorEvent","AD_ERROR","onAdError","AdsRequest","adTagUrl","tagUrl","linearAdSlotWidth","offsetWidth","linearAdSlotHeight","nonLinearAdSlotWidth","nonLinearAdSlotHeight","forceNonLinearFullSlot","setInterval","getRemainingTime","advertisement","AdsRenderingSettings","restoreCustomPlaybackStateOnAdBreakComplete","enablePreloading","getAdsManager","getCuePoints","cuePoint","_this6","seekElement","cuePercentage","cues","toString","setVolume","AdEvent","onAdEvent","ad","getAd","_this7","LOADED","pollCountdown","isLinear","ALL_ADS_COMPLETED","loadAds","CONTENT_PAUSE_REQUESTED","pauseContent","CONTENT_RESUME_REQUESTED","resumeContent","STARTED","MIDPOINT","COMPLETE","IMPRESSION","CLICK","cancel","contentComplete","_this8","seekedTime","discardAdBreak","splice","resize","ViewMode","NORMAL","initialize","_this9","init","start","adError","zIndex","_this10","destroy","args","handlers","handler","_this11","Date","now","base","buildUrlParams","setAspectRatio","YT","Player","onYouTubeReadyCallbacks","onYouTubeIframeAPIReady","videoId","getVideoData","items","snippet","paddingBottom","currentId","parseYouTubeId","generateId","replaceElement","autoplay","message","instance","getPlaybackQuality","playbackRate","getPlaybackRate","getTitle","playVideo","pauseVideo","stop","stopVideo","getDuration","getCurrentTime","seekTo","setPlaybackRate","setPlaybackQuality","getVideoUrl","getAvailablePlaybackRates","buffering","getVideoLoadedFraction","lastBuffered","build","setQualityMenu","getAvailableQualityLevels","Vimeo","padding","offset","transform","parseVimeoId","setCurrentTime","selected","setLoop","currentSrc","all","getVideoWidth","getVideoHeight","dimensions","getAspectRatio","setAutopause","autopause","getVideoTitle","getTextTracks","stripHTML","seconds","isTouch","wrap","blankVideo","insertElement","attribute","cancelRequests","html5","check","crossorigin","poster","addStyleHook","insertElements","jQuery","original","tagName","getProviderByUrl","getUrlParams","truthy","playsinline","hasAttribute","step","webkitShowPlaybackTargetPicker","delay","isEnterFullscreen","noTransition","soft","done","clear","unload","mime","readyState","targetTime","fauxDuration","realDuration","mozHasAudio","webkitAudioDecodedByteCount","audioTracks","change","states","webkitPresentationMode"],"mappings":"uLAIA,IC2IcA,ED3IDC,SACF,gBACE,gBACF,SAGEC,SACF,cACA,SERLC,YAEO,QAGF,UAGA,YAGG,aAGC,WAGD,UAGF,SACD,WAGG,sBAIO,cAGL,gBAGE,QAGP,oBAGM,gBAGC,mBAGG,sBAGG,cAGR,aACA,eACH,wDAGG,wDAIC,mBAEL,SACA,SACA,SACA,QACA,QACA,SACA,QACA,OACA,0BAMI,mBAOE,WAEN,GACA,IACA,EACA,KACA,IACA,KACA,uBAMK,UACD,uBAKE,QACJ,qBAKE,WACEC,OAAOC,UAAUC,SAASC,MAAM,KAAK,yBAKtC,YACC,aACC,qBAKF,MACJ,kBAKL,aACA,OACA,WACA,eACA,OACA,SACA,WACA,WACA,MACA,UACA,wBAGA,WACA,UACA,uBAKS,iBACD,8BACF,aACC,gBACE,+BACH,cACE,kBACE,uBACG,wBACH,kBACF,cACF,cACE,wBACQ,kCACC,mCACA,kCACD,6BACJ,8BACF,oBACA,iBACH,gBACE,eACH,aACC,YACF,UACA,YACE,aACD,gBACI,yBACK,uBAMN,uDAGA,qDAGA,uEAMH,UACA,WACC,aACE,YACD,aACC,UACH,YACE,cACE,gBACE,SACP,aACI,WACF,aACE,UACH,cACI,sBAQV,WACA,UACA,UACA,UACA,UACA,iBACA,YACA,aACA,iBACA,aACA,eACA,OACA,QACA,QACA,UACA,SACA,UACA,aACA,8BAIA,iBACA,kBACA,mBACA,iBACA,iBACA,gBACA,sBAIA,gBACA,+BAIA,kBACA,mBACA,YACA,cACA,cACA,iBACA,gBACA,gCAMU,uDACC,4BAEI,aACF,0BAEL,4BAEE,2BACC,8BACE,+BACD,+BACC,kCACH,8BACI,oCACE,+BACP,4BACI,iCACC,8BACJ,mCAGA,4BACE,6BACD,+BACG,iCACD,8CAGI,gCACH,+BACF,iCACA,+BACF,+BACE,mCAEF,2BACA,gCAEG,oDAMN,4BACA,wBACF,oBACI,qBACH,qBACI,oBACD,wBACA,wBACA,sBACF,wBACA,sBACE,qBACH,oBACE,6BACM,4BACP,uBACE,6BACI,6BACC,kC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","file":"plyr.min.js","sourcesContent":["// ==========================================================================\n// Plyr supported types and providers\n// ==========================================================================\n\nexport const providers = {\n    html5: 'html5',\n    youtube: 'youtube',\n    vimeo: 'vimeo',\n};\n\nexport const types = {\n    audio: 'audio',\n    video: 'video',\n};\n\nexport default { providers, types };\n","// ==========================================================================\n// Plyr support checks\n// ==========================================================================\n\nimport utils from './utils';\n\n// Check for feature support\nconst support = {\n    // Basic support\n    audio: 'canPlayType' in document.createElement('audio'),\n    video: 'canPlayType' in document.createElement('video'),\n\n    // Check for support\n    // Basic functionality vs full UI\n    check(type, provider, inline) {\n        let api = false;\n        let ui = false;\n        const browser = utils.getBrowser();\n        const playsInline = browser.isIPhone && inline && support.inline;\n\n        switch (`${provider}:${type}`) {\n            case 'html5:video':\n                api = support.video;\n                ui = api && support.rangeInput && (!browser.isIPhone || playsInline);\n                break;\n\n            case 'html5:audio':\n                api = support.audio;\n                ui = api && support.rangeInput;\n                break;\n\n            case 'youtube:video':\n                api = true;\n                ui = support.rangeInput && (!browser.isIPhone || playsInline);\n                break;\n\n            case 'vimeo:video':\n                api = true;\n                ui = support.rangeInput && !browser.isIPhone;\n                break;\n\n            default:\n                api = support.audio && support.video;\n                ui = api && support.rangeInput;\n        }\n\n        return {\n            api,\n            ui,\n        };\n    },\n\n    // Picture-in-picture support\n    // Safari only currently\n    pip: (() => {\n        const browser = utils.getBrowser();\n        return !browser.isIPhone && utils.is.function(utils.createElement('video').webkitSetPresentationMode);\n    })(),\n\n    // Airplay support\n    // Safari only currently\n    airplay: utils.is.function(window.WebKitPlaybackTargetAvailabilityEvent),\n\n    // Inline playback support\n    // https://webkit.org/blog/6784/new-video-policies-for-ios/\n    inline: 'playsInline' in document.createElement('video'),\n\n    // Check for mime type support against a player instance\n    // Credits: http://diveintohtml5.info/everything.html\n    // Related: http://www.leanbackplayer.com/test/h5mt.html\n    mime(type) {\n        const { media } = this;\n\n        try {\n            // Bail if no checking function\n            if (!this.isHTML5 || !utils.is.function(media.canPlayType)) {\n                return false;\n            }\n\n            // Type specific checks\n            if (this.isVideo) {\n                switch (type) {\n                    case 'video/webm':\n                        return media.canPlayType('video/webm; codecs=\"vp8, vorbis\"').replace(/no/, '');\n\n                    case 'video/mp4':\n                        return media.canPlayType('video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"').replace(/no/, '');\n\n                    case 'video/ogg':\n                        return media.canPlayType('video/ogg; codecs=\"theora\"').replace(/no/, '');\n\n                    default:\n                        return false;\n                }\n            } else if (this.isAudio) {\n                switch (type) {\n                    case 'audio/mpeg':\n                        return media.canPlayType('audio/mpeg;').replace(/no/, '');\n\n                    case 'audio/ogg':\n                        return media.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/no/, '');\n\n                    case 'audio/wav':\n                        return media.canPlayType('audio/wav; codecs=\"1\"').replace(/no/, '');\n\n                    default:\n                        return false;\n                }\n            }\n        } catch (e) {\n            return false;\n        }\n\n        // If we got this far, we're stuffed\n        return false;\n    },\n\n    // Check for textTracks support\n    textTracks: 'textTracks' in document.createElement('video'),\n\n    // Check for passive event listener support\n    // https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n    // https://www.youtube.com/watch?v=NPM6172J22g\n    passiveListeners: (() => {\n        // Test via a getter in the options object to see if the passive property is accessed\n        let supported = false;\n        try {\n            const options = Object.defineProperty({}, 'passive', {\n                get() {\n                    supported = true;\n                    return null;\n                },\n            });\n            window.addEventListener('test', null, options);\n        } catch (e) {\n            // Do nothing\n        }\n\n        return supported;\n    })(),\n\n    // <input type=\"range\"> Sliders\n    rangeInput: (() => {\n        const range = document.createElement('input');\n        range.type = 'range';\n        return range.type === 'range';\n    })(),\n\n    // Touch\n    // Remember a device can be moust + touch enabled\n    touch: 'ontouchstart' in document.documentElement,\n\n    // Detect transitions support\n    transitions: utils.transitionEndEvent !== false,\n\n    // Reduced motion iOS & MacOS setting\n    // https://webkit.org/blog/7551/responsive-design-for-motion/\n    reducedMotion: 'matchMedia' in window && window.matchMedia('(prefers-reduced-motion)').matches,\n};\n\nexport default support;\n","// ==========================================================================\n// Plyr default config\n// ==========================================================================\n\nconst defaults = {\n    // Disable\n    enabled: true,\n\n    // Custom media title\n    title: '',\n\n    // Logging to console\n    debug: false,\n\n    // Auto play (if supported)\n    autoplay: false,\n\n    // Only allow one media playing at once (vimeo only)\n    autopause: true,\n\n    // Default time to skip when rewind/fast forward\n    seekTime: 10,\n\n    // Default volume\n    volume: 1,\n    muted: false,\n\n    // Pass a custom duration\n    duration: null,\n\n    // Display the media duration on load in the current time position\n    // If you have opted to display both duration and currentTime, this is ignored\n    displayDuration: true,\n\n    // Invert the current time to be a countdown\n    invertTime: true,\n\n    // Clicking the currentTime inverts it's value to show time left rather than elapsed\n    toggleInvert: true,\n\n    // Aspect ratio (for embeds)\n    ratio: '16:9',\n\n    // Click video container to play/pause\n    clickToPlay: true,\n\n    // Auto hide the controls\n    hideControls: true,\n\n    // Revert to poster on finish (HTML5 - will cause reload)\n    showPosterOnEnd: false,\n\n    // Disable the standard context menu\n    disableContextMenu: true,\n\n    // Sprite (for icons)\n    loadSprite: true,\n    iconPrefix: 'plyr',\n    iconUrl: 'https://cdn.plyr.io/3.0.0-beta.19/plyr.svg',\n\n    // Blank video (used to prevent errors on source change)\n    blankVideo: 'https://cdn.plyr.io/static/blank.mp4',\n\n    // Quality default\n    quality: {\n        default: 'default',\n        options: [\n            'hd2160',\n            'hd1440',\n            'hd1080',\n            'hd720',\n            'large',\n            'medium',\n            'small',\n            'tiny',\n            'default',\n        ],\n    },\n\n    // Set loops\n    loop: {\n        active: false,\n        // start: null,\n        // end: null,\n    },\n\n    // Speed default and options to display\n    speed: {\n        selected: 1,\n        options: [\n            0.5,\n            0.75,\n            1,\n            1.25,\n            1.5,\n            1.75,\n            2,\n        ],\n    },\n\n    // Keyboard shortcut settings\n    keyboard: {\n        focused: true,\n        global: false,\n    },\n\n    // Display tooltips\n    tooltips: {\n        controls: false,\n        seek: true,\n    },\n\n    // Captions settings\n    captions: {\n        active: false,\n        language: window.navigator.language.split('-')[0],\n    },\n\n    // Fullscreen settings\n    fullscreen: {\n        enabled: true, // Allow fullscreen?\n        fallback: true, // Fallback for vintage browsers\n        iosNative: false, // Use the native fullscreen in iOS (disables custom controls)\n    },\n\n    // Local storage\n    storage: {\n        enabled: true,\n        key: 'plyr',\n    },\n\n    // Default controls\n    controls: [\n        'play-large',\n        'play',\n        'progress',\n        'current-time',\n        'mute',\n        'volume',\n        'captions',\n        'settings',\n        'pip',\n        'airplay',\n        'fullscreen',\n    ],\n    settings: [\n        'captions',\n        'quality',\n        'speed',\n    ],\n\n    // Localisation\n    i18n: {\n        restart: 'Restart',\n        rewind: 'Rewind {seektime} secs',\n        play: 'Play',\n        pause: 'Pause',\n        forward: 'Forward {seektime} secs',\n        seek: 'Seek',\n        played: 'Played',\n        buffered: 'Buffered',\n        currentTime: 'Current time',\n        duration: 'Duration',\n        volume: 'Volume',\n        mute: 'Mute',\n        unmute: 'Unmute',\n        enableCaptions: 'Enable captions',\n        disableCaptions: 'Disable captions',\n        enterFullscreen: 'Enter fullscreen',\n        exitFullscreen: 'Exit fullscreen',\n        frameTitle: 'Player for {title}',\n        captions: 'Captions',\n        settings: 'Settings',\n        speed: 'Speed',\n        quality: 'Quality',\n        loop: 'Loop',\n        start: 'Start',\n        end: 'End',\n        all: 'All',\n        reset: 'Reset',\n        none: 'None',\n        disabled: 'Disabled',\n        advertisement: 'Ad',\n    },\n\n    // URLs\n    urls: {\n        vimeo: {\n            api: 'https://player.vimeo.com/api/player.js',\n        },\n        youtube: {\n            api: 'https://www.youtube.com/iframe_api',\n        },\n        googleIMA: {\n            api: 'https://imasdk.googleapis.com/js/sdkloader/ima3.js',\n        },\n    },\n\n    // Custom control listeners\n    listeners: {\n        seek: null,\n        play: null,\n        pause: null,\n        restart: null,\n        rewind: null,\n        forward: null,\n        mute: null,\n        volume: null,\n        captions: null,\n        fullscreen: null,\n        pip: null,\n        airplay: null,\n        speed: null,\n        quality: null,\n        loop: null,\n        language: null,\n    },\n\n    // Events to watch and bubble\n    events: [\n        // Events to watch on HTML5 media elements and bubble\n        // https://developer.mozilla.org/en/docs/Web/Guide/Events/Media_events\n        'ended',\n        'progress',\n        'stalled',\n        'playing',\n        'waiting',\n        'canplay',\n        'canplaythrough',\n        'loadstart',\n        'loadeddata',\n        'loadedmetadata',\n        'timeupdate',\n        'volumechange',\n        'play',\n        'pause',\n        'error',\n        'seeking',\n        'seeked',\n        'emptied',\n        'ratechange',\n        'cuechange',\n\n        // Custom events\n        'enterfullscreen',\n        'exitfullscreen',\n        'captionsenabled',\n        'captionsdisabled',\n        'languagechange',\n        'controlshidden',\n        'controlsshown',\n        'ready',\n\n        // YouTube\n        'statechange',\n        'qualitychange',\n        'qualityrequested',\n\n        // Ads\n        'adsloaded',\n        'adscontentpause',\n        'adscontentresume',\n        'adstarted',\n        'adsmidpoint',\n        'adscomplete',\n        'adsallcomplete',\n        'adsimpression',\n        'adsclick',\n    ],\n\n    // Selectors\n    // Change these to match your template if using custom HTML\n    selectors: {\n        editable: 'input, textarea, select, [contenteditable]',\n        container: '.plyr',\n        controls: {\n            container: null,\n            wrapper: '.plyr__controls',\n        },\n        labels: '[data-plyr]',\n        buttons: {\n            play: '[data-plyr=\"play\"]',\n            pause: '[data-plyr=\"pause\"]',\n            restart: '[data-plyr=\"restart\"]',\n            rewind: '[data-plyr=\"rewind\"]',\n            forward: '[data-plyr=\"fast-forward\"]',\n            mute: '[data-plyr=\"mute\"]',\n            captions: '[data-plyr=\"captions\"]',\n            fullscreen: '[data-plyr=\"fullscreen\"]',\n            pip: '[data-plyr=\"pip\"]',\n            airplay: '[data-plyr=\"airplay\"]',\n            settings: '[data-plyr=\"settings\"]',\n            loop: '[data-plyr=\"loop\"]',\n        },\n        inputs: {\n            seek: '[data-plyr=\"seek\"]',\n            volume: '[data-plyr=\"volume\"]',\n            speed: '[data-plyr=\"speed\"]',\n            language: '[data-plyr=\"language\"]',\n            quality: '[data-plyr=\"quality\"]',\n        },\n        display: {\n            currentTime: '.plyr__time--current',\n            duration: '.plyr__time--duration',\n            buffer: '.plyr__progress--buffer',\n            played: '.plyr__progress--played',\n            loop: '.plyr__progress--loop',\n            volume: '.plyr__volume--display',\n        },\n        progress: '.plyr__progress',\n        captions: '.plyr__captions',\n        menu: {\n            quality: '.js-plyr__menu__list--quality',\n        },\n    },\n\n    // Class hooks added to the player in different states\n    classNames: {\n        video: 'plyr__video-wrapper',\n        embed: 'plyr__video-embed',\n        ads: 'plyr__ads',\n        control: 'plyr__control',\n        type: 'plyr--{0}',\n        provider: 'plyr--{0}',\n        stopped: 'plyr--stopped',\n        playing: 'plyr--playing',\n        loading: 'plyr--loading',\n        error: 'plyr--has-error',\n        hover: 'plyr--hover',\n        tooltip: 'plyr__tooltip',\n        cues: 'plyr__cues',\n        hidden: 'plyr__sr-only',\n        hideControls: 'plyr--hide-controls',\n        isIos: 'plyr--is-ios',\n        isTouch: 'plyr--is-touch',\n        uiSupported: 'plyr--full-ui',\n        noTransition: 'plyr--no-transition',\n        menu: {\n            value: 'plyr__menu__value',\n            badge: 'plyr__badge',\n            open: 'plyr--menu-open',\n        },\n        captions: {\n            enabled: 'plyr--captions-enabled',\n            active: 'plyr--captions-active',\n        },\n        fullscreen: {\n            enabled: 'plyr--fullscreen-enabled',\n            fallback: 'plyr--fullscreen-fallback',\n        },\n        pip: {\n            supported: 'plyr--pip-supported',\n            active: 'plyr--pip-active',\n        },\n        airplay: {\n            supported: 'plyr--airplay-supported',\n            active: 'plyr--airplay-active',\n        },\n        tabFocus: 'plyr__tab-focus',\n    },\n\n    // Embed attributes\n    attributes: {\n        embed: {\n            provider: 'data-plyr-provider',\n            id: 'data-plyr-embed-id',\n        },\n    },\n\n    // API keys\n    keys: {\n        google: null,\n    },\n\n    // Advertisements plugin\n    // Register for an account here: http://vi.ai/publisher-video-monetization/?aid=plyrio\n    ads: {\n        enabled: false,\n        publisherId: '918848828995742',\n    },\n};\n\nexport default defaults;\n","// ==========================================================================\n// Plyr utils\n// ==========================================================================\n\nimport support from './support';\nimport { providers } from './types';\n\nconst utils = {\n    // Check variable types\n    is: {\n        plyr(input) {\n            return this.instanceof(input, window.Plyr);\n        },\n        object(input) {\n            return this.getConstructor(input) === Object;\n        },\n        number(input) {\n            return this.getConstructor(input) === Number && !Number.isNaN(input);\n        },\n        string(input) {\n            return this.getConstructor(input) === String;\n        },\n        boolean(input) {\n            return this.getConstructor(input) === Boolean;\n        },\n        function(input) {\n            return this.getConstructor(input) === Function;\n        },\n        array(input) {\n            return !this.nullOrUndefined(input) && Array.isArray(input);\n        },\n        weakMap(input) {\n            return this.instanceof(input, window.WeakMap);\n        },\n        nodeList(input) {\n            return this.instanceof(input, window.NodeList);\n        },\n        element(input) {\n            return this.instanceof(input, window.Element);\n        },\n        textNode(input) {\n            return this.getConstructor(input) === Text;\n        },\n        event(input) {\n            return this.instanceof(input, window.Event);\n        },\n        cue(input) {\n            return this.instanceof(input, window.TextTrackCue) || this.instanceof(input, window.VTTCue);\n        },\n        track(input) {\n            return this.instanceof(input, TextTrack) || (!this.nullOrUndefined(input) && this.string(input.kind));\n        },\n        url(input) {\n            return !this.nullOrUndefined(input) && /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-/]))?/.test(input);\n        },\n        nullOrUndefined(input) {\n            return input === null || typeof input === 'undefined';\n        },\n        empty(input) {\n            return (\n                this.nullOrUndefined(input) ||\n                ((this.string(input) || this.array(input) || this.nodeList(input)) && !input.length) ||\n                (this.object(input) && !Object.keys(input).length)\n            );\n        },\n        instanceof(input, constructor) {\n            return Boolean(input && constructor && input instanceof constructor);\n        },\n        getConstructor(input) {\n            return !this.nullOrUndefined(input) ? input.constructor : null;\n        },\n    },\n\n    // Unfortunately, due to mixed support, UA sniffing is required\n    getBrowser() {\n        return {\n            isIE: /* @cc_on!@ */ false || !!document.documentMode,\n            isWebkit: 'WebkitAppearance' in document.documentElement.style && !/Edge/.test(navigator.userAgent),\n            isIPhone: /(iPhone|iPod)/gi.test(navigator.platform),\n            isIos: /(iPad|iPhone|iPod)/gi.test(navigator.platform),\n        };\n    },\n\n    // Fetch wrapper\n    // Using XHR to avoid issues with older browsers\n    fetch(url, responseType = 'text') {\n        return new Promise((resolve, reject) => {\n            try {\n                const request = new XMLHttpRequest();\n\n                // Check for CORS support\n                if (!('withCredentials' in request)) {\n                    return;\n                }\n\n                request.addEventListener('load', () => {\n                    if (responseType === 'text') {\n                        try {\n                            resolve(JSON.parse(request.responseText));\n                        } catch(e) {\n                            resolve(request.responseText);\n                        }\n                    }\n                    else {\n                        resolve(request.response);\n                    }\n                });\n\n                request.addEventListener('error', () => {\n                    throw new Error(request.statusText);\n                });\n\n                request.open('GET', url, true);\n\n                // Set the required response type\n                request.responseType = responseType;\n\n                request.send();\n            } catch (e) {\n                reject(e);\n            }\n        });\n    },\n\n    // Load an external script\n    loadScript(url) {\n        return new Promise((resolve, reject) => {\n            const current = document.querySelector(`script[src=\"${url}\"]`);\n\n            // Check script is not already referenced, if so wait for load\n            if (current !== null) {\n                current.callbacks = current.callbacks || [];\n                current.callbacks.push(resolve);\n                return;\n            }\n\n            // Build the element\n            const element = document.createElement('script');\n\n            // Callback queue\n            element.callbacks = element.callbacks || [];\n            element.callbacks.push(resolve);\n\n            // Error queue\n            element.errors = element.errors || [];\n            element.errors.push(reject);\n\n            // Bind callback\n            element.addEventListener(\n                'load',\n                event => {\n                    element.callbacks.forEach(cb => cb.call(null, event));\n                    element.callbacks = null;\n                },\n                false,\n            );\n\n            // Bind error handling\n            element.addEventListener(\n                'error',\n                event => {\n                    element.errors.forEach(err => err.call(null, event));\n                    element.errors = null;\n                },\n                false,\n            );\n\n            // Set the URL after binding callback\n            element.src = url;\n\n            // Inject\n            const first = document.getElementsByTagName('script')[0];\n            first.parentNode.insertBefore(element, first);\n        });\n    },\n\n    // Load an external SVG sprite\n    loadSprite(url, id) {\n        if (!utils.is.string(url)) {\n            return;\n        }\n\n        const prefix = 'cache-';\n        const hasId = utils.is.string(id);\n        let isCached = false;\n\n        function updateSprite(data) {\n            // Inject content\n            this.innerHTML = data;\n\n            // Inject the SVG to the body\n            document.body.insertBefore(this, document.body.childNodes[0]);\n        }\n\n        // Only load once\n        if (!hasId || !document.querySelectorAll(`#${id}`).length) {\n            // Create container\n            const container = document.createElement('div');\n            utils.toggleHidden(container, true);\n\n            if (hasId) {\n                container.setAttribute('id', id);\n            }\n\n            // Check in cache\n            if (support.storage) {\n                const cached = window.localStorage.getItem(prefix + id);\n                isCached = cached !== null;\n\n                if (isCached) {\n                    const data = JSON.parse(cached);\n                    updateSprite.call(container, data.content);\n                    return;\n                }\n            }\n\n            // Get the sprite\n            utils\n                .fetch(url)\n                .then(result => {\n                    if (utils.is.empty(result)) {\n                        return;\n                    }\n\n                    if (support.storage) {\n                        window.localStorage.setItem(\n                            prefix + id,\n                            JSON.stringify({\n                                content: result,\n                            }),\n                        );\n                    }\n\n                    updateSprite.call(container, result);\n                })\n                .catch(() => {});\n        }\n    },\n\n    // Generate a random ID\n    generateId(prefix) {\n        return `${prefix}-${Math.floor(Math.random() * 10000)}`;\n    },\n\n    // Determine if we're in an iframe\n    inFrame() {\n        try {\n            return window.self !== window.top;\n        } catch (e) {\n            return true;\n        }\n    },\n\n    // Wrap an element\n    wrap(elements, wrapper) {\n        // Convert `elements` to an array, if necessary.\n        const targets = elements.length ? elements : [elements];\n\n        // Loops backwards to prevent having to clone the wrapper on the\n        // first element (see `child` below).\n        Array.from(targets)\n            .reverse()\n            .forEach((element, index) => {\n                const child = index > 0 ? wrapper.cloneNode(true) : wrapper;\n\n                // Cache the current parent and sibling.\n                const parent = element.parentNode;\n                const sibling = element.nextSibling;\n\n                // Wrap the element (is automatically removed from its current\n                // parent).\n                child.appendChild(element);\n\n                // If the element had a sibling, insert the wrapper before\n                // the sibling to maintain the HTML structure; otherwise, just\n                // append it to the parent.\n                if (sibling) {\n                    parent.insertBefore(child, sibling);\n                } else {\n                    parent.appendChild(child);\n                }\n            });\n    },\n\n    // Create a DocumentFragment\n    createElement(type, attributes, text) {\n        // Create a new <element>\n        const element = document.createElement(type);\n\n        // Set all passed attributes\n        if (utils.is.object(attributes)) {\n            utils.setAttributes(element, attributes);\n        }\n\n        // Add text node\n        if (utils.is.string(text)) {\n            element.textContent = text;\n        }\n\n        // Return built element\n        return element;\n    },\n\n    // Inaert an element after another\n    insertAfter(element, target) {\n        target.parentNode.insertBefore(element, target.nextSibling);\n    },\n\n    // Insert a DocumentFragment\n    insertElement(type, parent, attributes, text) {\n        // Inject the new <element>\n        parent.appendChild(utils.createElement(type, attributes, text));\n    },\n\n    // Remove an element\n    removeElement(element) {\n        if (!utils.is.element(element) || !utils.is.element(element.parentNode)) {\n            return;\n        }\n\n        if (utils.is.nodeList(element) || utils.is.array(element)) {\n            Array.from(element).forEach(utils.removeElement);\n            return;\n        }\n\n        element.parentNode.removeChild(element);\n    },\n\n    // Remove all child elements\n    emptyElement(element) {\n        let { length } = element.childNodes;\n\n        while (length > 0) {\n            element.removeChild(element.lastChild);\n            length -= 1;\n        }\n    },\n\n    // Replace element\n    replaceElement(newChild, oldChild) {\n        if (!utils.is.element(oldChild) || !utils.is.element(oldChild.parentNode) || !utils.is.element(newChild)) {\n            return null;\n        }\n\n        oldChild.parentNode.replaceChild(newChild, oldChild);\n\n        return newChild;\n    },\n\n    // Set attributes\n    setAttributes(element, attributes) {\n        if (!utils.is.element(element) || utils.is.empty(attributes)) {\n            return;\n        }\n\n        Object.keys(attributes).forEach(key => {\n            element.setAttribute(key, attributes[key]);\n        });\n    },\n\n    // Get an attribute object from a string selector\n    getAttributesFromSelector(sel, existingAttributes) {\n        // For example:\n        // '.test' to { class: 'test' }\n        // '#test' to { id: 'test' }\n        // '[data-test=\"test\"]' to { 'data-test': 'test' }\n\n        if (!utils.is.string(sel) || utils.is.empty(sel)) {\n            return {};\n        }\n\n        const attributes = {};\n        const existing = existingAttributes;\n\n        sel.split(',').forEach(s => {\n            // Remove whitespace\n            const selector = s.trim();\n            const className = selector.replace('.', '');\n            const stripped = selector.replace(/[[\\]]/g, '');\n\n            // Get the parts and value\n            const parts = stripped.split('=');\n            const key = parts[0];\n            const value = parts.length > 1 ? parts[1].replace(/[\"']/g, '') : '';\n\n            // Get the first character\n            const start = selector.charAt(0);\n\n            switch (start) {\n                case '.':\n                    // Add to existing classname\n                    if (utils.is.object(existing) && utils.is.string(existing.class)) {\n                        existing.class += ` ${className}`;\n                    }\n\n                    attributes.class = className;\n                    break;\n\n                case '#':\n                    // ID selector\n                    attributes.id = selector.replace('#', '');\n                    break;\n\n                case '[':\n                    // Attribute selector\n                    attributes[key] = value;\n\n                    break;\n\n                default:\n                    break;\n            }\n        });\n\n        return attributes;\n    },\n\n    // Toggle class on an element\n    toggleClass(element, className, toggle) {\n        if (utils.is.element(element)) {\n            const contains = element.classList.contains(className);\n\n            element.classList[toggle ? 'add' : 'remove'](className);\n\n            return (toggle && !contains) || (!toggle && contains);\n        }\n\n        return null;\n    },\n\n    // Has class name\n    hasClass(element, className) {\n        return utils.is.element(element) && element.classList.contains(className);\n    },\n\n    // Toggle hidden attribute on an element\n    toggleHidden(element, toggle) {\n        if (!utils.is.element(element)) {\n            return;\n        }\n\n        if (toggle) {\n            element.setAttribute('hidden', '');\n        } else {\n            element.removeAttribute('hidden');\n        }\n    },\n\n    // Element matches selector\n    matches(element, selector) {\n        const prototype = { Element };\n\n        function match() {\n            return Array.from(document.querySelectorAll(selector)).includes(this);\n        }\n\n        const matches = prototype.matches || prototype.webkitMatchesSelector || prototype.mozMatchesSelector || prototype.msMatchesSelector || match;\n\n        return matches.call(element, selector);\n    },\n\n    // Find all elements\n    getElements(selector) {\n        return this.elements.container.querySelectorAll(selector);\n    },\n\n    // Find a single element\n    getElement(selector) {\n        return this.elements.container.querySelector(selector);\n    },\n\n    // Find the UI controls and store references in custom controls\n    // TODO: Allow settings menus with custom controls\n    findElements() {\n        try {\n            this.elements.controls = utils.getElement.call(this, this.config.selectors.controls.wrapper);\n\n            // Buttons\n            this.elements.buttons = {\n                play: utils.getElements.call(this, this.config.selectors.buttons.play),\n                pause: utils.getElement.call(this, this.config.selectors.buttons.pause),\n                restart: utils.getElement.call(this, this.config.selectors.buttons.restart),\n                rewind: utils.getElement.call(this, this.config.selectors.buttons.rewind),\n                forward: utils.getElement.call(this, this.config.selectors.buttons.forward),\n                mute: utils.getElement.call(this, this.config.selectors.buttons.mute),\n                pip: utils.getElement.call(this, this.config.selectors.buttons.pip),\n                airplay: utils.getElement.call(this, this.config.selectors.buttons.airplay),\n                settings: utils.getElement.call(this, this.config.selectors.buttons.settings),\n                captions: utils.getElement.call(this, this.config.selectors.buttons.captions),\n                fullscreen: utils.getElement.call(this, this.config.selectors.buttons.fullscreen),\n            };\n\n            // Progress\n            this.elements.progress = utils.getElement.call(this, this.config.selectors.progress);\n\n            // Inputs\n            this.elements.inputs = {\n                seek: utils.getElement.call(this, this.config.selectors.inputs.seek),\n                volume: utils.getElement.call(this, this.config.selectors.inputs.volume),\n            };\n\n            // Display\n            this.elements.display = {\n                buffer: utils.getElement.call(this, this.config.selectors.display.buffer),\n                duration: utils.getElement.call(this, this.config.selectors.display.duration),\n                currentTime: utils.getElement.call(this, this.config.selectors.display.currentTime),\n            };\n\n            // Seek tooltip\n            if (utils.is.element(this.elements.progress)) {\n                this.elements.display.seekTooltip = this.elements.progress.querySelector(`.${this.config.classNames.tooltip}`);\n            }\n\n            return true;\n        } catch (error) {\n            // Log it\n            this.debug.warn('It looks like there is a problem with your custom controls HTML', error);\n\n            // Restore native video controls\n            this.toggleNativeControls(true);\n\n            return false;\n        }\n    },\n\n    // Get the focused element\n    getFocusElement() {\n        let focused = document.activeElement;\n\n        if (!focused || focused === document.body) {\n            focused = null;\n        } else {\n            focused = document.querySelector(':focus');\n        }\n\n        return focused;\n    },\n\n    // Trap focus inside container\n    trapFocus(element = null, toggle = false) {\n        if (!utils.is.element(element)) {\n            return;\n        }\n\n        const focusable = utils.getElements.call(this, 'button:not(:disabled), input:not(:disabled), [tabindex]');\n        const first = focusable[0];\n        const last = focusable[focusable.length - 1];\n\n        const trap = event => {\n            // Bail if not tab key or not fullscreen\n            if (event.key !== 'Tab' || event.keyCode !== 9) {\n                return;\n            }\n\n            // Get the current focused element\n            const focused = utils.getFocusElement();\n\n            if (focused === last && !event.shiftKey) {\n                // Move focus to first element that can be tabbed if Shift isn't used\n                first.focus();\n                event.preventDefault();\n            } else if (focused === first && event.shiftKey) {\n                // Move focus to last element that can be tabbed if Shift is used\n                last.focus();\n                event.preventDefault();\n            }\n        };\n\n        if (toggle) {\n            utils.on(this.elements.container, 'keydown', trap, false);\n        } else {\n            utils.off(this.elements.container, 'keydown', trap, false);\n        }\n    },\n\n    // Toggle event listener\n    toggleListener(elements, event, callback, toggle, passive, capture) {\n        // Bail if no elemetns, event, or callback\n        if (utils.is.empty(elements)  || utils.is.empty(event) || !utils.is.function(callback)) {\n            return;\n        }\n\n        // If a nodelist is passed, call itself on each node\n        if (utils.is.nodeList(elements) || utils.is.array(elements)) {\n            // Create listener for each node\n            Array.from(elements).forEach(element => {\n                if (element instanceof Node) {\n                    utils.toggleListener.call(null, element, event, callback, toggle, passive, capture);\n                }\n            });\n\n            return;\n        }\n\n        // Allow multiple events\n        const events = event.split(' ');\n\n        // Build options\n        // Default to just capture boolean\n        let options = utils.is.boolean(capture) ? capture : false;\n\n        // If passive events listeners are supported\n        if (support.passiveListeners) {\n            options = {\n                // Whether the listener can be passive (i.e. default never prevented)\n                passive: utils.is.boolean(passive) ? passive : true,\n                // Whether the listener is a capturing listener or not\n                capture: utils.is.boolean(capture) ? capture : false,\n            };\n        }\n\n        // If a single node is passed, bind the event listener\n        events.forEach(type => {\n            elements[toggle ? 'addEventListener' : 'removeEventListener'](type, callback, options);\n        });\n    },\n\n    // Bind event handler\n    on(element, events, callback, passive, capture) {\n        utils.toggleListener(element, events, callback, true, passive, capture);\n    },\n\n    // Unbind event handler\n    off(element, events, callback, passive, capture) {\n        utils.toggleListener(element, events, callback, false, passive, capture);\n    },\n\n    // Trigger event\n    dispatchEvent(element, type, bubbles, detail) {\n        // Bail if no element\n        if (!utils.is.element(element) || !utils.is.string(type)) {\n            return;\n        }\n\n        // Create and dispatch the event\n        const event = new CustomEvent(type, {\n            bubbles: utils.is.boolean(bubbles) ? bubbles : false,\n            detail: Object.assign({}, detail, {\n                plyr: utils.is.plyr(this) ? this : null,\n            }),\n        });\n\n        // Dispatch the event\n        element.dispatchEvent(event);\n    },\n\n    // Toggle aria-pressed state on a toggle button\n    // http://www.ssbbartgroup.com/blog/how-not-to-misuse-aria-states-properties-and-roles\n    toggleState(element, input) {\n        // If multiple elements passed\n        if (utils.is.array(element) || utils.is.nodeList(element)) {\n            Array.from(element).forEach(target => utils.toggleState(target, input));\n            return;\n        }\n\n        // Bail if no target\n        if (!utils.is.element(element)) {\n            return;\n        }\n\n        // Get state\n        const pressed = element.getAttribute('aria-pressed') === 'true';\n        const state = utils.is.boolean(input) ? input : !pressed;\n\n        // Set the attribute on target\n        element.setAttribute('aria-pressed', state);\n    },\n\n    // Get percentage\n    getPercentage(current, max) {\n        if (current === 0 || max === 0 || Number.isNaN(current) || Number.isNaN(max)) {\n            return 0;\n        }\n        return (current / max * 100).toFixed(2);\n    },\n\n    // Time helpers\n    getHours(value) {\n        return parseInt((value / 60 / 60) % 60, 10);\n    },\n    getMinutes(value) {\n        return parseInt((value / 60) % 60, 10);\n    },\n    getSeconds(value) {\n        return parseInt(value % 60, 10);\n    },\n\n    // Format time to UI friendly string\n    formatTime(time = 0, displayHours = false, inverted = false) {\n        // Bail if the value isn't a number\n        if (!utils.is.number(time)) {\n            return this.formatTime(null, displayHours, inverted);\n        }\n\n        // Format time component to add leading zero\n        const format = value => `0${value}`.slice(-2);\n\n        // Breakdown to hours, mins, secs\n        let hours = this.getHours(time);\n        const mins = this.getMinutes(time);\n        const secs = this.getSeconds(time);\n\n        // Do we need to display hours?\n        if (displayHours || hours > 0) {\n            hours = `${hours}:`;\n        } else {\n            hours = '';\n        }\n\n        // Render\n        return `${inverted ? '-' : ''}${hours}${format(mins)}:${format(secs)}`;\n    },\n\n    // Deep extend destination object with N more objects\n    extend(target = {}, ...sources) {\n        if (!sources.length) {\n            return target;\n        }\n\n        const source = sources.shift();\n\n        if (!utils.is.object(source)) {\n            return target;\n        }\n\n        Object.keys(source).forEach(key => {\n            if (utils.is.object(source[key])) {\n                if (!Object.keys(target).includes(key)) {\n                    Object.assign(target, { [key]: {} });\n                }\n\n                utils.extend(target[key], source[key]);\n            } else {\n                Object.assign(target, { [key]: source[key] });\n            }\n        });\n\n        return utils.extend(target, ...sources);\n    },\n\n    // Get the provider for a given URL\n    getProviderByUrl(url) {\n        // YouTube\n        if (/^(https?:\\/\\/)?(www\\.)?(youtube\\.com|youtu\\.?be)\\/.+$/.test(url)) {\n            return providers.youtube;\n        }\n\n        // Vimeo\n        if (/^https?:\\/\\/player.vimeo.com\\/video\\/\\d{8,}(?=\\b|\\/)/.test(url)) {\n            return providers.vimeo;\n        }\n\n        return null;\n    },\n\n    // Parse YouTube ID from URL\n    parseYouTubeId(url) {\n        if (utils.is.empty(url)) {\n            return null;\n        }\n\n        const regex = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n        return url.match(regex) ? RegExp.$2 : url;\n    },\n\n    // Parse Vimeo ID from URL\n    parseVimeoId(url) {\n        if (utils.is.empty(url)) {\n            return null;\n        }\n\n        if (utils.is.number(Number(url))) {\n            return url;\n        }\n\n        const regex = /^.*(vimeo.com\\/|video\\/)(\\d+).*/;\n        return url.match(regex) ? RegExp.$2 : url;\n    },\n\n    // Convert a URL to a location object\n    parseUrl(url) {\n        const parser = document.createElement('a');\n        parser.href = url;\n        return parser;\n    },\n\n    // Get URL query parameters\n    getUrlParams(input) {\n        let search = input;\n\n        // Parse URL if needed\n        if (input.startsWith('http://') || input.startsWith('https://')) {\n            ({ search } = this.parseUrl(input));\n        }\n\n        if (this.is.empty(search)) {\n            return null;\n        }\n\n        const hashes = search.slice(search.indexOf('?') + 1).split('&');\n\n        return hashes.reduce((params, hash) => {\n            const [\n                key,\n                val,\n            ] = hash.split('=');\n\n            return Object.assign(params, { [key]: decodeURIComponent(val) });\n        }, {});\n    },\n\n    // Convert object to URL parameters\n    buildUrlParams(input) {\n        if (!utils.is.object(input)) {\n            return '';\n        }\n\n        return Object.keys(input)\n            .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(input[key])}`)\n            .join('&');\n    },\n\n    // Remove HTML from a string\n    stripHTML(source) {\n        const fragment = document.createDocumentFragment();\n        const element = document.createElement('div');\n        fragment.appendChild(element);\n        element.innerHTML = source;\n        return fragment.firstChild.innerText;\n    },\n\n    // Get aspect ratio for dimensions\n    getAspectRatio(width, height) {\n        const getRatio = (w, h) => (h === 0 ? w : getRatio(h, w % h));\n        const ratio = getRatio(width, height);\n        return `${width / ratio}:${height / ratio}`;\n    },\n\n    // Get the transition end event\n    get transitionEndEvent() {\n        const element = document.createElement('span');\n\n        const events = {\n            WebkitTransition: 'webkitTransitionEnd',\n            MozTransition: 'transitionend',\n            OTransition: 'oTransitionEnd otransitionend',\n            transition: 'transitionend',\n        };\n\n        const type = Object.keys(events).find(event => element.style[event] !== undefined);\n\n        return utils.is.string(type) ? events[type] : false;\n    },\n\n    // Force repaint of element\n    repaint(element) {\n        setTimeout(() => {\n            utils.toggleHidden(element, true);\n            element.offsetHeight; // eslint-disable-line\n            utils.toggleHidden(element, false);\n        }, 0);\n    },\n};\n\nexport default utils;\n","// ==========================================================================\n// Console wrapper\n// ==========================================================================\n\nconst noop = () => {};\n\nexport default class Console {\n    constructor(enabled = false) {\n        this.enabled = window.console && enabled;\n\n        if (this.enabled) {\n            this.log('Debugging enabled');\n        }\n    }\n\n    get log() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.log, console) : noop;\n    }\n    get warn() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.warn, console) : noop;\n    }\n    get error() {\n        // eslint-disable-next-line no-console\n        return this.enabled ? Function.prototype.bind.call(console.error, console) : noop;\n    }\n}\n","// ==========================================================================\n// Fullscreen wrapper\n// ==========================================================================\n\nimport utils from './utils';\n\nconst browser = utils.getBrowser();\n\nfunction onChange() {\n    if (!this.enabled) {\n        return;\n    }\n\n    // Update toggle button\n    const button = this.player.elements.buttons.fullscreen;\n    if (utils.is.element(button)) {\n        utils.toggleState(button, this.active);\n    }\n\n    // Trigger an event\n    utils.dispatchEvent(this.target, this.active ? 'enterfullscreen' : 'exitfullscreen', true);\n\n    // Trap focus in container\n    if (!browser.isIos) {\n        utils.trapFocus.call(this.player, this.target, this.active);\n    }\n}\n\nfunction toggleFallback(toggle = false) {\n    // Store or restore scroll position\n    if (toggle) {\n        this.scrollPosition = {\n            x: window.scrollX || 0,\n            y: window.scrollY || 0,\n        };\n    } else {\n        window.scrollTo(this.scrollPosition.x, this.scrollPosition.y);\n    }\n\n    // Toggle scroll\n    document.body.style.overflow = toggle ? 'hidden' : '';\n\n    // Toggle class hook\n    utils.toggleClass(this.target, this.player.config.classNames.fullscreen.fallback, toggle);\n\n    // Toggle button and fire events\n    onChange.call(this);\n}\n\nclass Fullscreen {\n    constructor(player) {\n        // Keep reference to parent\n        this.player = player;\n\n        // Get prefix\n        this.prefix = Fullscreen.prefix;\n\n        // Scroll position\n        this.scrollPosition = { x: 0, y: 0 };\n\n        // Register event listeners\n        // Handle event (incase user presses escape etc)\n        utils.on(document, this.prefix === 'ms' ? 'MSFullscreenChange' : `${this.prefix}fullscreenchange`, () => {\n            // TODO: Filter for target??\n            onChange.call(this);\n        });\n\n        // Fullscreen toggle on double click\n        utils.on(this.player.elements.container, 'dblclick', () => {\n            this.toggle();\n        });\n\n        // Prevent double click on controls bubbling up\n        utils.on(this.player.elements.controls, 'dblclick', event => event.stopPropagation());\n\n        // Update the UI\n        this.update();\n    }\n\n    // Determine if native supported\n    static get native() {\n        return !!(document.fullscreenEnabled || document.webkitFullscreenEnabled || document.mozFullScreenEnabled || document.msFullscreenEnabled);\n    }\n\n    // Get the prefix for handlers\n    static get prefix() {\n        // No prefix\n        if (utils.is.function(document.cancelFullScreen)) {\n            return false;\n        }\n\n        // Check for fullscreen support by vendor prefix\n        let value = '';\n        const prefixes = [\n            'webkit',\n            'moz',\n            'ms',\n        ];\n\n        prefixes.some(pre => {\n            if (utils.is.function(document[`${pre}CancelFullScreen`])) {\n                value = pre;\n                return true;\n            } else if (utils.is.function(document.msExitFullscreen)) {\n                value = 'ms';\n                return true;\n            }\n\n            return false;\n        });\n\n        return value;\n    }\n\n    // Determine if fullscreen is enabled\n    get enabled() {\n        const fallback = this.player.config.fullscreen.fallback && !utils.inFrame();\n\n        return (Fullscreen.native || fallback) && this.player.config.fullscreen.enabled && this.player.supported.ui && this.player.isVideo;\n    }\n\n    // Get active state\n    get active() {\n        if (!this.enabled) {\n            return false;\n        }\n\n        // Fallback using classname\n        if (!Fullscreen.native) {\n            return utils.hasClass(this.target, this.player.config.classNames.fullscreen.fallback);\n        }\n\n        const element = !this.prefix ? document.fullscreenElement : document[`${this.prefix}FullscreenElement`];\n\n        return element === this.target;\n    }\n\n    // Get target element\n    get target() {\n        return browser.isIos && this.player.config.fullscreen.iosNative ? this.player.media : this.player.elements.container;\n    }\n\n    // Update UI\n    update() {\n        if (this.enabled) {\n            this.player.debug.log(`${Fullscreen.native ? 'Native' : 'Fallback'} fullscreen enabled`);\n        } else {\n            this.player.debug.log('Fullscreen not supported and fallback disabled');\n        }\n\n        // Add styling hook to show button\n        utils.toggleClass(this.player.elements.container, this.player.config.classNames.fullscreen.enabled, this.enabled);\n    }\n\n    // Make an element fullscreen\n    enter() {\n        if (!this.enabled) {\n            return;\n        }\n\n        // iOS native fullscreen doesn't need the request step\n        if (browser.isIos && this.player.config.fullscreen.iosNative) {\n            if (this.player.playing) {\n                this.target.webkitEnterFullscreen();\n            }\n        } else if (!Fullscreen.native) {\n            toggleFallback.call(this, true);\n        } else if (!this.prefix) {\n            this.target.requestFullScreen();\n        } else if (!utils.is.empty(this.prefix)) {\n            this.target[`${this.prefix}${this.prefix === 'ms' ? 'RequestFullscreen' : 'RequestFullScreen'}`]();\n        }\n    }\n\n    // Bail from fullscreen\n    exit() {\n        if (!this.enabled) {\n            return;\n        }\n\n        // iOS native fullscreen\n        if (browser.isIos && this.player.config.fullscreen.iosNative) {\n            this.target.webkitExitFullscreen();\n            this.player.play();\n        } else if (!Fullscreen.native) {\n            toggleFallback.call(this, false);\n        } else if (!this.prefix) {\n            document.cancelFullScreen();\n        } else if (!utils.is.empty(this.prefix)) {\n            document[`${this.prefix}${this.prefix === 'ms' ? 'ExitFullscreen' : 'CancelFullScreen'}`]();\n        }\n    }\n\n    // Toggle state\n    toggle() {\n        if (!this.active) {\n            this.enter();\n        } else {\n            this.exit();\n        }\n    }\n}\n\nexport default Fullscreen;\n","// ==========================================================================\n// Plyr Captions\n// TODO: Create as class\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport controls from './controls';\n\nconst captions = {\n    // Setup captions\n    setup() {\n        // Requires UI support\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // Set default language if not set\n        const stored = this.storage.get('language');\n\n        if (!utils.is.empty(stored)) {\n            this.captions.language = stored;\n        }\n\n        if (utils.is.empty(this.captions.language)) {\n            this.captions.language = this.config.captions.language.toLowerCase();\n        }\n\n        // Set captions enabled state if not set\n        if (!utils.is.boolean(this.captions.active)) {\n            const active = this.storage.get('captions');\n\n            if (utils.is.boolean(active)) {\n                this.captions.active = active;\n            } else {\n                this.captions.active = this.config.captions.active;\n            }\n        }\n\n        // Only Vimeo and HTML5 video supported at this point\n        if (!this.isVideo || this.isYouTube || (this.isHTML5 && !support.textTracks)) {\n            // Clear menu and hide\n            if (utils.is.array(this.config.controls) && this.config.controls.includes('settings') && this.config.settings.includes('captions')) {\n                controls.setCaptionsMenu.call(this);\n            }\n\n            return;\n        }\n        // Inject the container\n        if (!utils.is.element(this.elements.captions)) {\n            this.elements.captions = utils.createElement('div', utils.getAttributesFromSelector(this.config.selectors.captions));\n\n            utils.insertAfter(this.elements.captions, this.elements.wrapper);\n        }\n\n        // Set the class hook\n        utils.toggleClass(this.elements.container, this.config.classNames.captions.enabled, !utils.is.empty(captions.getTracks.call(this)));\n\n        // Get tracks\n        const tracks = captions.getTracks.call(this);\n\n        // If no caption file exists, hide container for caption text\n        if (utils.is.empty(tracks)) {\n            return;\n        }\n\n        // Get browser info\n        const browser = utils.getBrowser();\n\n        // Fix IE captions if CORS is used\n        // Fetch captions and inject as blobs instead (data URIs not supported!)\n        if (browser.isIE && window.URL) {\n            const elements = this.media.querySelectorAll('track');\n\n            Array.from(elements).forEach(track => {\n                const src = track.getAttribute('src');\n                const href = utils.parseUrl(src);\n\n                if (href.hostname !== window.location.href.hostname && [\n                    'http:',\n                    'https:',\n                ].includes(href.protocol)) {\n                    utils\n                        .fetch(src, 'blob')\n                        .then(blob => {\n                            track.setAttribute('src', window.URL.createObjectURL(blob));\n                        })\n                        .catch(() => {\n                            utils.removeElement(track);\n                        });\n                }\n            });\n        }\n\n        // Set language\n        captions.setLanguage.call(this);\n\n        // Enable UI\n        captions.show.call(this);\n\n        // Set available languages in list\n        if (utils.is.array(this.config.controls) && this.config.controls.includes('settings') && this.config.settings.includes('captions')) {\n            controls.setCaptionsMenu.call(this);\n        }\n    },\n\n    // Set the captions language\n    setLanguage() {\n        // Setup HTML5 track rendering\n        if (this.isHTML5 && this.isVideo) {\n            captions.getTracks.call(this).forEach(track => {\n                // Show track\n                utils.on(track, 'cuechange', event => captions.setCue.call(this, event));\n\n                // Turn off native caption rendering to avoid double captions\n                // eslint-disable-next-line\n                track.mode = 'hidden';\n            });\n\n            // Get current track\n            const currentTrack = captions.getCurrentTrack.call(this);\n\n            // Check if suported kind\n            if (utils.is.track(currentTrack)) {\n                // If we change the active track while a cue is already displayed we need to update it\n                if (Array.from(currentTrack.activeCues || []).length) {\n                    captions.setCue.call(this, currentTrack);\n                }\n            }\n        } else if (this.isVimeo && this.captions.active) {\n            this.embed.enableTextTrack(this.language);\n        }\n    },\n\n    // Get the tracks\n    getTracks() {\n        // Return empty array at least\n        if (utils.is.nullOrUndefined(this.media)) {\n            return [];\n        }\n\n        // Only get accepted kinds\n        return Array.from(this.media.textTracks || []).filter(track => [\n            'captions',\n            'subtitles',\n        ].includes(track.kind));\n    },\n\n    // Get the current track for the current language\n    getCurrentTrack() {\n        return captions.getTracks.call(this).find(track => track.language.toLowerCase() === this.language);\n    },\n\n    // Display active caption if it contains text\n    setCue(input) {\n        // Get the track from the event if needed\n        const track = utils.is.event(input) ? input.target : input;\n        const { activeCues } = track;\n        const active = activeCues.length && activeCues[0];\n        const currentTrack = captions.getCurrentTrack.call(this);\n\n        // Only display current track\n        if (track !== currentTrack) {\n            return;\n        }\n\n        // Display a cue, if there is one\n        if (utils.is.cue(active)) {\n            captions.setText.call(this, active.getCueAsHTML());\n        } else {\n            captions.setText.call(this, null);\n        }\n\n        utils.dispatchEvent.call(this, this.media, 'cuechange');\n    },\n\n    // Set the current caption\n    setText(input) {\n        // Requires UI\n        if (!this.supported.ui) {\n            return;\n        }\n\n        if (utils.is.element(this.elements.captions)) {\n            const content = utils.createElement('span');\n\n            // Empty the container\n            utils.emptyElement(this.elements.captions);\n\n            // Default to empty\n            const caption = !utils.is.nullOrUndefined(input) ? input : '';\n\n            // Set the span content\n            if (utils.is.string(caption)) {\n                content.textContent = caption.trim();\n            } else {\n                content.appendChild(caption);\n            }\n\n            // Set new caption text\n            this.elements.captions.appendChild(content);\n        } else {\n            this.debug.warn('No captions element to render to');\n        }\n    },\n\n    // Display captions container and button (for initialization)\n    show() {\n        // If there's no caption toggle, bail\n        if (!utils.is.element(this.elements.buttons.captions)) {\n            return;\n        }\n\n        // Try to load the value from storage\n        let active = this.storage.get('captions');\n\n        // Otherwise fall back to the default config\n        if (!utils.is.boolean(active)) {\n            ({ active } = this.config.captions);\n        } else {\n            this.captions.active = active;\n        }\n\n        if (active) {\n            utils.toggleClass(this.elements.container, this.config.classNames.captions.active, true);\n            utils.toggleState(this.elements.buttons.captions, true);\n        }\n    },\n};\n\nexport default captions;\n","// ==========================================================================\n// Plyr UI\n// ==========================================================================\n\nimport utils from './utils';\nimport captions from './captions';\nimport controls from './controls';\nimport listeners from './listeners';\n\nconst ui = {\n    addStyleHook() {\n        utils.toggleClass(this.elements.container, this.config.selectors.container.replace('.', ''), true);\n        utils.toggleClass(this.elements.container, this.config.classNames.uiSupported, this.supported.ui);\n    },\n\n    // Toggle native HTML5 media controls\n    toggleNativeControls(toggle = false) {\n        if (toggle && this.isHTML5) {\n            this.media.setAttribute('controls', '');\n        } else {\n            this.media.removeAttribute('controls');\n        }\n    },\n\n    // Setup the UI\n    build() {\n        // Re-attach media element listeners\n        // TODO: Use event bubbling\n        this.listeners.media();\n\n        // Don't setup interface if no support\n        if (!this.supported.ui) {\n            this.debug.warn(`Basic support only for ${this.provider} ${this.type}`);\n\n            // Restore native controls\n            ui.toggleNativeControls.call(this, true);\n\n            // Bail\n            return;\n        }\n\n        // Inject custom controls if not present\n        if (!utils.is.element(this.elements.controls)) {\n            // Inject custom controls\n            controls.inject.call(this);\n\n            // Re-attach control listeners\n            this.listeners.controls();\n        }\n\n        // If there's no controls, bail\n        if (!utils.is.element(this.elements.controls)) {\n            return;\n        }\n\n        // Remove native controls\n        ui.toggleNativeControls.call(this);\n\n        // Captions\n        captions.setup.call(this);\n\n        // Reset volume\n        this.volume = null;\n\n        // Reset mute state\n        this.muted = null;\n\n        // Reset speed\n        this.speed = null;\n\n        // Reset loop state\n        this.loop = null;\n\n        // Reset quality options\n        this.options.quality = [];\n\n        // Reset time display\n        ui.timeUpdate.call(this);\n\n        // Update the UI\n        ui.checkPlaying.call(this);\n\n        // Ready for API calls\n        this.ready = true;\n\n        // Ready event at end of execution stack\n        setTimeout(() => {\n            utils.dispatchEvent.call(this, this.media, 'ready');\n        }, 0);\n\n        // Set the title\n        ui.setTitle.call(this);\n    },\n\n    // Setup aria attribute for play and iframe title\n    setTitle() {\n        // Find the current text\n        let label = this.config.i18n.play;\n\n        // If there's a media title set, use that for the label\n        if (utils.is.string(this.config.title) && !utils.is.empty(this.config.title)) {\n            label += `, ${this.config.title}`;\n\n            // Set container label\n            this.elements.container.setAttribute('aria-label', this.config.title);\n        }\n\n        // If there's a play button, set label\n        if (utils.is.nodeList(this.elements.buttons.play)) {\n            Array.from(this.elements.buttons.play).forEach(button => {\n                button.setAttribute('aria-label', label);\n            });\n        }\n\n        // Set iframe title\n        // https://github.com/sampotts/plyr/issues/124\n        if (this.isEmbed) {\n            const iframe = utils.getElement.call(this, 'iframe');\n\n            if (!utils.is.element(iframe)) {\n                return;\n            }\n\n            // Default to media type\n            const title = !utils.is.empty(this.config.title) ? this.config.title : 'video';\n\n            iframe.setAttribute('title', this.config.i18n.frameTitle.replace('{title}', title));\n        }\n    },\n\n    // Check playing state\n    checkPlaying() {\n        // Class hooks\n        utils.toggleClass(this.elements.container, this.config.classNames.playing, this.playing);\n        utils.toggleClass(this.elements.container, this.config.classNames.stopped, this.paused);\n\n        // Set ARIA state\n        utils.toggleState(this.elements.buttons.play, this.playing);\n\n        // Toggle controls\n        this.toggleControls(!this.playing);\n    },\n\n    // Check if media is loading\n    checkLoading(event) {\n        this.loading = [\n            'stalled',\n            'waiting',\n        ].includes(event.type);\n\n        // Clear timer\n        clearTimeout(this.timers.loading);\n\n        // Timer to prevent flicker when seeking\n        this.timers.loading = setTimeout(() => {\n            // Toggle container class hook\n            utils.toggleClass(this.elements.container, this.config.classNames.loading, this.loading);\n\n            // Show controls if loading, hide if done\n            this.toggleControls(this.loading);\n        }, this.loading ? 250 : 0);\n    },\n\n    // Check if media failed to load\n    checkFailed() {\n        // https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/networkState\n        this.failed = this.media.networkState === 3;\n\n        if (this.failed) {\n            utils.toggleClass(this.elements.container, this.config.classNames.loading, false);\n            utils.toggleClass(this.elements.container, this.config.classNames.error, true);\n        }\n\n        // Clear timer\n        clearTimeout(this.timers.failed);\n\n        // Timer to prevent flicker when seeking\n        this.timers.loading = setTimeout(() => {\n            // Toggle container class hook\n            utils.toggleClass(this.elements.container, this.config.classNames.loading, this.loading);\n\n            // Show controls if loading, hide if done\n            this.toggleControls(this.loading);\n        }, this.loading ? 250 : 0);\n    },\n\n    // Update volume UI and storage\n    updateVolume() {\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // Update range\n        if (utils.is.element(this.elements.inputs.volume)) {\n            ui.setRange.call(this, this.elements.inputs.volume, this.muted ? 0 : this.volume);\n        }\n\n        // Update mute state\n        if (utils.is.element(this.elements.buttons.mute)) {\n            utils.toggleState(this.elements.buttons.mute, this.muted || this.volume === 0);\n        }\n    },\n\n    // Update seek value and lower fill\n    setRange(target, value = 0) {\n        if (!utils.is.element(target)) {\n            return;\n        }\n\n        // eslint-disable-next-line\n        target.value = value;\n\n        // Webkit range fill\n        controls.updateRangeFill.call(this, target);\n    },\n\n    // Set <progress> value\n    setProgress(target, input) {\n        const value = utils.is.number(input) ? input : 0;\n        const progress = utils.is.element(target) ? target : this.elements.display.buffer;\n\n        // Update value and label\n        if (utils.is.element(progress)) {\n            progress.value = value;\n\n            // Update text label inside\n            const label = progress.getElementsByTagName('span')[0];\n            if (utils.is.element(label)) {\n                label.childNodes[0].nodeValue = value;\n            }\n        }\n    },\n\n    // Update <progress> elements\n    updateProgress(event) {\n        if (!this.supported.ui || !utils.is.event(event)) {\n            return;\n        }\n\n        let value = 0;\n\n        if (event) {\n            switch (event.type) {\n                // Video playing\n                case 'timeupdate':\n                case 'seeking':\n                    value = utils.getPercentage(this.currentTime, this.duration);\n\n                    // Set seek range value only if it's a 'natural' time event\n                    if (event.type === 'timeupdate') {\n                        ui.setRange.call(this, this.elements.inputs.seek, value);\n                    }\n\n                    break;\n\n                // Check buffer status\n                case 'playing':\n                case 'progress':\n                    value = (() => {\n                        const { buffered } = this.media;\n\n                        if (buffered && buffered.length) {\n                            // HTML5\n                            return utils.getPercentage(buffered.end(0), this.duration);\n                        } else if (utils.is.number(buffered)) {\n                            // YouTube returns between 0 and 1\n                            return buffered * 100;\n                        }\n\n                        return 0;\n                    })();\n\n                    ui.setProgress.call(this, this.elements.display.buffer, value);\n\n                    break;\n\n                default:\n                    break;\n            }\n        }\n    },\n\n    // Update the displayed time\n    updateTimeDisplay(target = null, time = 0, inverted = false) {\n        // Bail if there's no element to display or the value isn't a number\n        if (!utils.is.element(target) || !utils.is.number(time)) {\n            return;\n        }\n\n        // Always display hours if duration is over an hour\n        const displayHours = utils.getHours(this.duration) > 0;\n\n        // eslint-disable-next-line no-param-reassign\n        target.textContent = utils.formatTime(time, displayHours, inverted);\n    },\n\n    // Handle time change event\n    timeUpdate(event) {\n        // Only invert if only one time element is displayed and used for both duration and currentTime\n        const invert = !utils.is.element(this.elements.display.duration) && this.config.invertTime;\n\n        // Duration\n        ui.updateTimeDisplay.call(this, this.elements.display.currentTime, invert ? this.duration - this.currentTime : this.currentTime, invert);\n\n        // Ignore updates while seeking\n        if (event && event.type === 'timeupdate' && this.media.seeking) {\n            return;\n        }\n\n        // Playing progress\n        ui.updateProgress.call(this, event);\n    },\n\n    // Show the duration on metadataloaded\n    durationUpdate() {\n        if (!this.supported.ui) {\n            return;\n        }\n\n        // If there's a spot to display duration\n        const hasDuration = utils.is.element(this.elements.display.duration);\n\n        // If there's only one time display, display duration there\n        if (!hasDuration && this.config.displayDuration && this.paused) {\n            ui.updateTimeDisplay.call(this, this.elements.display.currentTime, this.duration);\n        }\n\n        // If there's a duration element, update content\n        if (hasDuration) {\n            ui.updateTimeDisplay.call(this, this.elements.display.duration, this.duration);\n        }\n\n        // Update the tooltip (if visible)\n        controls.updateSeekTooltip.call(this);\n    },\n};\n\nexport default ui;\n","// ==========================================================================\n// Plyr controls\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport ui from './ui';\nimport captions from './captions';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nconst controls = {\n    // Webkit polyfill for lower fill range\n    updateRangeFill(target) {\n        // WebKit only\n        if (!browser.isWebkit) {\n            return;\n        }\n\n        // Get range from event if event passed\n        const range = utils.is.event(target) ? target.target : target;\n\n        // Needs to be a valid <input type='range'>\n        if (!utils.is.element(range) || range.getAttribute('type') !== 'range') {\n            return;\n        }\n\n        // Set CSS custom property\n        range.style.setProperty('--value', `${range.value / range.max * 100}%`);\n    },\n\n    // Get icon URL\n    getIconUrl() {\n        return {\n            url: this.config.iconUrl,\n            absolute: this.config.iconUrl.indexOf('http') === 0 || (browser.isIE && !window.svg4everybody),\n        };\n    },\n\n    // Create <svg> icon\n    createIcon(type, attributes) {\n        const namespace = 'http://www.w3.org/2000/svg';\n        const iconUrl = controls.getIconUrl.call(this);\n        const iconPath = `${!iconUrl.absolute ? iconUrl.url : ''}#${this.config.iconPrefix}`;\n\n        // Create <svg>\n        const icon = document.createElementNS(namespace, 'svg');\n        utils.setAttributes(\n            icon,\n            utils.extend(attributes, {\n                role: 'presentation',\n            }),\n        );\n\n        // Create the <use> to reference sprite\n        const use = document.createElementNS(namespace, 'use');\n        const path = `${iconPath}-${type}`;\n\n        // Set `href` attributes\n        // https://github.com/sampotts/plyr/issues/460\n        // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/xlink:href\n        if ('href' in use) {\n            use.setAttributeNS('http://www.w3.org/1999/xlink', 'href', path);\n        } else {\n            use.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', path);\n        }\n\n        // Add <use> to <svg>\n        icon.appendChild(use);\n\n        return icon;\n    },\n\n    // Create hidden text label\n    createLabel(type, attr) {\n        let text = this.config.i18n[type];\n        const attributes = Object.assign({}, attr);\n\n        switch (type) {\n            case 'pip':\n                text = 'PIP';\n                break;\n\n            case 'airplay':\n                text = 'AirPlay';\n                break;\n\n            default:\n                break;\n        }\n\n        if ('class' in attributes) {\n            attributes.class += ` ${this.config.classNames.hidden}`;\n        } else {\n            attributes.class = this.config.classNames.hidden;\n        }\n\n        return utils.createElement('span', attributes, text);\n    },\n\n    // Create a badge\n    createBadge(text) {\n        if (utils.is.empty(text)) {\n            return null;\n        }\n\n        const badge = utils.createElement('span', {\n            class: this.config.classNames.menu.value,\n        });\n\n        badge.appendChild(\n            utils.createElement(\n                'span',\n                {\n                    class: this.config.classNames.menu.badge,\n                },\n                text,\n            ),\n        );\n\n        return badge;\n    },\n\n    // Create a <button>\n    createButton(buttonType, attr) {\n        const button = utils.createElement('button');\n        const attributes = Object.assign({}, attr);\n        let type = buttonType;\n\n        let toggle = false;\n        let label;\n        let icon;\n        let labelPressed;\n        let iconPressed;\n\n        if (!('type' in attributes)) {\n            attributes.type = 'button';\n        }\n\n        if ('class' in attributes) {\n            if (attributes.class.includes(this.config.classNames.control)) {\n                attributes.class += ` ${this.config.classNames.control}`;\n            }\n        } else {\n            attributes.class = this.config.classNames.control;\n        }\n\n        // Large play button\n        switch (type) {\n            case 'play':\n                toggle = true;\n                label = 'play';\n                labelPressed = 'pause';\n                icon = 'play';\n                iconPressed = 'pause';\n                break;\n\n            case 'mute':\n                toggle = true;\n                label = 'mute';\n                labelPressed = 'unmute';\n                icon = 'volume';\n                iconPressed = 'muted';\n                break;\n\n            case 'captions':\n                toggle = true;\n                label = 'enableCaptions';\n                labelPressed = 'disableCaptions';\n                icon = 'captions-off';\n                iconPressed = 'captions-on';\n                break;\n\n            case 'fullscreen':\n                toggle = true;\n                label = 'enterFullscreen';\n                labelPressed = 'exitFullscreen';\n                icon = 'enter-fullscreen';\n                iconPressed = 'exit-fullscreen';\n                break;\n\n            case 'play-large':\n                attributes.class += ` ${this.config.classNames.control}--overlaid`;\n                type = 'play';\n                label = 'play';\n                icon = 'play';\n                break;\n\n            default:\n                label = type;\n                icon = type;\n        }\n\n        // Setup toggle icon and labels\n        if (toggle) {\n            // Icon\n            button.appendChild(controls.createIcon.call(this, iconPressed, { class: 'icon--pressed' }));\n            button.appendChild(controls.createIcon.call(this, icon, { class: 'icon--not-pressed' }));\n\n            // Label/Tooltip\n            button.appendChild(controls.createLabel.call(this, labelPressed, { class: 'label--pressed' }));\n            button.appendChild(controls.createLabel.call(this, label, { class: 'label--not-pressed' }));\n\n            // Add aria attributes\n            attributes['aria-pressed'] = false;\n            attributes['aria-label'] = this.config.i18n[label];\n        } else {\n            button.appendChild(controls.createIcon.call(this, icon));\n            button.appendChild(controls.createLabel.call(this, label));\n        }\n\n        // Merge attributes\n        utils.extend(attributes, utils.getAttributesFromSelector(this.config.selectors.buttons[type], attributes));\n\n        utils.setAttributes(button, attributes);\n\n        // We have multiple play buttons\n        if (type === 'play') {\n            if (!utils.is.array(this.elements.buttons[type])) {\n                this.elements.buttons[type] = [];\n            }\n\n            this.elements.buttons[type].push(button);\n        } else {\n            this.elements.buttons[type] = button;\n        }\n\n        return button;\n    },\n\n    // Create an <input type='range'>\n    createRange(type, attributes) {\n        // Seek label\n        const label = utils.createElement(\n            'label',\n            {\n                for: attributes.id,\n                class: this.config.classNames.hidden,\n            },\n            this.config.i18n[type],\n        );\n\n        // Seek input\n        const input = utils.createElement(\n            'input',\n            utils.extend(\n                utils.getAttributesFromSelector(this.config.selectors.inputs[type]),\n                {\n                    type: 'range',\n                    min: 0,\n                    max: 100,\n                    step: 0.01,\n                    value: 0,\n                    autocomplete: 'off',\n                },\n                attributes,\n            ),\n        );\n\n        this.elements.inputs[type] = input;\n\n        // Set the fill for webkit now\n        controls.updateRangeFill.call(this, input);\n\n        return {\n            label,\n            input,\n        };\n    },\n\n    // Create a <progress>\n    createProgress(type, attributes) {\n        const progress = utils.createElement(\n            'progress',\n            utils.extend(\n                utils.getAttributesFromSelector(this.config.selectors.display[type]),\n                {\n                    min: 0,\n                    max: 100,\n                    value: 0,\n                },\n                attributes,\n            ),\n        );\n\n        // Create the label inside\n        if (type !== 'volume') {\n            progress.appendChild(utils.createElement('span', null, '0'));\n\n            let suffix = '';\n            switch (type) {\n                case 'played':\n                    suffix = this.config.i18n.played;\n                    break;\n\n                case 'buffer':\n                    suffix = this.config.i18n.buffered;\n                    break;\n\n                default:\n                    break;\n            }\n\n            progress.textContent = `% ${suffix.toLowerCase()}`;\n        }\n\n        this.elements.display[type] = progress;\n\n        return progress;\n    },\n\n    // Create time display\n    createTime(type) {\n        const container = utils.createElement('div', {\n            class: 'plyr__time',\n        });\n\n        container.appendChild(\n            utils.createElement(\n                'span',\n                {\n                    class: this.config.classNames.hidden,\n                },\n                this.config.i18n[type],\n            ),\n        );\n\n        container.appendChild(utils.createElement('span', utils.getAttributesFromSelector(this.config.selectors.display[type]), '00:00'));\n\n        this.elements.display[type] = container;\n\n        return container;\n    },\n\n    // Create a settings menu item\n    createMenuItem(value, list, type, title, badge = null, checked = false) {\n        const item = utils.createElement('li');\n\n        const label = utils.createElement('label', {\n            class: this.config.classNames.control,\n        });\n\n        const radio = utils.createElement(\n            'input',\n            utils.extend(utils.getAttributesFromSelector(this.config.selectors.inputs[type]), {\n                type: 'radio',\n                name: `plyr-${type}`,\n                value,\n                checked,\n                class: 'plyr__sr-only',\n            }),\n        );\n\n        const faux = utils.createElement('span', { 'aria-hidden': true });\n\n        label.appendChild(radio);\n        label.appendChild(faux);\n        label.insertAdjacentHTML('beforeend', title);\n\n        if (utils.is.element(badge)) {\n            label.appendChild(badge);\n        }\n\n        item.appendChild(label);\n        list.appendChild(item);\n    },\n\n    // Update hover tooltip for seeking\n    updateSeekTooltip(event) {\n        // Bail if setting not true\n        if (\n            !this.config.tooltips.seek ||\n            !utils.is.element(this.elements.inputs.seek) ||\n            !utils.is.element(this.elements.display.seekTooltip) ||\n            this.duration === 0\n        ) {\n            return;\n        }\n\n        // Calculate percentage\n        let percent = 0;\n        const clientRect = this.elements.inputs.seek.getBoundingClientRect();\n        const visible = `${this.config.classNames.tooltip}--visible`;\n\n        // Determine percentage, if already visible\n        if (utils.is.event(event)) {\n            percent = 100 / clientRect.width * (event.pageX - clientRect.left);\n        } else if (utils.hasClass(this.elements.display.seekTooltip, visible)) {\n            percent = parseFloat(this.elements.display.seekTooltip.style.left, 10);\n        } else {\n            return;\n        }\n\n        // Set bounds\n        if (percent < 0) {\n            percent = 0;\n        } else if (percent > 100) {\n            percent = 100;\n        }\n\n        // Display the time a click would seek to\n        ui.updateTimeDisplay.call(this, this.elements.display.seekTooltip, this.duration / 100 * percent);\n\n        // Set position\n        this.elements.display.seekTooltip.style.left = `${percent}%`;\n\n        // Show/hide the tooltip\n        // If the event is a moues in/out and percentage is inside bounds\n        if (utils.is.event(event) && [\n            'mouseenter',\n            'mouseleave',\n        ].includes(event.type)) {\n            utils.toggleClass(this.elements.display.seekTooltip, visible, event.type === 'mouseenter');\n        }\n    },\n\n    // Hide/show a tab\n    toggleTab(setting, toggle) {\n        const tab = this.elements.settings.tabs[setting];\n        const pane = this.elements.settings.panes[setting];\n\n        utils.toggleHidden(tab, !toggle);\n        utils.toggleHidden(pane, !toggle);\n    },\n\n    // Set the YouTube quality menu\n    // TODO: Support for HTML5\n    setQualityMenu(options) {\n        // Menu required\n        if (!utils.is.element(this.elements.settings.panes.quality)) {\n            return;\n        }\n\n        const type = 'quality';\n        const list = this.elements.settings.panes.quality.querySelector('ul');\n\n        // Set options if passed and filter based on config\n        if (utils.is.array(options)) {\n            this.options.quality = options.filter(quality => this.config.quality.options.includes(quality));\n        } else {\n            this.options.quality = this.config.quality.options;\n        }\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.options.quality) && this.isYouTube;\n        controls.toggleTab.call(this, type, toggle);\n\n        // If we're hiding, nothing more to do\n        if (!toggle) {\n            return;\n        }\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // Get the badge HTML for HD, 4K etc\n        const getBadge = quality => {\n            let label = '';\n\n            switch (quality) {\n                case 'hd2160':\n                    label = '4K';\n                    break;\n\n                case 'hd1440':\n                    label = 'WQHD';\n                    break;\n\n                case 'hd1080':\n                    label = 'HD';\n                    break;\n\n                case 'hd720':\n                    label = 'HD';\n                    break;\n\n                default:\n                    break;\n            }\n\n            if (!label.length) {\n                return null;\n            }\n\n            return controls.createBadge.call(this, label);\n        };\n\n        this.options.quality.forEach(quality =>\n            controls.createMenuItem.call(this, quality, list, type, controls.getLabel.call(this, 'quality', quality), getBadge(quality)),\n        );\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Translate a value into a nice label\n    // TODO: Localisation\n    getLabel(setting, value) {\n        switch (setting) {\n            case 'speed':\n                return value === 1 ? 'Normal' : `${value}&times;`;\n\n            case 'quality':\n                switch (value) {\n                    case 'hd2160':\n                        return '2160P';\n                    case 'hd1440':\n                        return '1440P';\n                    case 'hd1080':\n                        return '1080P';\n                    case 'hd720':\n                        return '720P';\n                    case 'large':\n                        return '480P';\n                    case 'medium':\n                        return '360P';\n                    case 'small':\n                        return '240P';\n                    case 'tiny':\n                        return 'Tiny';\n                    case 'default':\n                        return 'Auto';\n                    default:\n                        return value;\n                }\n\n            case 'captions':\n                return controls.getLanguage.call(this);\n\n            default:\n                return null;\n        }\n    },\n\n    // Update the selected setting\n    updateSetting(setting, container) {\n        const pane = this.elements.settings.panes[setting];\n        let value = null;\n        let list = container;\n\n        switch (setting) {\n            case 'captions':\n                value = this.captions.active ? this.captions.language : '';\n                break;\n\n            default:\n                value = this[setting];\n\n                // Get default\n                if (utils.is.empty(value)) {\n                    value = this.config[setting].default;\n                }\n\n                // Unsupported value\n                if (!this.options[setting].includes(value)) {\n                    this.debug.warn(`Unsupported value of '${value}' for ${setting}`);\n                    return;\n                }\n\n                // Disabled value\n                if (!this.config[setting].options.includes(value)) {\n                    this.debug.warn(`Disabled value of '${value}' for ${setting}`);\n                    return;\n                }\n\n                break;\n        }\n\n        // Get the list if we need to\n        if (!utils.is.element(list)) {\n            list = pane && pane.querySelector('ul');\n        }\n\n        // Update the label\n        if (!utils.is.empty(value)) {\n            const label = this.elements.settings.tabs[setting].querySelector(`.${this.config.classNames.menu.value}`);\n            label.innerHTML = controls.getLabel.call(this, setting, value);\n        }\n\n        // Find the radio option\n        const target = list && list.querySelector(`input[value=\"${value}\"]`);\n\n        if (utils.is.element(target)) {\n            // Check it\n            target.checked = true;\n        }\n    },\n\n    // Set the looping options\n    /* setLoopMenu() {\n        // Menu required\n        if (!utils.is.element(this.elements.settings.panes.loop)) {\n            return;\n        }\n\n        const options = ['start', 'end', 'all', 'reset'];\n        const list = this.elements.settings.panes.loop.querySelector('ul');\n\n        // Show the pane and tab\n        utils.toggleHidden(this.elements.settings.tabs.loop, false);\n        utils.toggleHidden(this.elements.settings.panes.loop, false);\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.loop.options);\n        controls.toggleTab.call(this, 'loop', toggle);\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        options.forEach(option => {\n            const item = utils.createElement('li');\n\n            const button = utils.createElement(\n                'button',\n                utils.extend(utils.getAttributesFromSelector(this.config.selectors.buttons.loop), {\n                    type: 'button',\n                    class: this.config.classNames.control,\n                    'data-plyr-loop-action': option,\n                }),\n                this.config.i18n[option]\n            );\n\n            if (['start', 'end'].includes(option)) {\n                const badge = controls.createBadge.call(this, '00:00');\n                button.appendChild(badge);\n            }\n\n            item.appendChild(button);\n            list.appendChild(item);\n        });\n    }, */\n\n    // Get current selected caption language\n    // TODO: rework this to user the getter in the API?\n    getLanguage() {\n        if (!this.supported.ui) {\n            return null;\n        }\n\n        if (!support.textTracks || !captions.getTracks.call(this).length) {\n            return this.config.i18n.none;\n        }\n\n        if (this.captions.active) {\n            const currentTrack = captions.getCurrentTrack.call(this);\n\n            if (utils.is.track(currentTrack)) {\n                return currentTrack.label;\n            }\n        }\n\n        return this.config.i18n.disabled;\n    },\n\n    // Set a list of available captions languages\n    setCaptionsMenu() {\n        // TODO: Captions or language? Currently it's mixed\n        const type = 'captions';\n        const list = this.elements.settings.panes.captions.querySelector('ul');\n\n        // Toggle the pane and tab\n        const hasTracks = captions.getTracks.call(this).length;\n        controls.toggleTab.call(this, type, hasTracks);\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // If there's no captions, bail\n        if (!hasTracks) {\n            return;\n        }\n\n        // Re-map the tracks into just the data we need\n        const tracks = captions.getTracks.call(this).map(track => ({\n            language: track.language,\n            label: !utils.is.empty(track.label) ? track.label : track.language.toUpperCase(),\n        }));\n\n        // Add the \"None\" option to turn off captions\n        tracks.unshift({\n            language: '',\n            label: this.config.i18n.none,\n        });\n\n        // Generate options\n        tracks.forEach(track => {\n            controls.createMenuItem.call(\n                this,\n                track.language,\n                list,\n                'language',\n                track.label || track.language,\n                controls.createBadge.call(this, track.language.toUpperCase()),\n                track.language.toLowerCase() === this.captions.language.toLowerCase(),\n            );\n        });\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Set a list of available captions languages\n    setSpeedMenu() {\n        // Menu required\n        if (!utils.is.element(this.elements.settings.panes.speed)) {\n            return;\n        }\n\n        const type = 'speed';\n\n        // Set the default speeds\n        if (!utils.is.object(this.options.speed) || !Object.keys(this.options.speed).length) {\n            this.options.speed = [\n                0.5,\n                0.75,\n                1,\n                1.25,\n                1.5,\n                1.75,\n                2,\n            ];\n        }\n\n        // Set options if passed and filter based on config\n        this.options.speed = this.options.speed.filter(speed => this.config.speed.options.includes(speed));\n\n        // Toggle the pane and tab\n        const toggle = !utils.is.empty(this.options.speed);\n        controls.toggleTab.call(this, type, toggle);\n\n        // If we're hiding, nothing more to do\n        if (!toggle) {\n            return;\n        }\n\n        // Get the list to populate\n        const list = this.elements.settings.panes.speed.querySelector('ul');\n\n        // Show the pane and tab\n        utils.toggleHidden(this.elements.settings.tabs.speed, false);\n        utils.toggleHidden(this.elements.settings.panes.speed, false);\n\n        // Empty the menu\n        utils.emptyElement(list);\n\n        // Create items\n        this.options.speed.forEach(speed => controls.createMenuItem.call(this, speed, list, type, controls.getLabel.call(this, 'speed', speed)));\n\n        controls.updateSetting.call(this, type, list);\n    },\n\n    // Show/hide menu\n    toggleMenu(event) {\n        const { form } = this.elements.settings;\n        const button = this.elements.buttons.settings;\n\n        // Menu and button are required\n        if (!utils.is.element(form) || !utils.is.element(button)) {\n            return;\n        }\n\n        const show = utils.is.boolean(event) ? event : utils.is.element(form) && form.getAttribute('aria-hidden') === 'true';\n\n        if (utils.is.event(event)) {\n            const isMenuItem = utils.is.element(form) && form.contains(event.target);\n            const isButton = event.target === this.elements.buttons.settings;\n\n            // If the click was inside the form or if the click\n            // wasn't the button or menu item and we're trying to\n            // show the menu (a doc click shouldn't show the menu)\n            if (isMenuItem || (!isMenuItem && !isButton && show)) {\n                return;\n            }\n\n            // Prevent the toggle being caught by the doc listener\n            if (isButton) {\n                event.stopPropagation();\n            }\n        }\n\n        // Set form and button attributes\n        if (utils.is.element(button)) {\n            button.setAttribute('aria-expanded', show);\n        }\n\n        if (utils.is.element(form)) {\n            form.setAttribute('aria-hidden', !show);\n            utils.toggleClass(this.elements.container, this.config.classNames.menu.open, show);\n\n            if (show) {\n                form.removeAttribute('tabindex');\n            } else {\n                form.setAttribute('tabindex', -1);\n            }\n        }\n    },\n\n    // Get the natural size of a tab\n    getTabSize(tab) {\n        const clone = tab.cloneNode(true);\n        clone.style.position = 'absolute';\n        clone.style.opacity = 0;\n        clone.setAttribute('aria-hidden', false);\n\n        // Prevent input's being unchecked due to the name being identical\n        Array.from(clone.querySelectorAll('input[name]')).forEach(input => {\n            const name = input.getAttribute('name');\n            input.setAttribute('name', `${name}-clone`);\n        });\n\n        // Append to parent so we get the \"real\" size\n        tab.parentNode.appendChild(clone);\n\n        // Get the sizes before we remove\n        const width = clone.scrollWidth;\n        const height = clone.scrollHeight;\n\n        // Remove from the DOM\n        utils.removeElement(clone);\n\n        return {\n            width,\n            height,\n        };\n    },\n\n    // Toggle Menu\n    showTab(event) {\n        const { menu } = this.elements.settings;\n        const tab = event.target;\n        const show = tab.getAttribute('aria-expanded') === 'false';\n        const pane = document.getElementById(tab.getAttribute('aria-controls'));\n\n        // Nothing to show, bail\n        if (!utils.is.element(pane)) {\n            return;\n        }\n\n        // Are we targetting a tab? If not, bail\n        const isTab = pane.getAttribute('role') === 'tabpanel';\n        if (!isTab) {\n            return;\n        }\n\n        // Hide all other tabs\n        // Get other tabs\n        const current = menu.querySelector('[role=\"tabpanel\"][aria-hidden=\"false\"]');\n        const container = current.parentNode;\n\n        // Set other toggles to be expanded false\n        Array.from(menu.querySelectorAll(`[aria-controls=\"${current.getAttribute('id')}\"]`)).forEach(toggle => {\n            toggle.setAttribute('aria-expanded', false);\n        });\n\n        // If we can do fancy animations, we'll animate the height/width\n        if (support.transitions && !support.reducedMotion) {\n            // Set the current width as a base\n            container.style.width = `${current.scrollWidth}px`;\n            container.style.height = `${current.scrollHeight}px`;\n\n            // Get potential sizes\n            const size = controls.getTabSize.call(this, pane);\n\n            // Restore auto height/width\n            const restore = e => {\n                // We're only bothered about height and width on the container\n                if (e.target !== container || ![\n                    'width',\n                    'height',\n                ].includes(e.propertyName)) {\n                    return;\n                }\n\n                // Revert back to auto\n                container.style.width = '';\n                container.style.height = '';\n\n                // Only listen once\n                utils.off(container, utils.transitionEndEvent, restore);\n            };\n\n            // Listen for the transition finishing and restore auto height/width\n            utils.on(container, utils.transitionEndEvent, restore);\n\n            // Set dimensions to target\n            container.style.width = `${size.width}px`;\n            container.style.height = `${size.height}px`;\n        }\n\n        // Set attributes on current tab\n        current.setAttribute('aria-hidden', true);\n        current.setAttribute('tabindex', -1);\n\n        // Set attributes on target\n        pane.setAttribute('aria-hidden', !show);\n        tab.setAttribute('aria-expanded', show);\n        pane.removeAttribute('tabindex');\n\n        // Focus the first item\n        pane.querySelectorAll('button:not(:disabled), input:not(:disabled), [tabindex]')[0].focus();\n    },\n\n    // Build the default HTML\n    // TODO: Set order based on order in the config.controls array?\n    create(data) {\n        // Do nothing if we want no controls\n        if (utils.is.empty(this.config.controls)) {\n            return null;\n        }\n\n        // Create the container\n        const container = utils.createElement('div', utils.getAttributesFromSelector(this.config.selectors.controls.wrapper));\n\n        // Restart button\n        if (this.config.controls.includes('restart')) {\n            container.appendChild(controls.createButton.call(this, 'restart'));\n        }\n\n        // Rewind button\n        if (this.config.controls.includes('rewind')) {\n            container.appendChild(controls.createButton.call(this, 'rewind'));\n        }\n\n        // Play/Pause button\n        if (this.config.controls.includes('play')) {\n            container.appendChild(controls.createButton.call(this, 'play'));\n        }\n\n        // Fast forward button\n        if (this.config.controls.includes('fast-forward')) {\n            container.appendChild(controls.createButton.call(this, 'fast-forward'));\n        }\n\n        // Progress\n        if (this.config.controls.includes('progress')) {\n            const progress = utils.createElement('div', utils.getAttributesFromSelector(this.config.selectors.progress));\n\n            // Seek range slider\n            const seek = controls.createRange.call(this, 'seek', {\n                id: `plyr-seek-${data.id}`,\n            });\n            progress.appendChild(seek.label);\n            progress.appendChild(seek.input);\n\n            // Buffer progress\n            progress.appendChild(controls.createProgress.call(this, 'buffer'));\n\n            // TODO: Add loop display indicator\n\n            // Seek tooltip\n            if (this.config.tooltips.seek) {\n                const tooltip = utils.createElement(\n                    'span',\n                    {\n                        role: 'tooltip',\n                        class: this.config.classNames.tooltip,\n                    },\n                    '00:00',\n                );\n\n                progress.appendChild(tooltip);\n                this.elements.display.seekTooltip = tooltip;\n            }\n\n            this.elements.progress = progress;\n            container.appendChild(this.elements.progress);\n        }\n\n        // Media current time display\n        if (this.config.controls.includes('current-time')) {\n            container.appendChild(controls.createTime.call(this, 'currentTime'));\n        }\n\n        // Media duration display\n        if (this.config.controls.includes('duration')) {\n            container.appendChild(controls.createTime.call(this, 'duration'));\n        }\n\n        // Toggle mute button\n        if (this.config.controls.includes('mute')) {\n            container.appendChild(controls.createButton.call(this, 'mute'));\n        }\n\n        // Volume range control\n        if (this.config.controls.includes('volume')) {\n            const volume = utils.createElement('div', {\n                class: 'plyr__volume',\n            });\n\n            // Set the attributes\n            const attributes = {\n                max: 1,\n                step: 0.05,\n                value: this.config.volume,\n            };\n\n            // Create the volume range slider\n            const range = controls.createRange.call(\n                this,\n                'volume',\n                utils.extend(attributes, {\n                    id: `plyr-volume-${data.id}`,\n                }),\n            );\n            volume.appendChild(range.label);\n            volume.appendChild(range.input);\n\n            this.elements.volume = volume;\n\n            container.appendChild(volume);\n        }\n\n        // Toggle captions button\n        if (this.config.controls.includes('captions')) {\n            container.appendChild(controls.createButton.call(this, 'captions'));\n        }\n\n        // Settings button / menu\n        if (this.config.controls.includes('settings') && !utils.is.empty(this.config.settings)) {\n            const menu = utils.createElement('div', {\n                class: 'plyr__menu',\n            });\n\n            menu.appendChild(\n                controls.createButton.call(this, 'settings', {\n                    id: `plyr-settings-toggle-${data.id}`,\n                    'aria-haspopup': true,\n                    'aria-controls': `plyr-settings-${data.id}`,\n                    'aria-expanded': false,\n                }),\n            );\n\n            const form = utils.createElement('form', {\n                class: 'plyr__menu__container',\n                id: `plyr-settings-${data.id}`,\n                'aria-hidden': true,\n                'aria-labelled-by': `plyr-settings-toggle-${data.id}`,\n                role: 'tablist',\n                tabindex: -1,\n            });\n\n            const inner = utils.createElement('div');\n\n            const home = utils.createElement('div', {\n                id: `plyr-settings-${data.id}-home`,\n                'aria-hidden': false,\n                'aria-labelled-by': `plyr-settings-toggle-${data.id}`,\n                role: 'tabpanel',\n            });\n\n            // Create the tab list\n            const tabs = utils.createElement('ul', {\n                role: 'tablist',\n            });\n\n            // Build the tabs\n            this.config.settings.forEach(type => {\n                const tab = utils.createElement('li', {\n                    role: 'tab',\n                    hidden: '',\n                });\n\n                const button = utils.createElement(\n                    'button',\n                    utils.extend(utils.getAttributesFromSelector(this.config.selectors.buttons.settings), {\n                        type: 'button',\n                        class: `${this.config.classNames.control} ${this.config.classNames.control}--forward`,\n                        id: `plyr-settings-${data.id}-${type}-tab`,\n                        'aria-haspopup': true,\n                        'aria-controls': `plyr-settings-${data.id}-${type}`,\n                        'aria-expanded': false,\n                    }),\n                    this.config.i18n[type],\n                );\n\n                const value = utils.createElement('span', {\n                    class: this.config.classNames.menu.value,\n                });\n\n                // Speed contains HTML entities\n                value.innerHTML = data[type];\n\n                button.appendChild(value);\n                tab.appendChild(button);\n                tabs.appendChild(tab);\n\n                this.elements.settings.tabs[type] = tab;\n            });\n\n            home.appendChild(tabs);\n            inner.appendChild(home);\n\n            // Build the panes\n            this.config.settings.forEach(type => {\n                const pane = utils.createElement('div', {\n                    id: `plyr-settings-${data.id}-${type}`,\n                    'aria-hidden': true,\n                    'aria-labelled-by': `plyr-settings-${data.id}-${type}-tab`,\n                    role: 'tabpanel',\n                    tabindex: -1,\n                    hidden: '',\n                });\n\n                const back = utils.createElement(\n                    'button',\n                    {\n                        type: 'button',\n                        class: `${this.config.classNames.control} ${this.config.classNames.control}--back`,\n                        'aria-haspopup': true,\n                        'aria-controls': `plyr-settings-${data.id}-home`,\n                        'aria-expanded': false,\n                    },\n                    this.config.i18n[type],\n                );\n\n                pane.appendChild(back);\n\n                const options = utils.createElement('ul');\n\n                pane.appendChild(options);\n                inner.appendChild(pane);\n\n                this.elements.settings.panes[type] = pane;\n            });\n\n            form.appendChild(inner);\n            menu.appendChild(form);\n            container.appendChild(menu);\n\n            this.elements.settings.form = form;\n            this.elements.settings.menu = menu;\n        }\n\n        // Picture in picture button\n        if (this.config.controls.includes('pip') && support.pip) {\n            container.appendChild(controls.createButton.call(this, 'pip'));\n        }\n\n        // Airplay button\n        if (this.config.controls.includes('airplay') && support.airplay) {\n            container.appendChild(controls.createButton.call(this, 'airplay'));\n        }\n\n        // Toggle fullscreen button\n        if (this.config.controls.includes('fullscreen')) {\n            container.appendChild(controls.createButton.call(this, 'fullscreen'));\n        }\n\n        // Larger overlaid play button\n        if (this.config.controls.includes('play-large')) {\n            this.elements.container.appendChild(controls.createButton.call(this, 'play-large'));\n        }\n\n        this.elements.controls = container;\n\n        if (this.config.controls.includes('settings') && this.config.settings.includes('speed')) {\n            controls.setSpeedMenu.call(this);\n        }\n\n        return container;\n    },\n\n    // Insert controls\n    inject() {\n        // Sprite\n        if (this.config.loadSprite) {\n            const icon = controls.getIconUrl.call(this);\n\n            // Only load external sprite using AJAX\n            if (icon.absolute) {\n                utils.loadSprite(icon.url, 'sprite-plyr');\n            }\n        }\n\n        // Create a unique ID\n        this.id = Math.floor(Math.random() * 10000);\n\n        // Null by default\n        let container = null;\n        this.elements.controls = null;\n\n        // HTML or Element passed as the option\n        if (utils.is.string(this.config.controls) || utils.is.element(this.config.controls)) {\n            container = this.config.controls;\n        } else if (utils.is.function(this.config.controls)) {\n            // A custom function to build controls\n            // The function can return a HTMLElement or String\n            container = this.config.controls({\n                id: this.id,\n                seektime: this.config.seekTime,\n                title: this.config.title,\n            });\n        } else {\n            // Create controls\n            container = controls.create.call(this, {\n                id: this.id,\n                seektime: this.config.seekTime,\n                speed: this.speed,\n                quality: this.quality,\n                captions: controls.getLanguage.call(this),\n                // TODO: Looping\n                // loop: 'None',\n            });\n        }\n\n        // Controls container\n        let target;\n\n        // Inject to custom location\n        if (utils.is.string(this.config.selectors.controls.container)) {\n            target = document.querySelector(this.config.selectors.controls.container);\n        }\n\n        // Inject into the container by default\n        if (!utils.is.element(target)) {\n            target = this.elements.container;\n        }\n\n        // Inject controls HTML\n        if (utils.is.element(container)) {\n            target.appendChild(container);\n        } else {\n            target.insertAdjacentHTML('beforeend', container);\n        }\n\n        // Find the elements if need be\n        if (!utils.is.element(this.elements.controls)) {\n            utils.findElements.call(this);\n        }\n\n        // Edge sometimes doesn't finish the paint so force a redraw\n        if (window.navigator.userAgent.includes('Edge')) {\n            utils.repaint(target);\n        }\n\n        // Setup tooltips\n        if (this.config.tooltips.controls) {\n            const labels = utils.getElements.call(\n                this,\n                [\n                    this.config.selectors.controls.wrapper,\n                    ' ',\n                    this.config.selectors.labels,\n                    ' .',\n                    this.config.classNames.hidden,\n                ].join(''),\n            );\n\n            Array.from(labels).forEach(label => {\n                utils.toggleClass(label, this.config.classNames.hidden, false);\n                utils.toggleClass(label, this.config.classNames.tooltip, true);\n                label.setAttribute('role', 'tooltip');\n            });\n        }\n    },\n};\n\nexport default controls;\n","// ==========================================================================\n// Plyr Event Listeners\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport controls from './controls';\nimport ui from './ui';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nclass Listeners {\n    constructor(player) {\n        this.player = player;\n        this.lastKey = null;\n\n        this.handleKey = this.handleKey.bind(this);\n        this.toggleMenu = this.toggleMenu.bind(this);\n    }\n\n    // Handle key presses\n    handleKey(event) {\n        const code = event.keyCode ? event.keyCode : event.which;\n        const pressed = event.type === 'keydown';\n        const repeat = pressed && code === this.lastKey;\n\n        // Bail if a modifier key is set\n        if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\n            return;\n        }\n\n        // If the event is bubbled from the media element\n        // Firefox doesn't get the keycode for whatever reason\n        if (!utils.is.number(code)) {\n            return;\n        }\n\n        // Seek by the number keys\n        const seekByKey = () => {\n            // Divide the max duration into 10th's and times by the number value\n            this.player.currentTime = this.player.duration / 10 * (code - 48);\n        };\n\n        // Handle the key on keydown\n        // Reset on keyup\n        if (pressed) {\n            // Which keycodes should we prevent default\n            const preventDefault = [\n                48,\n                49,\n                50,\n                51,\n                52,\n                53,\n                54,\n                56,\n                57,\n                32,\n                75,\n                38,\n                40,\n                77,\n                39,\n                37,\n                70,\n                67,\n                73,\n                76,\n                79,\n            ];\n\n            // Check focused element\n            // and if the focused element is not editable (e.g. text input)\n            // and any that accept key input http://webaim.org/techniques/keyboard/\n            const focused = utils.getFocusElement();\n            if (utils.is.element(focused) && utils.matches(focused, this.player.config.selectors.editable)) {\n                return;\n            }\n\n            // If the code is found prevent default (e.g. prevent scrolling for arrows)\n            if (preventDefault.includes(code)) {\n                event.preventDefault();\n                event.stopPropagation();\n            }\n\n            switch (code) {\n                case 48:\n                case 49:\n                case 50:\n                case 51:\n                case 52:\n                case 53:\n                case 54:\n                case 55:\n                case 56:\n                case 57:\n                    // 0-9\n                    if (!repeat) {\n                        seekByKey();\n                    }\n                    break;\n\n                case 32:\n                case 75:\n                    // Space and K key\n                    if (!repeat) {\n                        this.player.togglePlay();\n                    }\n                    break;\n\n                case 38:\n                    // Arrow up\n                    this.player.increaseVolume(0.1);\n                    break;\n\n                case 40:\n                    // Arrow down\n                    this.player.decreaseVolume(0.1);\n                    break;\n\n                case 77:\n                    // M key\n                    if (!repeat) {\n                        this.player.muted = !this.player.muted;\n                    }\n                    break;\n\n                case 39:\n                    // Arrow forward\n                    this.player.forward();\n                    break;\n\n                case 37:\n                    // Arrow back\n                    this.player.rewind();\n                    break;\n\n                case 70:\n                    // F key\n                    this.player.fullscreen.toggle();\n                    break;\n\n                case 67:\n                    // C key\n                    if (!repeat) {\n                        this.player.toggleCaptions();\n                    }\n                    break;\n\n                case 76:\n                    // L key\n                    this.player.loop = !this.player.loop;\n                    break;\n\n                /* case 73:\n                    this.setLoop('start');\n                    break;\n\n                case 76:\n                    this.setLoop();\n                    break;\n\n                case 79:\n                    this.setLoop('end');\n                    break; */\n\n                default:\n                    break;\n            }\n\n            // Escape is handle natively when in full screen\n            // So we only need to worry about non native\n            if (!this.player.fullscreen.enabled && this.player.fullscreen.active && code === 27) {\n                this.player.fullscreen.toggle();\n            }\n\n            // Store last code for next cycle\n            this.lastKey = code;\n        } else {\n            this.lastKey = null;\n        }\n    }\n\n    // Toggle menu\n    toggleMenu(event) {\n        controls.toggleMenu.call(this.player, event);\n    }\n\n    // Global window & document listeners\n    global(toggle = true) {\n        // Keyboard shortcuts\n        if (this.player.config.keyboard.global) {\n            utils.toggleListener(window, 'keydown keyup', this.handleKey, toggle, false);\n        }\n\n        // Click anywhere closes menu\n        utils.toggleListener(document.body, 'click', this.toggleMenu, toggle);\n    }\n\n    // Container listeners\n    container() {\n        // Keyboard shortcuts\n        if (!this.player.config.keyboard.global && this.player.config.keyboard.focused) {\n            utils.on(this.player.elements.container, 'keydown keyup', this.handleKey, false);\n        }\n\n        // Detect tab focus\n        // Remove class on blur/focusout\n        utils.on(this.player.elements.container, 'focusout', event => {\n            utils.toggleClass(event.target, this.player.config.classNames.tabFocus, false);\n        });\n\n        // Add classname to tabbed elements\n        utils.on(this.player.elements.container, 'keydown', event => {\n            if (event.keyCode !== 9) {\n                return;\n            }\n\n            // Delay the adding of classname until the focus has changed\n            // This event fires before the focusin event\n            setTimeout(() => {\n                utils.toggleClass(utils.getFocusElement(), this.player.config.classNames.tabFocus, true);\n            }, 0);\n        });\n\n        // Toggle controls visibility based on mouse movement\n        if (this.player.config.hideControls) {\n            // Toggle controls on mouse events and entering fullscreen\n            utils.on(this.player.elements.container, 'mouseenter mouseleave mousemove touchstart touchend touchmove enterfullscreen exitfullscreen', event => {\n                this.player.toggleControls(event);\n            });\n        }\n    }\n\n    // Listen for media events\n    media() {\n        // Time change on media\n        utils.on(this.player.media, 'timeupdate seeking', event => ui.timeUpdate.call(this.player, event));\n\n        // Display duration\n        utils.on(this.player.media, 'durationchange loadedmetadata', event => ui.durationUpdate.call(this.player, event));\n\n        // Check for audio tracks on load\n        // We can't use `loadedmetadata` as it doesn't seem to have audio tracks at that point\n        utils.on(this.player.media, 'loadeddata', () => {\n            utils.toggleHidden(this.player.elements.volume, !this.player.hasAudio);\n            utils.toggleHidden(this.player.elements.buttons.mute, !this.player.hasAudio);\n        });\n\n        // Handle the media finishing\n        utils.on(this.player.media, 'ended', () => {\n            // Show poster on end\n            if (this.player.isHTML5 && this.player.isVideo && this.player.config.showPosterOnEnd) {\n                // Restart\n                this.player.restart();\n\n                // Re-load media\n                this.player.media.load();\n            }\n        });\n\n        // Check for buffer progress\n        utils.on(this.player.media, 'progress playing', event => ui.updateProgress.call(this.player, event));\n\n        // Handle native mute\n        utils.on(this.player.media, 'volumechange', event => ui.updateVolume.call(this.player, event));\n\n        // Handle native play/pause\n        utils.on(this.player.media, 'playing play pause ended', event => ui.checkPlaying.call(this.player, event));\n\n        // Loading\n        utils.on(this.player.media, 'waiting canplay seeked playing', event => ui.checkLoading.call(this.player, event));\n\n        // Check if media failed to load\n        // utils.on(this.player.media, 'play', event => ui.checkFailed.call(this.player, event));\n\n        // Click video\n        if (this.player.supported.ui && this.player.config.clickToPlay && !this.player.isAudio) {\n            // Re-fetch the wrapper\n            const wrapper = utils.getElement.call(this.player, `.${this.player.config.classNames.video}`);\n\n            // Bail if there's no wrapper (this should never happen)\n            if (!utils.is.element(wrapper)) {\n                return;\n            }\n\n            // On click play, pause ore restart\n            utils.on(wrapper, 'click', () => {\n                // Touch devices will just show controls (if we're hiding controls)\n                if (this.player.config.hideControls && support.touch && !this.player.paused) {\n                    return;\n                }\n\n                if (this.player.paused) {\n                    this.player.play();\n                } else if (this.player.ended) {\n                    this.player.restart();\n                    this.player.play();\n                } else {\n                    this.player.pause();\n                }\n            });\n        }\n\n        // Disable right click\n        if (this.player.supported.ui && this.player.config.disableContextMenu) {\n            utils.on(\n                this.player.media,\n                'contextmenu',\n                event => {\n                    event.preventDefault();\n                },\n                false,\n            );\n        }\n\n        // Volume change\n        utils.on(this.player.media, 'volumechange', () => {\n            // Save to storage\n            this.player.storage.set({ volume: this.player.volume, muted: this.player.muted });\n        });\n\n        // Speed change\n        utils.on(this.player.media, 'ratechange', () => {\n            // Update UI\n            controls.updateSetting.call(this.player, 'speed');\n\n            // Save to storage\n            this.player.storage.set({ speed: this.player.speed });\n        });\n\n        // Quality change\n        utils.on(this.player.media, 'qualitychange', () => {\n            // Update UI\n            controls.updateSetting.call(this.player, 'quality');\n\n            // Save to storage\n            this.player.storage.set({ quality: this.player.quality });\n        });\n\n        // Caption language change\n        utils.on(this.player.media, 'languagechange', () => {\n            // Update UI\n            controls.updateSetting.call(this.player, 'captions');\n\n            // Save to storage\n            this.player.storage.set({ language: this.player.language });\n        });\n\n        // Captions toggle\n        utils.on(this.player.media, 'captionsenabled captionsdisabled', () => {\n            // Update UI\n            controls.updateSetting.call(this.player, 'captions');\n\n            // Save to storage\n            this.player.storage.set({ captions: this.player.captions.active });\n        });\n\n        // Proxy events to container\n        // Bubble up key events for Edge\n        utils.on(this.player.media, this.player.config.events.concat([\n            'keyup',\n            'keydown',\n        ]).join(' '), event => {\n            let detail = {};\n\n            // Get error details from media\n            if (event.type === 'error') {\n                detail = this.player.media.error;\n            }\n\n            utils.dispatchEvent.call(this.player, this.player.elements.container, event.type, true, detail);\n        });\n    }\n\n    // Listen for control events\n    controls() {\n        // IE doesn't support input event, so we fallback to change\n        const inputEvent = browser.isIE ? 'change' : 'input';\n\n        // Trigger custom and default handlers\n        const proxy = (event, handlerKey, defaultHandler) => {\n            const customHandler = this.player.config.listeners[handlerKey];\n\n            // Execute custom handler\n            if (utils.is.function(customHandler)) {\n                customHandler.call(this.player, event);\n            }\n\n            // Only call default handler if not prevented in custom handler\n            if (!event.defaultPrevented && utils.is.function(defaultHandler)) {\n                defaultHandler.call(this.player, event);\n            }\n        };\n\n        // Play/pause toggle\n        utils.on(this.player.elements.buttons.play, 'click', event =>\n            proxy(event, 'play', () => {\n                this.player.togglePlay();\n            }),\n        );\n\n        // Pause\n        utils.on(this.player.elements.buttons.restart, 'click', event =>\n            proxy(event, 'restart', () => {\n                this.player.restart();\n            }),\n        );\n\n        // Rewind\n        utils.on(this.player.elements.buttons.rewind, 'click', event =>\n            proxy(event, 'rewind', () => {\n                this.player.rewind();\n            }),\n        );\n\n        // Rewind\n        utils.on(this.player.elements.buttons.forward, 'click', event =>\n            proxy(event, 'forward', () => {\n                this.player.forward();\n            }),\n        );\n\n        // Mute toggle\n        utils.on(this.player.elements.buttons.mute, 'click', event =>\n            proxy(event, 'mute', () => {\n                this.player.muted = !this.player.muted;\n            }),\n        );\n\n        // Captions toggle\n        utils.on(this.player.elements.buttons.captions, 'click', event =>\n            proxy(event, 'captions', () => {\n                this.player.toggleCaptions();\n            }),\n        );\n\n        // Fullscreen toggle\n        utils.on(this.player.elements.buttons.fullscreen, 'click', event =>\n            proxy(event, 'fullscreen', () => {\n                this.player.fullscreen.toggle();\n            }),\n        );\n\n        // Picture-in-Picture\n        utils.on(this.player.elements.buttons.pip, 'click', event =>\n            proxy(event, 'pip', () => {\n                this.player.pip = 'toggle';\n            }),\n        );\n\n        // Airplay\n        utils.on(this.player.elements.buttons.airplay, 'click', event =>\n            proxy(event, 'airplay', () => {\n                this.player.airplay();\n            }),\n        );\n\n        // Settings menu\n        utils.on(this.player.elements.buttons.settings, 'click', event => {\n            controls.toggleMenu.call(this.player, event);\n        });\n\n        // Settings menu\n        utils.on(this.player.elements.settings.form, 'click', event => {\n            event.stopPropagation();\n\n            // Settings menu items - use event delegation as items are added/removed\n            if (utils.matches(event.target, this.player.config.selectors.inputs.language)) {\n                proxy(event, 'language', () => {\n                    this.player.language = event.target.value;\n                });\n            } else if (utils.matches(event.target, this.player.config.selectors.inputs.quality)) {\n                proxy(event, 'quality', () => {\n                    this.player.quality = event.target.value;\n                });\n            } else if (utils.matches(event.target, this.player.config.selectors.inputs.speed)) {\n                proxy(event, 'speed', () => {\n                    this.player.speed = parseFloat(event.target.value);\n                });\n            } else {\n                controls.showTab.call(this.player, event);\n            }\n        });\n\n        // Seek\n        utils.on(this.player.elements.inputs.seek, inputEvent, event =>\n            proxy(event, 'seek', () => {\n                this.player.currentTime = event.target.value / event.target.max * this.player.duration;\n            }),\n        );\n\n        // Current time invert\n        // Only if one time element is used for both currentTime and duration\n        if (this.player.config.toggleInvert && !utils.is.element(this.player.elements.display.duration)) {\n            utils.on(this.player.elements.display.currentTime, 'click', () => {\n                // Do nothing if we're at the start\n                if (this.player.currentTime === 0) {\n                    return;\n                }\n\n                this.player.config.invertTime = !this.player.config.invertTime;\n                ui.timeUpdate.call(this.player);\n            });\n        }\n\n        // Volume\n        utils.on(this.player.elements.inputs.volume, inputEvent, event =>\n            proxy(event, 'volume', () => {\n                this.player.volume = event.target.value;\n            }),\n        );\n\n        // Polyfill for lower fill in <input type=\"range\"> for webkit\n        if (browser.isWebkit) {\n            utils.on(utils.getElements.call(this.player, 'input[type=\"range\"]'), 'input', event => {\n                controls.updateRangeFill.call(this.player, event.target);\n            });\n        }\n\n        // Seek tooltip\n        utils.on(this.player.elements.progress, 'mouseenter mouseleave mousemove', event => controls.updateSeekTooltip.call(this.player, event));\n\n        // Toggle controls visibility based on mouse movement\n        if (this.player.config.hideControls) {\n            // Watch for cursor over controls so they don't hide when trying to interact\n            utils.on(this.player.elements.controls, 'mouseenter mouseleave', event => {\n                this.player.elements.controls.hover = event.type === 'mouseenter';\n            });\n\n            // Watch for cursor over controls so they don't hide when trying to interact\n            utils.on(this.player.elements.controls, 'mousedown mouseup touchstart touchend touchcancel', event => {\n                this.player.elements.controls.pressed = [\n                    'mousedown',\n                    'touchstart',\n                ].includes(event.type);\n            });\n\n            // Focus in/out on controls\n            utils.on(this.player.elements.controls, 'focusin focusout', event => {\n                this.player.toggleControls(event);\n            });\n        }\n\n        // Mouse wheel for volume\n        utils.on(\n            this.player.elements.inputs.volume,\n            'wheel',\n            event =>\n                proxy(event, 'volume', () => {\n                    // Detect \"natural\" scroll - suppored on OS X Safari only\n                    // Other browsers on OS X will be inverted until support improves\n                    const inverted = event.webkitDirectionInvertedFromDevice;\n                    const step = 1 / 50;\n                    let direction = 0;\n\n                    // Scroll down (or up on natural) to decrease\n                    if (event.deltaY < 0 || event.deltaX > 0) {\n                        if (inverted) {\n                            this.player.decreaseVolume(step);\n                            direction = -1;\n                        } else {\n                            this.player.increaseVolume(step);\n                            direction = 1;\n                        }\n                    }\n\n                    // Scroll up (or down on natural) to increase\n                    if (event.deltaY > 0 || event.deltaX < 0) {\n                        if (inverted) {\n                            this.player.increaseVolume(step);\n                            direction = 1;\n                        } else {\n                            this.player.decreaseVolume(step);\n                            direction = -1;\n                        }\n                    }\n\n                    // Don't break page scrolling at max and min\n                    if ((direction === 1 && this.player.media.volume < 1) || (direction === -1 && this.player.media.volume > 0)) {\n                        event.preventDefault();\n                    }\n                }),\n            false,\n        );\n    }\n\n    // Reset on destroy\n    clear() {\n        this.global(false);\n    }\n}\n\nexport default Listeners;\n","// ==========================================================================\n// Plyr storage\n// ==========================================================================\n\nimport utils from './utils';\n\nclass Storage {\n    constructor(player) {\n        this.enabled = player.config.storage.enabled;\n        this.key = player.config.storage.key;\n    }\n\n    // Check for actual support (see if we can use it)\n    static get supported() {\n        if (!('localStorage' in window)) {\n            return false;\n        }\n\n        const test = '___test';\n\n        // Try to use it (it might be disabled, e.g. user is in private mode)\n        // see: https://github.com/sampotts/plyr/issues/131\n        try {\n            window.localStorage.setItem(test, test);\n            window.localStorage.removeItem(test);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    get(key) {\n        const store = window.localStorage.getItem(this.key);\n\n        if (!Storage.supported || utils.is.empty(store)) {\n            return null;\n        }\n\n        const json = JSON.parse(store);\n\n        return utils.is.string(key) && key.length ? json[key] : json;\n    }\n\n    set(object) {\n        // Bail if we don't have localStorage support or it's disabled\n        if (!Storage.supported || !this.enabled) {\n            return;\n        }\n\n        // Can only store objectst\n        if (!utils.is.object(object)) {\n            return;\n        }\n\n        // Get current storage\n        let storage = this.get();\n\n        // Default to empty object\n        if (utils.is.empty(storage)) {\n            storage = {};\n        }\n\n        // Update the working copy of the values\n        utils.extend(storage, object);\n\n        // Update storage\n        window.localStorage.setItem(this.key, JSON.stringify(storage));\n    }\n}\n\nexport default Storage;\n","// ==========================================================================\n// Advertisement plugin using Google IMA HTML5 SDK\n// Create an account with our ad partner, vi here:\n// https://www.vi.ai/publisher-video-monetization/\n// ==========================================================================\n\n/* global google */\n\nimport utils from '../utils';\n\nclass Ads {\n    /**\n     * Ads constructor.\n     * @param {object} player\n     * @return {Ads}\n     */\n    constructor(player) {\n        this.player = player;\n        this.publisherId = player.config.ads.publisherId;\n        this.enabled = player.isHTML5 && player.isVideo && player.config.ads.enabled && utils.is.string(this.publisherId) && this.publisherId.length;\n        this.playing = false;\n        this.initialized = false;\n        this.elements = {\n            container: null,\n            displayContainer: null,\n        };\n        this.manager = null;\n        this.loader = null;\n        this.cuePoints = null;\n        this.events = {};\n        this.safetyTimer = null;\n        this.countdownTimer = null;\n\n        // Setup a promise to resolve when the IMA manager is ready\n        this.managerPromise = new Promise((resolve, reject) => {\n            // The ad is loaded and ready\n            this.on('loaded', resolve);\n\n            // Ads failed\n            this.on('error', reject);\n        });\n\n        this.load();\n    }\n\n    /**\n     * Load the IMA SDK\n     */\n    load() {\n        if (this.enabled) {\n            // Check if the Google IMA3 SDK is loaded or load it ourselves\n            if (!utils.is.object(window.google) || !utils.is.object(window.google.ima)) {\n                utils\n                    .loadScript(this.player.config.urls.googleIMA.api)\n                    .then(() => {\n                        this.ready();\n                    })\n                    .catch(() => {\n                        // Script failed to load or is blocked\n                        this.trigger('error', new Error('Google IMA SDK failed to load'));\n                    });\n            } else {\n                this.ready();\n            }\n        }\n    }\n\n    /**\n     * Get the ads instance ready\n     */\n    ready() {\n        // Start ticking our safety timer. If the whole advertisement\n        // thing doesn't resolve within our set time; we bail\n        this.startSafetyTimer(12000, 'ready()');\n\n        // Clear the safety timer\n        this.managerPromise.then(() => {\n            this.clearSafetyTimer('onAdsManagerLoaded()');\n        });\n\n        // Set listeners on the Plyr instance\n        this.listeners();\n\n        // Setup the IMA SDK\n        this.setupIMA();\n    }\n\n    // Build the default tag URL\n    get tagUrl() {\n        const params = {\n            AV_PUBLISHERID: '58c25bb0073ef448b1087ad6',\n            AV_CHANNELID: '5a0458dc28a06145e4519d21',\n            AV_URL: location.hostname,\n            cb: Date.now(),\n            AV_WIDTH: 640,\n            AV_HEIGHT: 480,\n            AV_CDIM2: this.publisherId,\n        };\n\n        const base = 'https://go.aniview.com/api/adserver6/vast/';\n\n        return `${base}?${utils.buildUrlParams(params)}`;\n    }\n\n    /**\n     * In order for the SDK to display ads for our video, we need to tell it where to put them,\n     * so here we define our ad container. This div is set up to render on top of the video player.\n     * Using the code below, we tell the SDK to render ads within that div. We also provide a\n     * handle to the content video player - the SDK will poll the current time of our player to\n     * properly place mid-rolls. After we create the ad display container, we initialize it. On\n     * mobile devices, this initialization is done as the result of a user action.\n     */\n    setupIMA() {\n        // Create the container for our advertisements\n        this.elements.container = utils.createElement('div', {\n            class: this.player.config.classNames.ads,\n        });\n        this.player.elements.container.appendChild(this.elements.container);\n\n        // So we can run VPAID2\n        google.ima.settings.setVpaidMode(google.ima.ImaSdkSettings.VpaidMode.ENABLED);\n\n        // Set language\n        google.ima.settings.setLocale(this.player.config.ads.language);\n\n        // We assume the adContainer is the video container of the plyr element\n        // that will house the ads\n        this.elements.displayContainer = new google.ima.AdDisplayContainer(this.elements.container);\n\n        // Request video ads to be pre-loaded\n        this.requestAds();\n    }\n\n    /**\n     * Request advertisements\n     */\n    requestAds() {\n        const { container } = this.player.elements;\n\n        try {\n            // Create ads loader\n            this.loader = new google.ima.AdsLoader(this.elements.displayContainer);\n\n            // Listen and respond to ads loaded and error events\n            this.loader.addEventListener(google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED, event => this.onAdsManagerLoaded(event), false);\n            this.loader.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, error => this.onAdError(error), false);\n\n            // Request video ads\n            const request = new google.ima.AdsRequest();\n            request.adTagUrl = this.tagUrl;\n\n            // Specify the linear and nonlinear slot sizes. This helps the SDK\n            // to select the correct creative if multiple are returned\n            request.linearAdSlotWidth = container.offsetWidth;\n            request.linearAdSlotHeight = container.offsetHeight;\n            request.nonLinearAdSlotWidth = container.offsetWidth;\n            request.nonLinearAdSlotHeight = container.offsetHeight;\n\n            // We only overlay ads as we only support video.\n            request.forceNonLinearFullSlot = false;\n\n            this.loader.requestAds(request);\n        } catch (e) {\n            this.onAdError(e);\n        }\n    }\n\n    /**\n     * Update the ad countdown\n     * @param {boolean} start\n     */\n    pollCountdown(start = false) {\n        if (!start) {\n            clearInterval(this.countdownTimer);\n            this.elements.container.removeAttribute('data-badge-text');\n            return;\n        }\n\n        const update = () => {\n            const time = utils.formatTime(Math.max(this.manager.getRemainingTime(), 0));\n            const label = `${this.player.config.i18n.advertisement} - ${time}`;\n            this.elements.container.setAttribute('data-badge-text', label);\n        };\n\n        this.countdownTimer = setInterval(update, 100);\n    }\n\n    /**\n     * This method is called whenever the ads are ready inside the AdDisplayContainer\n     * @param {Event} adsManagerLoadedEvent\n     */\n    onAdsManagerLoaded(event) {\n        // Get the ads manager\n        const settings = new google.ima.AdsRenderingSettings();\n\n        // Tell the SDK to save and restore content video state on our behalf\n        settings.restoreCustomPlaybackStateOnAdBreakComplete = true;\n        settings.enablePreloading = true;\n\n        // The SDK is polling currentTime on the contentPlayback. And needs a duration\n        // so it can determine when to start the mid- and post-roll\n        this.manager = event.getAdsManager(this.player, settings);\n\n        // Get the cue points for any mid-rolls by filtering out the pre- and post-roll\n        this.cuePoints = this.manager.getCuePoints();\n\n        // Add advertisement cue's within the time line if available\n        this.cuePoints.forEach(cuePoint => {\n            if (cuePoint !== 0 && cuePoint !== -1 && cuePoint < this.player.duration) {\n                const seekElement = this.player.elements.progress;\n\n                if (seekElement) {\n                    const cuePercentage = 100 / this.player.duration * cuePoint;\n                    const cue = utils.createElement('span', {\n                        class: this.player.config.classNames.cues,\n                    });\n\n                    cue.style.left = `${cuePercentage.toString()}%`;\n                    seekElement.appendChild(cue);\n                }\n            }\n        });\n\n        // Get skippable state\n        // TODO: Skip button\n        // this.manager.getAdSkippableState();\n\n        // Set volume to match player\n        this.manager.setVolume(this.player.volume);\n\n        // Add listeners to the required events\n        // Advertisement error events\n        this.manager.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, error => this.onAdError(error));\n\n        // Advertisement regular events\n        Object.keys(google.ima.AdEvent.Type).forEach(type => {\n            this.manager.addEventListener(google.ima.AdEvent.Type[type], event => this.onAdEvent(event));\n        });\n\n        // Resolve our adsManager\n        this.trigger('loaded');\n    }\n\n    /**\n     * This is where all the event handling takes place. Retrieve the ad from the event. Some\n     * events (e.g. ALL_ADS_COMPLETED) don't have the ad object associated\n     * https://developers.google.com/interactive-media-ads/docs/sdks/html5/v3/apis#ima.AdEvent.Type\n     * @param {Event} event\n     */\n    onAdEvent(event) {\n        const { container } = this.player.elements;\n\n        // Retrieve the ad from the event. Some events (e.g. ALL_ADS_COMPLETED)\n        // don't have ad object associated\n        const ad = event.getAd();\n\n        // Proxy event\n        const dispatchEvent = type => {\n            const event = `ads${type.replace(/_/g, '').toLowerCase()}`;\n            utils.dispatchEvent.call(this.player, this.player.media, event);\n        };\n\n        switch (event.type) {\n            case google.ima.AdEvent.Type.LOADED:\n                // This is the first event sent for an ad - it is possible to determine whether the\n                // ad is a video ad or an overlay\n                this.trigger('loaded');\n\n                // Bubble event\n                dispatchEvent(event.type);\n\n                // Start countdown\n                this.pollCountdown(true);\n\n                if (!ad.isLinear()) {\n                    // Position AdDisplayContainer correctly for overlay\n                    ad.width = container.offsetWidth;\n                    ad.height = container.offsetHeight;\n                }\n\n                // console.info('Ad type: ' + event.getAd().getAdPodInfo().getPodIndex());\n                // console.info('Ad time: ' + event.getAd().getAdPodInfo().getTimeOffset());\n                break;\n\n            case google.ima.AdEvent.Type.ALL_ADS_COMPLETED:\n                // All ads for the current videos are done. We can now request new advertisements\n                // in case the video is re-played\n\n                // Fire event\n                dispatchEvent(event.type);\n\n                // TODO: Example for what happens when a next video in a playlist would be loaded.\n                // So here we load a new video when all ads are done.\n                // Then we load new ads within a new adsManager. When the video\n                // Is started - after - the ads are loaded, then we get ads.\n                // You can also easily test cancelling and reloading by running\n                // player.ads.cancel() and player.ads.play from the console I guess.\n                // this.player.source = {\n                //     type: 'video',\n                //     title: 'View From A Blue Moon',\n                //     sources: [{\n                //         src:\n                // 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.mp4', type:\n                // 'video/mp4', }], poster:\n                // 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.jpg', tracks:\n                // [ { kind: 'captions', label: 'English', srclang: 'en', src:\n                // 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.en.vtt',\n                // default: true, }, { kind: 'captions', label: 'French', srclang: 'fr', src:\n                // 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-HD.fr.vtt', }, ],\n                // };\n\n                // TODO: So there is still this thing where a video should only be allowed to start\n                // playing when the IMA SDK is ready or has failed\n\n                this.loadAds();\n                break;\n\n            case google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED:\n                // This event indicates the ad has started - the video player can adjust the UI,\n                // for example display a pause button and remaining time. Fired when content should\n                // be paused. This usually happens right before an ad is about to cover the content\n\n                dispatchEvent(event.type);\n\n                this.pauseContent();\n\n                break;\n\n            case google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED:\n                // This event indicates the ad has finished - the video player can perform\n                // appropriate UI actions, such as removing the timer for remaining time detection.\n                // Fired when content should be resumed. This usually happens when an ad finishes\n                // or collapses\n\n                dispatchEvent(event.type);\n\n                this.pollCountdown();\n\n                this.resumeContent();\n\n                break;\n\n            case google.ima.AdEvent.Type.STARTED:\n            case google.ima.AdEvent.Type.MIDPOINT:\n            case google.ima.AdEvent.Type.COMPLETE:\n            case google.ima.AdEvent.Type.IMPRESSION:\n            case google.ima.AdEvent.Type.CLICK:\n                dispatchEvent(event.type);\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    /**\n     * Any ad error handling comes through here\n     * @param {Event} event\n     */\n    onAdError(event) {\n        this.cancel();\n        this.player.debug.warn('Ads error', event);\n    }\n\n    /**\n     * Setup hooks for Plyr and window events. This ensures\n     * the mid- and post-roll launch at the correct time. And\n     * resize the advertisement when the player resizes\n     */\n    listeners() {\n        const { container } = this.player.elements;\n        let time;\n\n        // Add listeners to the required events\n        this.player.on('ended', () => {\n            this.loader.contentComplete();\n        });\n\n        this.player.on('seeking', () => {\n            time = this.player.currentTime;\n            return time;\n        });\n\n        this.player.on('seeked', () => {\n            const seekedTime = this.player.currentTime;\n\n            this.cuePoints.forEach((cuePoint, index) => {\n                if (time < cuePoint && cuePoint < seekedTime) {\n                    this.manager.discardAdBreak();\n                    this.cuePoints.splice(index, 1);\n                }\n            });\n        });\n\n        // Listen to the resizing of the window. And resize ad accordingly\n        // TODO: eventually implement ResizeObserver\n        window.addEventListener('resize', () => {\n            this.manager.resize(container.offsetWidth, container.offsetHeight, google.ima.ViewMode.NORMAL);\n        });\n    }\n\n    /**\n     * Initialize the adsManager and start playing advertisements\n     */\n    play() {\n        const { container } = this.player.elements;\n\n        if (!this.managerPromise) {\n            this.resumeContent();\n        }\n\n        // Play the requested advertisement whenever the adsManager is ready\n        this.managerPromise\n            .then(() => {\n                // Initialize the container. Must be done via a user action on mobile devices\n                this.elements.displayContainer.initialize();\n\n                try {\n                    if (!this.initialized) {\n                        // Initialize the ads manager. Ad rules playlist will start at this time\n                        this.manager.init(container.offsetWidth, container.offsetHeight, google.ima.ViewMode.NORMAL);\n\n                        // Call play to start showing the ad. Single video and overlay ads will\n                        // start at this time; the call will be ignored for ad rules\n                        this.manager.start();\n                    }\n\n                    this.initialized = true;\n                } catch (adError) {\n                    // An error may be thrown if there was a problem with the\n                    // VAST response\n                    this.onAdError(adError);\n                }\n            })\n            .catch(() => {});\n    }\n\n    /**\n     * Resume our video\n     */\n    resumeContent() {\n        // Hide the advertisement container\n        this.elements.container.style.zIndex = '';\n\n        // Ad is stopped\n        this.playing = false;\n\n        // Play our video\n        if (this.player.currentTime < this.player.duration) {\n            this.player.play();\n        }\n    }\n\n    /**\n     * Pause our video\n     */\n    pauseContent() {\n        // Show the advertisement container\n        this.elements.container.style.zIndex = 3;\n\n        // Ad is playing.\n        this.playing = true;\n\n        // Pause our video.\n        this.player.pause();\n    }\n\n    /**\n     * Destroy the adsManager so we can grab new ads after this. If we don't then we're not\n     * allowed to call new ads based on google policies, as they interpret this as an accidental\n     * video requests. https://developers.google.com/interactive-\n     * media-ads/docs/sdks/android/faq#8\n     */\n    cancel() {\n        // Pause our video\n        if (this.initialized) {\n            this.resumeContent();\n        }\n\n        // Tell our instance that we're done for now\n        this.trigger('error');\n\n        // Re-create our adsManager\n        this.loadAds();\n    }\n\n    /**\n     * Re-create our adsManager\n     */\n    loadAds() {\n        // Tell our adsManager to go bye bye\n        this.managerPromise\n            .then(() => {\n                // Destroy our adsManager\n                if (this.manager) {\n                    this.manager.destroy();\n                }\n\n                // Re-set our adsManager promises\n                this.managerPromise = new Promise(resolve => {\n                    this.on('loaded', resolve);\n                    this.player.debug.log(this.manager);\n                });\n\n                // Now request some new advertisements\n                this.requestAds();\n            })\n            .catch(() => {});\n    }\n\n    /**\n     * Handles callbacks after an ad event was invoked\n     * @param {string} event - Event type\n     */\n    trigger(event, ...args) {\n        const handlers = this.events[event];\n\n        if (utils.is.array(handlers)) {\n            handlers.forEach(handler => {\n                if (utils.is.function(handler)) {\n                    handler.apply(this, args);\n                }\n            });\n        }\n    }\n\n    /**\n     * Add event listeners\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     * @return {Ads}\n     */\n    on(event, callback) {\n        if (!utils.is.array(this.events[event])) {\n            this.events[event] = [];\n        }\n\n        this.events[event].push(callback);\n\n        return this;\n    }\n\n    /**\n     * Setup a safety timer for when the ad network doesn't respond for whatever reason.\n     * The advertisement has 12 seconds to get its things together. We stop this timer when the\n     * advertisement is playing, or when a user action is required to start, then we clear the\n     * timer on ad ready\n     * @param {number} time\n     * @param {string} from\n     */\n    startSafetyTimer(time, from) {\n        this.player.debug.log(`Safety timer invoked from: ${from}`);\n\n        this.safetyTimer = setTimeout(() => {\n            this.cancel();\n            this.clearSafetyTimer('startSafetyTimer()');\n        }, time);\n    }\n\n    /**\n     * Clear our safety timer(s)\n     * @param {string} from\n     */\n    clearSafetyTimer(from) {\n        if (!utils.is.nullOrUndefined(this.safetyTimer)) {\n            this.player.debug.log(`Safety timer cleared from: ${from}`);\n\n            clearTimeout(this.safetyTimer);\n            this.safetyTimer = null;\n        }\n    }\n}\n\nexport default Ads;\n","// ==========================================================================\n// YouTube plugin\n// ==========================================================================\n\nimport utils from './../utils';\nimport controls from './../controls';\nimport ui from './../ui';\n\nconst youtube = {\n    setup() {\n        // Add embed class for responsive\n        utils.toggleClass(this.elements.wrapper, this.config.classNames.embed, true);\n\n        // Set aspect ratio\n        youtube.setAspectRatio.call(this);\n\n        // Setup API\n        if (utils.is.object(window.YT) && utils.is.function(window.YT.Player)) {\n            youtube.ready.call(this);\n        } else {\n            // Load the API\n            utils.loadScript(this.config.urls.youtube.api).catch(error => {\n                this.debug.warn('YouTube API failed to load', error);\n            });\n\n            // Setup callback for the API\n            // YouTube has it's own system of course...\n            window.onYouTubeReadyCallbacks = window.onYouTubeReadyCallbacks || [];\n\n            // Add to queue\n            window.onYouTubeReadyCallbacks.push(() => {\n                youtube.ready.call(this);\n            });\n\n            // Set callback to process queue\n            window.onYouTubeIframeAPIReady = () => {\n                window.onYouTubeReadyCallbacks.forEach(callback => {\n                    callback();\n                });\n            };\n        }\n    },\n\n    // Get the media title\n    getTitle(videoId) {\n        // Try via undocumented API method first\n        // This method disappears now and then though...\n        // https://github.com/sampotts/plyr/issues/709\n        if (utils.is.function(this.embed.getVideoData)) {\n            const { title } = this.embed.getVideoData();\n\n            if (utils.is.empty(title)) {\n                this.config.title = title;\n                ui.setTitle.call(this);\n                return;\n            }\n        }\n\n        // Or via Google API\n        const key = this.config.keys.google;\n        if (utils.is.string(key) && !utils.is.empty(key)) {\n            const url = `https://www.googleapis.com/youtube/v3/videos?id=${videoId}&key=${key}&fields=items(snippet(title))&part=snippet`;\n\n            utils\n                .fetch(url)\n                .then(result => {\n                    if (utils.is.object(result)) {\n                        this.config.title = result.items[0].snippet.title;\n                        ui.setTitle.call(this);\n                    }\n                })\n                .catch(() => {});\n        }\n    },\n\n    // Set aspect ratio\n    setAspectRatio() {\n        const ratio = this.config.ratio.split(':');\n        this.elements.wrapper.style.paddingBottom = `${100 / ratio[0] * ratio[1]}%`;\n    },\n\n    // API ready\n    ready() {\n        const player = this;\n\n        // Ignore already setup (race condition)\n        const currentId = player.media.getAttribute('id');\n        if (!utils.is.empty(currentId) && currentId.startsWith('youtube-')) {\n            return;\n        }\n\n        // Get the source URL or ID\n        let source = player.media.getAttribute('src');\n\n        // Get from <div> if needed\n        if (utils.is.empty(source)) {\n            source = player.media.getAttribute(this.config.attributes.embed.id);\n        }\n\n        // Replace the <iframe> with a <div> due to YouTube API issues\n        const videoId = utils.parseYouTubeId(source);\n        const id = utils.generateId(player.provider);\n        const container = utils.createElement('div', { id });\n        player.media = utils.replaceElement(container, player.media);\n\n        // Setup instance\n        // https://developers.google.com/youtube/iframe_api_reference\n        player.embed = new window.YT.Player(id, {\n            videoId,\n            playerVars: {\n                autoplay: player.config.autoplay ? 1 : 0, // Autoplay\n                controls: player.supported.ui ? 0 : 1, // Only show controls if not fully supported\n                rel: 0, // No related vids\n                showinfo: 0, // Hide info\n                iv_load_policy: 3, // Hide annotations\n                modestbranding: 1, // Hide logos as much as possible (they still show one in the corner when paused)\n                disablekb: 1, // Disable keyboard as we handle it\n                playsinline: 1, // Allow iOS inline playback\n\n                // Tracking for stats\n                // origin: window ? `${window.location.protocol}//${window.location.host}` : null,\n                widget_referrer: window ? window.location.href : null,\n\n                // Captions are flaky on YouTube\n                cc_load_policy: player.captions.active ? 1 : 0,\n                cc_lang_pref: player.config.captions.language,\n            },\n            events: {\n                onError(event) {\n                    // If we've already fired an error, don't do it again\n                    // YouTube fires onError twice\n                    if (utils.is.object(player.media.error)) {\n                        return;\n                    }\n\n                    const detail = {\n                        code: event.data,\n                    };\n\n                    // Messages copied from https://developers.google.com/youtube/iframe_api_reference#onError\n                    switch (event.data) {\n                        case 2:\n                            detail.message =\n                                'The request contains an invalid parameter value. For example, this error occurs if you specify a video ID that does not have 11 characters, or if the video ID contains invalid characters, such as exclamation points or asterisks.';\n                            break;\n\n                        case 5:\n                            detail.message =\n                                'The requested content cannot be played in an HTML5 player or another error related to the HTML5 player has occurred.';\n                            break;\n\n                        case 100:\n                            detail.message =\n                                'The video requested was not found. This error occurs when a video has been removed (for any reason) or has been marked as private.';\n                            break;\n\n                        case 101:\n                        case 150:\n                            detail.message = 'The owner of the requested video does not allow it to be played in embedded players.';\n                            break;\n\n                        default:\n                            detail.message = 'An unknown error occured';\n                            break;\n                    }\n\n                    player.media.error = detail;\n\n                    utils.dispatchEvent.call(player, player.media, 'error');\n                },\n                onPlaybackQualityChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get current quality\n                    player.media.quality = instance.getPlaybackQuality();\n\n                    utils.dispatchEvent.call(player, player.media, 'qualitychange');\n                },\n                onPlaybackRateChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get current speed\n                    player.media.playbackRate = instance.getPlaybackRate();\n\n                    utils.dispatchEvent.call(player, player.media, 'ratechange');\n                },\n                onReady(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Get the title\n                    youtube.getTitle.call(player, videoId);\n\n                    // Create a faux HTML5 API using the YouTube API\n                    player.media.play = () => {\n                        instance.playVideo();\n                    };\n\n                    player.media.pause = () => {\n                        instance.pauseVideo();\n                    };\n\n                    player.media.stop = () => {\n                        instance.stopVideo();\n                    };\n\n                    player.media.duration = instance.getDuration();\n                    player.media.paused = true;\n\n                    // Seeking\n                    player.media.currentTime = 0;\n                    Object.defineProperty(player.media, 'currentTime', {\n                        get() {\n                            return Number(instance.getCurrentTime());\n                        },\n                        set(time) {\n                            // Set seeking flag\n                            player.media.seeking = true;\n\n                            // Trigger seeking\n                            utils.dispatchEvent.call(player, player.media, 'seeking');\n\n                            // Seek after events sent\n                            instance.seekTo(time);\n                        },\n                    });\n\n                    // Playback speed\n                    Object.defineProperty(player.media, 'playbackRate', {\n                        get() {\n                            return instance.getPlaybackRate();\n                        },\n                        set(input) {\n                            instance.setPlaybackRate(input);\n                        },\n                    });\n\n                    // Quality\n                    Object.defineProperty(player.media, 'quality', {\n                        get() {\n                            return instance.getPlaybackQuality();\n                        },\n                        set(input) {\n                            // Trigger request event\n                            utils.dispatchEvent.call(player, player.media, 'qualityrequested', false, {\n                                quality: input,\n                            });\n\n                            instance.setPlaybackQuality(input);\n                        },\n                    });\n\n                    // Volume\n                    let { volume } = player.config;\n                    Object.defineProperty(player.media, 'volume', {\n                        get() {\n                            return volume;\n                        },\n                        set(input) {\n                            volume = input;\n                            instance.setVolume(volume * 100);\n                            utils.dispatchEvent.call(player, player.media, 'volumechange');\n                        },\n                    });\n\n                    // Muted\n                    let { muted } = player.config;\n                    Object.defineProperty(player.media, 'muted', {\n                        get() {\n                            return muted;\n                        },\n                        set(input) {\n                            const toggle = utils.is.boolean(input) ? input : muted;\n                            muted = toggle;\n                            instance[toggle ? 'mute' : 'unMute']();\n                            utils.dispatchEvent.call(player, player.media, 'volumechange');\n                        },\n                    });\n\n                    // Source\n                    Object.defineProperty(player.media, 'currentSrc', {\n                        get() {\n                            return instance.getVideoUrl();\n                        },\n                    });\n\n                    // Ended\n                    Object.defineProperty(player.media, 'ended', {\n                        get() {\n                            return player.currentTime === player.duration;\n                        },\n                    });\n\n                    // Get available speeds\n                    player.options.speed = instance.getAvailablePlaybackRates();\n\n                    // Set the tabindex to avoid focus entering iframe\n                    if (player.supported.ui) {\n                        player.media.setAttribute('tabindex', -1);\n                    }\n\n                    utils.dispatchEvent.call(player, player.media, 'timeupdate');\n                    utils.dispatchEvent.call(player, player.media, 'durationchange');\n\n                    // Reset timer\n                    clearInterval(player.timers.buffering);\n\n                    // Setup buffering\n                    player.timers.buffering = setInterval(() => {\n                        // Get loaded % from YouTube\n                        player.media.buffered = instance.getVideoLoadedFraction();\n\n                        // Trigger progress only when we actually buffer something\n                        if (player.media.lastBuffered === null || player.media.lastBuffered < player.media.buffered) {\n                            utils.dispatchEvent.call(player, player.media, 'progress');\n                        }\n\n                        // Set last buffer point\n                        player.media.lastBuffered = player.media.buffered;\n\n                        // Bail if we're at 100%\n                        if (player.media.buffered === 1) {\n                            clearInterval(player.timers.buffering);\n\n                            // Trigger event\n                            utils.dispatchEvent.call(player, player.media, 'canplaythrough');\n                        }\n                    }, 200);\n\n                    // Rebuild UI\n                    setTimeout(() => ui.build.call(player), 50);\n                },\n                onStateChange(event) {\n                    // Get the instance\n                    const instance = event.target;\n\n                    // Reset timer\n                    clearInterval(player.timers.playing);\n\n                    // Handle events\n                    // -1   Unstarted\n                    // 0    Ended\n                    // 1    Playing\n                    // 2    Paused\n                    // 3    Buffering\n                    // 5    Video cued\n                    switch (event.data) {\n                        case 0:\n                            player.media.paused = true;\n\n                            // YouTube doesn't support loop for a single video, so mimick it.\n                            if (player.media.loop) {\n                                // YouTube needs a call to `stopVideo` before playing again\n                                instance.stopVideo();\n                                instance.playVideo();\n                            } else {\n                                utils.dispatchEvent.call(player, player.media, 'ended');\n                            }\n\n                            break;\n\n                        case 1:\n                            // If we were seeking, fire seeked event\n                            if (player.media.seeking) {\n                                utils.dispatchEvent.call(player, player.media, 'seeked');\n                            }\n                            player.media.seeking = false;\n\n                            // Only fire play if paused before\n                            if (player.media.paused) {\n                                utils.dispatchEvent.call(player, player.media, 'play');\n                            }\n                            player.media.paused = false;\n\n                            utils.dispatchEvent.call(player, player.media, 'playing');\n\n                            // Poll to get playback progress\n                            player.timers.playing = setInterval(() => {\n                                utils.dispatchEvent.call(player, player.media, 'timeupdate');\n                            }, 50);\n\n                            // Check duration again due to YouTube bug\n                            // https://github.com/sampotts/plyr/issues/374\n                            // https://code.google.com/p/gdata-issues/issues/detail?id=8690\n                            if (player.media.duration !== instance.getDuration()) {\n                                player.media.duration = instance.getDuration();\n                                utils.dispatchEvent.call(player, player.media, 'durationchange');\n                            }\n\n                            // Get quality\n                            controls.setQualityMenu.call(player, instance.getAvailableQualityLevels());\n\n                            break;\n\n                        case 2:\n                            player.media.paused = true;\n\n                            utils.dispatchEvent.call(player, player.media, 'pause');\n\n                            break;\n\n                        default:\n                            break;\n                    }\n\n                    utils.dispatchEvent.call(player, player.elements.container, 'statechange', false, {\n                        code: event.data,\n                    });\n                },\n            },\n        });\n    },\n};\n\nexport default youtube;\n","// ==========================================================================\n// Vimeo plugin\n// ==========================================================================\n\nimport utils from './../utils';\nimport captions from './../captions';\nimport ui from './../ui';\n\nconst vimeo = {\n    setup() {\n        // Add embed class for responsive\n        utils.toggleClass(this.elements.wrapper, this.config.classNames.embed, true);\n\n        // Set intial ratio\n        vimeo.setAspectRatio.call(this);\n\n        // Load the API if not already\n        if (!utils.is.object(window.Vimeo)) {\n            utils\n                .loadScript(this.config.urls.vimeo.api)\n                .then(() => {\n                    vimeo.ready.call(this);\n                })\n                .catch(error => {\n                    this.debug.warn('Vimeo API failed to load', error);\n                });\n        } else {\n            vimeo.ready.call(this);\n        }\n    },\n\n    // Set aspect ratio\n    // For Vimeo we have an extra 300% height <div> to hide the standard controls and UI\n    setAspectRatio(input) {\n        const ratio = utils.is.string(input) ? input.split(':') : this.config.ratio.split(':');\n        const padding = 100 / ratio[0] * ratio[1];\n        const height = 200;\n        const offset = (height - padding) / (height / 50);\n        this.elements.wrapper.style.paddingBottom = `${padding}%`;\n        this.media.style.transform = `translateY(-${offset}%)`;\n    },\n\n    // API Ready\n    ready() {\n        const player = this;\n\n        // Get Vimeo params for the iframe\n        const options = {\n            loop: player.config.loop.active,\n            autoplay: player.autoplay,\n            byline: false,\n            portrait: false,\n            title: false,\n            speed: true,\n            transparent: 0,\n            gesture: 'media',\n        };\n        const params = utils.buildUrlParams(options);\n\n        // Get the source URL or ID\n        let source = player.media.getAttribute('src');\n\n        // Get from <div> if needed\n        if (utils.is.empty(source)) {\n            source = player.media.getAttribute(this.config.attributes.embed.id);\n        }\n\n        const id = utils.parseVimeoId(source);\n\n        // Build an iframe\n        const iframe = utils.createElement('iframe');\n        const src = `https://player.vimeo.com/video/${id}?${params}`;\n        iframe.setAttribute('src', src);\n        iframe.setAttribute('allowfullscreen', '');\n        iframe.setAttribute('allowtransparency', '');\n        iframe.setAttribute('allow', 'autoplay');\n\n        // Inject the package\n        const wrapper = utils.createElement('div');\n        wrapper.appendChild(iframe);\n        player.media = utils.replaceElement(wrapper, player.media);\n\n        // Setup instance\n        // https://github.com/vimeo/player.js\n        player.embed = new window.Vimeo.Player(iframe);\n\n        player.media.paused = true;\n        player.media.currentTime = 0;\n\n        // Create a faux HTML5 API using the Vimeo API\n        player.media.play = () => {\n            player.embed.play().then(() => {\n                player.media.paused = false;\n            });\n        };\n\n        player.media.pause = () => {\n            player.embed.pause().then(() => {\n                player.media.paused = true;\n            });\n        };\n\n        player.media.stop = () => {\n            player.embed.stop().then(() => {\n                player.media.paused = true;\n                player.currentTime = 0;\n            });\n        };\n\n        // Seeking\n        let { currentTime } = player.media;\n        Object.defineProperty(player.media, 'currentTime', {\n            get() {\n                return currentTime;\n            },\n            set(time) {\n                // Get current paused state\n                // Vimeo will automatically play on seek\n                const { paused } = player.media;\n\n                // Set seeking flag\n                player.media.seeking = true;\n\n                // Trigger seeking\n                utils.dispatchEvent.call(player, player.media, 'seeking');\n\n                // Seek after events\n                player.embed.setCurrentTime(time);\n\n                // Restore pause state\n                if (paused) {\n                    player.pause();\n                }\n            },\n        });\n\n        // Playback speed\n        let speed = player.config.speed.selected;\n        Object.defineProperty(player.media, 'playbackRate', {\n            get() {\n                return speed;\n            },\n            set(input) {\n                player.embed.setPlaybackRate(input).then(() => {\n                    speed = input;\n                    utils.dispatchEvent.call(player, player.media, 'ratechange');\n                });\n            },\n        });\n\n        // Volume\n        let { volume } = player.config;\n        Object.defineProperty(player.media, 'volume', {\n            get() {\n                return volume;\n            },\n            set(input) {\n                player.embed.setVolume(input).then(() => {\n                    volume = input;\n                    utils.dispatchEvent.call(player, player.media, 'volumechange');\n                });\n            },\n        });\n\n        // Muted\n        let { muted } = player.config;\n        Object.defineProperty(player.media, 'muted', {\n            get() {\n                return muted;\n            },\n            set(input) {\n                const toggle = utils.is.boolean(input) ? input : false;\n\n                player.embed.setVolume(toggle ? 0 : player.config.volume).then(() => {\n                    muted = toggle;\n                    utils.dispatchEvent.call(player, player.media, 'volumechange');\n                });\n            },\n        });\n\n        // Loop\n        let { loop } = player.config;\n        Object.defineProperty(player.media, 'loop', {\n            get() {\n                return loop;\n            },\n            set(input) {\n                const toggle = utils.is.boolean(input) ? input : player.config.loop.active;\n\n                player.embed.setLoop(toggle).then(() => {\n                    loop = toggle;\n                });\n            },\n        });\n\n        // Source\n        let currentSrc;\n        player.embed.getVideoUrl().then(value => {\n            currentSrc = value;\n        });\n        Object.defineProperty(player.media, 'currentSrc', {\n            get() {\n                return currentSrc;\n            },\n        });\n\n        // Ended\n        Object.defineProperty(player.media, 'ended', {\n            get() {\n                return player.currentTime === player.duration;\n            },\n        });\n\n        // Set aspect ratio based on video size\n        Promise.all([\n            player.embed.getVideoWidth(),\n            player.embed.getVideoHeight(),\n        ]).then(dimensions => {\n            const ratio = utils.getAspectRatio(dimensions[0], dimensions[1]);\n            vimeo.setAspectRatio.call(this, ratio);\n        });\n\n        // Set autopause\n        player.embed.setAutopause(player.config.autopause).then(state => {\n            player.config.autopause = state;\n        });\n\n        // Get title\n        player.embed.getVideoTitle().then(title => {\n            player.config.title = title;\n            ui.setTitle.call(this);\n        });\n\n        // Get current time\n        player.embed.getCurrentTime().then(value => {\n            currentTime = value;\n            utils.dispatchEvent.call(player, player.media, 'timeupdate');\n        });\n\n        // Get duration\n        player.embed.getDuration().then(value => {\n            player.media.duration = value;\n            utils.dispatchEvent.call(player, player.media, 'durationchange');\n        });\n\n        // Get captions\n        player.embed.getTextTracks().then(tracks => {\n            player.media.textTracks = tracks;\n            captions.setup.call(player);\n        });\n\n        player.embed.on('cuechange', data => {\n            let cue = null;\n\n            if (data.cues.length) {\n                cue = utils.stripHTML(data.cues[0].text);\n            }\n\n            captions.setText.call(player, cue);\n        });\n\n        player.embed.on('loaded', () => {\n            if (utils.is.element(player.embed.element) && player.supported.ui) {\n                const frame = player.embed.element;\n\n                // Fix keyboard focus issues\n                // https://github.com/sampotts/plyr/issues/317\n                frame.setAttribute('tabindex', -1);\n            }\n        });\n\n        player.embed.on('play', () => {\n            // Only fire play if paused before\n            if (player.media.paused) {\n                utils.dispatchEvent.call(player, player.media, 'play');\n            }\n            player.media.paused = false;\n            utils.dispatchEvent.call(player, player.media, 'playing');\n        });\n\n        player.embed.on('pause', () => {\n            player.media.paused = true;\n            utils.dispatchEvent.call(player, player.media, 'pause');\n        });\n\n        player.embed.on('timeupdate', data => {\n            player.media.seeking = false;\n            currentTime = data.seconds;\n            utils.dispatchEvent.call(player, player.media, 'timeupdate');\n        });\n\n        player.embed.on('progress', data => {\n            player.media.buffered = data.percent;\n            utils.dispatchEvent.call(player, player.media, 'progress');\n\n            // Check all loaded\n            if (parseInt(data.percent, 10) === 1) {\n                utils.dispatchEvent.call(player, player.media, 'canplaythrough');\n            }\n        });\n\n        player.embed.on('seeked', () => {\n            player.media.seeking = false;\n            utils.dispatchEvent.call(player, player.media, 'seeked');\n            utils.dispatchEvent.call(player, player.media, 'play');\n        });\n\n        player.embed.on('ended', () => {\n            player.media.paused = true;\n            utils.dispatchEvent.call(player, player.media, 'ended');\n        });\n\n        player.embed.on('error', detail => {\n            player.media.error = detail;\n            utils.dispatchEvent.call(player, player.media, 'error');\n        });\n\n        // Rebuild UI\n        setTimeout(() => ui.build.call(player), 0);\n    },\n};\n\nexport default vimeo;\n","// ==========================================================================\n// Plyr Media\n// ==========================================================================\n\nimport support from './support';\nimport utils from './utils';\nimport youtube from './plugins/youtube';\nimport vimeo from './plugins/vimeo';\nimport ui from './ui';\n\n// Sniff out the browser\nconst browser = utils.getBrowser();\n\nconst media = {\n    // Setup media\n    setup() {\n        // If there's no media, bail\n        if (!this.media) {\n            this.debug.warn('No media element found!');\n            return;\n        }\n\n        // Add type class\n        utils.toggleClass(this.elements.container, this.config.classNames.type.replace('{0}', this.type), true);\n\n        // Add provider class\n        utils.toggleClass(this.elements.container, this.config.classNames.provider.replace('{0}', this.provider), true);\n\n        // Add video class for embeds\n        // This will require changes if audio embeds are added\n        if (this.isEmbed) {\n            utils.toggleClass(this.elements.container, this.config.classNames.type.replace('{0}', 'video'), true);\n        }\n\n        if (this.supported.ui) {\n            // Check for picture-in-picture support\n            utils.toggleClass(this.elements.container, this.config.classNames.pip.supported, support.pip && this.isHTML5 && this.isVideo);\n\n            // Check for airplay support\n            utils.toggleClass(this.elements.container, this.config.classNames.airplay.supported, support.airplay && this.isHTML5);\n\n            // If there's no autoplay attribute, assume the video is stopped and add state class\n            utils.toggleClass(this.elements.container, this.config.classNames.stopped, this.config.autoplay);\n\n            // Add iOS class\n            utils.toggleClass(this.elements.container, this.config.classNames.isIos, browser.isIos);\n\n            // Add touch class\n            utils.toggleClass(this.elements.container, this.config.classNames.isTouch, support.touch);\n        }\n\n        // Inject the player wrapper\n        if (this.isVideo) {\n            // Create the wrapper div\n            this.elements.wrapper = utils.createElement('div', {\n                class: this.config.classNames.video,\n            });\n\n            // Wrap the video in a container\n            utils.wrap(this.media, this.elements.wrapper);\n        }\n\n        if (this.isEmbed) {\n            switch (this.provider) {\n                case 'youtube':\n                    youtube.setup.call(this);\n                    break;\n\n                case 'vimeo':\n                    vimeo.setup.call(this);\n                    break;\n\n                default:\n                    break;\n            }\n        } else if (this.isHTML5) {\n            ui.setTitle.call(this);\n        }\n    },\n\n    // Cancel current network requests\n    // See https://github.com/sampotts/plyr/issues/174\n    cancelRequests() {\n        if (!this.isHTML5) {\n            return;\n        }\n\n        // Remove child sources\n        utils.removeElement(this.media.querySelectorAll('source'));\n\n        // Set blank video src attribute\n        // This is to prevent a MEDIA_ERR_SRC_NOT_SUPPORTED error\n        // Info: http://stackoverflow.com/questions/32231579/how-to-properly-dispose-of-an-html5-video-and-close-socket-or-connection\n        this.media.setAttribute('src', this.config.blankVideo);\n\n        // Load the new empty source\n        // This will cancel existing requests\n        // See https://github.com/sampotts/plyr/issues/174\n        this.media.load();\n\n        // Debugging\n        this.debug.log('Cancelled network requests');\n    },\n};\n\nexport default media;\n","// ==========================================================================\n// Plyr source update\n// ==========================================================================\n\nimport { providers } from './types';\nimport utils from './utils';\nimport media from './media';\nimport ui from './ui';\nimport support from './support';\n\nconst source = {\n    // Add elements to HTML5 media (source, tracks, etc)\n    insertElements(type, attributes) {\n        if (utils.is.string(attributes)) {\n            utils.insertElement(type, this.media, {\n                src: attributes,\n            });\n        } else if (utils.is.array(attributes)) {\n            attributes.forEach(attribute => {\n                utils.insertElement(type, this.media, attribute);\n            });\n        }\n    },\n\n    // Update source\n    // Sources are not checked for support so be careful\n    change(input) {\n        if (!utils.is.object(input) || !('sources' in input) || !input.sources.length) {\n            this.debug.warn('Invalid source format');\n            return;\n        }\n\n        // Cancel current network requests\n        media.cancelRequests.call(this);\n\n        // Destroy instance and re-setup\n        this.destroy.call(\n            this,\n            () => {\n                // TODO: Reset menus here\n\n                // Remove elements\n                utils.removeElement(this.media);\n                this.media = null;\n\n                // Reset class name\n                if (utils.is.element(this.elements.container)) {\n                    this.elements.container.removeAttribute('class');\n                }\n\n                // Set the type and provider\n                this.type = input.type;\n                this.provider = !utils.is.empty(input.sources[0].provider) ? input.sources[0].provider : providers.html5;\n\n                // Check for support\n                this.supported = support.check(this.type, this.provider, this.config.inline);\n\n                // Create new markup\n                switch (`${this.provider}:${this.type}`) {\n                    case 'html5:video':\n                        this.media = utils.createElement('video');\n                        break;\n\n                    case 'html5:audio':\n                        this.media = utils.createElement('audio');\n                        break;\n\n                    case 'youtube:video':\n                    case 'vimeo:video':\n                        this.media = utils.createElement('div', {\n                            src: input.sources[0].src,\n                        });\n                        break;\n\n                    default:\n                        break;\n                }\n\n                // Inject the new element\n                this.elements.container.appendChild(this.media);\n\n                // Autoplay the new source?\n                if (utils.is.boolean(input.autoplay)) {\n                    this.config.autoplay = input.autoplay;\n                }\n\n                // Set attributes for audio and video\n                if (this.isHTML5) {\n                    if (this.config.crossorigin) {\n                        this.media.setAttribute('crossorigin', '');\n                    }\n                    if (this.config.autoplay) {\n                        this.media.setAttribute('autoplay', '');\n                    }\n                    if ('poster' in input) {\n                        this.media.setAttribute('poster', input.poster);\n                    }\n                    if (this.config.loop.active) {\n                        this.media.setAttribute('loop', '');\n                    }\n                    if (this.config.muted) {\n                        this.media.setAttribute('muted', '');\n                    }\n                    if (this.config.inline) {\n                        this.media.setAttribute('playsinline', '');\n                    }\n                }\n\n                // Restore class hook\n                ui.addStyleHook.call(this);\n\n                // Set new sources for html5\n                if (this.isHTML5) {\n                    source.insertElements.call(this, 'source', input.sources);\n                }\n\n                // Set video title\n                this.config.title = input.title;\n\n                // Set up from scratch\n                media.setup.call(this);\n\n                // HTML5 stuff\n                if (this.isHTML5) {\n                    // Setup captions\n                    if ('tracks' in input) {\n                        source.insertElements.call(this, 'track', input.tracks);\n                    }\n\n                    // Load HTML5 sources\n                    this.media.load();\n                }\n\n                // If HTML5 or embed but not fully supported, setupInterface and call ready now\n                if (this.isHTML5 || (this.isEmbed && !this.supported.ui)) {\n                    // Setup interface\n                    ui.build.call(this);\n                }\n\n                // Update the fullscreen support\n                this.fullscreen.update();\n            },\n            true,\n        );\n    },\n};\n\nexport default source;\n","// ==========================================================================\n// Plyr\n// plyr.js v3.0.0-beta.19\n// https://github.com/sampotts/plyr\n// License: The MIT License (MIT)\n// ==========================================================================\n\nimport { providers, types } from './types';\nimport defaults from './defaults';\nimport support from './support';\nimport utils from './utils';\n\nimport Console from './console';\nimport Fullscreen from './fullscreen';\nimport Listeners from './listeners';\nimport Storage from './storage';\nimport Ads from './plugins/ads';\n\nimport captions from './captions';\nimport controls from './controls';\nimport media from './media';\nimport source from './source';\nimport ui from './ui';\n\n// Private properties\n// TODO: Use a WeakMap for private globals\n// const globals = new WeakMap();\n\n// Plyr instance\nclass Plyr {\n    constructor(target, options) {\n        this.timers = {};\n\n        // State\n        this.ready = false;\n        this.loading = false;\n        this.failed = false;\n\n        // Set the media element\n        this.media = target;\n\n        // String selector passed\n        if (utils.is.string(this.media)) {\n            this.media = document.querySelectorAll(this.media);\n        }\n\n        // jQuery, NodeList or Array passed, use first element\n        if ((window.jQuery && this.media instanceof jQuery) || utils.is.nodeList(this.media) || utils.is.array(this.media)) {\n            // eslint-disable-next-line\n            this.media = this.media[0];\n        }\n\n        // Set config\n        this.config = utils.extend(\n            {},\n            defaults,\n            options,\n            (() => {\n                try {\n                    return JSON.parse(this.media.getAttribute('data-plyr-config'));\n                } catch (e) {\n                    return {};\n                }\n            })(),\n        );\n\n        // Elements cache\n        this.elements = {\n            container: null,\n            buttons: {},\n            display: {},\n            progress: {},\n            inputs: {},\n            settings: {\n                menu: null,\n                panes: {},\n                tabs: {},\n            },\n            captions: null,\n        };\n\n        // Captions\n        this.captions = {\n            active: null,\n            currentTrack: null,\n        };\n\n        // Fullscreen\n        this.fullscreen = {\n            active: false,\n        };\n\n        // Options\n        this.options = {\n            speed: [],\n            quality: [],\n        };\n\n        // Debugging\n        // TODO: move to globals\n        this.debug = new Console(this.config.debug);\n\n        // Log config options and support\n        this.debug.log('Config', this.config);\n        this.debug.log('Support', support);\n\n        // We need an element to setup\n        if (utils.is.nullOrUndefined(this.media) || !utils.is.element(this.media)) {\n            this.debug.error('Setup failed: no suitable element passed');\n            return;\n        }\n\n        // Bail if the element is initialized\n        if (this.media.plyr) {\n            this.debug.warn('Target already setup');\n            return;\n        }\n\n        // Bail if not enabled\n        if (!this.config.enabled) {\n            this.debug.error('Setup failed: disabled by config');\n            return;\n        }\n\n        // Bail if disabled or no basic support\n        // You may want to disable certain UAs etc\n        if (!support.check().api) {\n            this.debug.error('Setup failed: no support');\n            return;\n        }\n\n        // Cache original element state for .destroy()\n        this.elements.original = this.media.cloneNode(true);\n\n        // Set media type based on tag or data attribute\n        // Supported: video, audio, vimeo, youtube\n        const type = this.media.tagName.toLowerCase();\n\n        // Embed properties\n        let iframe = null;\n        let url = null;\n        let params = null;\n\n        // Different setup based on type\n        switch (type) {\n            case 'div':\n                // Find the frame\n                iframe = this.media.querySelector('iframe');\n\n                // <iframe> type\n                if (utils.is.element(iframe)) {\n                    // Detect provider\n                    url = iframe.getAttribute('src');\n                    this.provider = utils.getProviderByUrl(url);\n\n                    // Rework elements\n                    this.elements.container = this.media;\n                    this.media = iframe;\n\n                    // Reset classname\n                    this.elements.container.className = '';\n\n                    // Get attributes from URL and set config\n                    params = utils.getUrlParams(url);\n                    if (!utils.is.empty(params)) {\n                        const truthy = [\n                            '1',\n                            'true',\n                        ];\n\n                        if (truthy.includes(params.autoplay)) {\n                            this.config.autoplay = true;\n                        }\n                        if (truthy.includes(params.playsinline)) {\n                            this.config.inline = true;\n                        }\n                        if (truthy.includes(params.loop)) {\n                            this.config.loop.active = true;\n                        }\n                    }\n                } else {\n                    // <div> with attributes\n                    this.provider = this.media.getAttribute(this.config.attributes.embed.provider);\n\n                    // Remove attribute\n                    this.media.removeAttribute(this.config.attributes.embed.provider);\n                }\n\n                // Unsupported or missing provider\n                if (utils.is.empty(this.provider) || !Object.keys(providers).includes(this.provider)) {\n                    this.debug.error('Setup failed: Invalid provider');\n                    return;\n                }\n\n                // Audio will come later for external providers\n                this.type = types.video;\n\n                break;\n\n            case 'video':\n            case 'audio':\n                this.type = type;\n                this.provider = providers.html5;\n\n                // Get config from attributes\n                if (this.media.hasAttribute('crossorigin')) {\n                    this.config.crossorigin = true;\n                }\n                if (this.media.hasAttribute('autoplay')) {\n                    this.config.autoplay = true;\n                }\n                if (this.media.hasAttribute('playsinline')) {\n                    this.config.inline = true;\n                }\n                if (this.media.hasAttribute('muted')) {\n                    this.config.muted = true;\n                }\n                if (this.media.hasAttribute('loop')) {\n                    this.config.loop.active = true;\n                }\n\n                break;\n\n            default:\n                this.debug.error('Setup failed: unsupported type');\n                return;\n        }\n\n        // Check for support again but with type\n        this.supported = support.check(this.type, this.provider, this.config.inline);\n\n        // If no support for even API, bail\n        if (!this.supported.api) {\n            this.debug.error('Setup failed: no support');\n            return;\n        }\n\n        // Create listeners\n        this.listeners = new Listeners(this);\n\n        // Setup local storage for user settings\n        this.storage = new Storage(this);\n\n        // Store reference\n        this.media.plyr = this;\n\n        // Wrap media\n        if (!utils.is.element(this.elements.container)) {\n            this.elements.container = utils.createElement('div');\n            utils.wrap(this.media, this.elements.container);\n        }\n\n        // Allow focus to be captured\n        this.elements.container.setAttribute('tabindex', 0);\n\n        // Add style hook\n        ui.addStyleHook.call(this);\n\n        // Setup media\n        media.setup.call(this);\n\n        // Listen for events if debugging\n        if (this.config.debug) {\n            utils.on(this.elements.container, this.config.events.join(' '), event => {\n                this.debug.log(`event: ${event.type}`);\n            });\n        }\n\n        // Setup interface\n        // If embed but not fully supported, build interface now to avoid flash of controls\n        if (this.isHTML5 || (this.isEmbed && !this.supported.ui)) {\n            ui.build.call(this);\n        }\n\n        // Container listeners\n        this.listeners.container();\n\n        // Global listeners\n        this.listeners.global();\n\n        // Setup fullscreen\n        this.fullscreen = new Fullscreen(this);\n\n        // Setup ads if provided\n        this.ads = new Ads(this);\n    }\n\n    // ---------------------------------------\n    // API\n    // ---------------------------------------\n\n    /**\n     * Types and provider helpers\n     */\n    get isHTML5() {\n        return this.provider === providers.html5;\n    }\n    get isEmbed() {\n        return this.isYouTube || this.isVimeo;\n    }\n    get isYouTube() {\n        return this.provider === providers.youtube;\n    }\n    get isVimeo() {\n        return this.provider === providers.vimeo;\n    }\n    get isVideo() {\n        return this.type === types.video;\n    }\n    get isAudio() {\n        return this.type === types.audio;\n    }\n\n    /**\n     * Play the media, or play the advertisement (if they are not blocked)\n     */\n    play() {\n        // If ads are enabled, wait for them first\n        if (this.ads.enabled && !this.ads.initialized) {\n            return this.ads.managerPromise.then(() => this.ads.play()).catch(() => this.media.play());\n        }\n\n        // Return the promise (for HTML5)\n        return this.media.play();\n    }\n\n    /**\n     * Pause the media\n     */\n    pause() {\n        if (!this.playing) {\n            return;\n        }\n\n        this.media.pause();\n    }\n\n    /**\n     * Get paused state\n     */\n    get paused() {\n        return this.media.paused;\n    }\n\n    /**\n     * Get playing state\n     */\n    get playing() {\n        return !this.paused && !this.ended && (this.isHTML5 ? this.media.readyState > 2 : true);\n    }\n\n    /**\n     * Get ended state\n     */\n    get ended() {\n        return this.media.ended;\n    }\n\n    /**\n     * Toggle playback based on current status\n     * @param {boolean} input\n     */\n    togglePlay(input) {\n        // Toggle based on current state if nothing passed\n        const toggle = utils.is.boolean(input) ? input : !this.playing;\n\n        if (toggle) {\n            this.play();\n        } else {\n            this.pause();\n        }\n    }\n\n    /**\n     * Stop playback\n     */\n    stop() {\n        this.restart();\n        this.pause();\n    }\n\n    /**\n     * Restart playback\n     */\n    restart() {\n        this.currentTime = 0;\n    }\n\n    /**\n     * Rewind\n     * @param {number} seekTime - how far to rewind in seconds. Defaults to the config.seekTime\n     */\n    rewind(seekTime) {\n        this.currentTime = this.currentTime - (utils.is.number(seekTime) ? seekTime : this.config.seekTime);\n    }\n\n    /**\n     * Fast forward\n     * @param {number} seekTime - how far to fast forward in seconds. Defaults to the config.seekTime\n     */\n    forward(seekTime) {\n        this.currentTime = this.currentTime + (utils.is.number(seekTime) ? seekTime : this.config.seekTime);\n    }\n\n    /**\n     * Seek to a time\n     * @param {number} input - where to seek to in seconds. Defaults to 0 (the start)\n     */\n    set currentTime(input) {\n        let targetTime = 0;\n\n        if (utils.is.number(input)) {\n            targetTime = input;\n        }\n\n        // Normalise targetTime\n        if (targetTime < 0) {\n            targetTime = 0;\n        } else if (targetTime > this.duration) {\n            targetTime = this.duration;\n        }\n\n        // Set\n        this.media.currentTime = targetTime.toFixed(4);\n\n        // Logging\n        this.debug.log(`Seeking to ${this.currentTime} seconds`);\n    }\n\n    /**\n     * Get current time\n     */\n    get currentTime() {\n        return Number(this.media.currentTime);\n    }\n\n    /**\n     * Get seeking status\n     */\n    get seeking() {\n        return this.media.seeking;\n    }\n\n    /**\n     * Get the duration of the current media\n     */\n    get duration() {\n        // Faux duration set via config\n        const fauxDuration = parseInt(this.config.duration, 10);\n\n        // True duration\n        const realDuration = Number(this.media.duration);\n\n        // If custom duration is funky, use regular duration\n        return !Number.isNaN(fauxDuration) ? fauxDuration : realDuration;\n    }\n\n    /**\n     * Set the player volume\n     * @param {number} value - must be between 0 and 1. Defaults to the value from local storage and config.volume if not set in storage\n     */\n    set volume(value) {\n        let volume = value;\n        const max = 1;\n        const min = 0;\n\n        if (utils.is.string(volume)) {\n            volume = Number(volume);\n        }\n\n        // Load volume from storage if no value specified\n        if (!utils.is.number(volume)) {\n            volume = this.storage.get('volume');\n        }\n\n        // Use config if all else fails\n        if (!utils.is.number(volume)) {\n            ({ volume } = this.config);\n        }\n\n        // Maximum is volumeMax\n        if (volume > max) {\n            volume = max;\n        }\n        // Minimum is volumeMin\n        if (volume < min) {\n            volume = min;\n        }\n\n        // Update config\n        this.config.volume = volume;\n\n        // Set the player volume\n        this.media.volume = volume;\n\n        // If muted, and we're increasing volume, reset muted state\n        if (this.muted && volume > 0) {\n            this.muted = false;\n        }\n    }\n\n    /**\n     * Get the current player volume\n     */\n    get volume() {\n        return this.media.volume;\n    }\n\n    /**\n     * Increase volume\n     * @param {boolean} step - How much to decrease by (between 0 and 1)\n     */\n    increaseVolume(step) {\n        const volume = this.media.muted ? 0 : this.volume;\n        this.volume = volume + (utils.is.number(step) ? step : 1);\n    }\n\n    /**\n     * Decrease volume\n     * @param {boolean} step - How much to decrease by (between 0 and 1)\n     */\n    decreaseVolume(step) {\n        const volume = this.media.muted ? 0 : this.volume;\n        this.volume = volume - (utils.is.number(step) ? step : 1);\n    }\n\n    /**\n     * Set muted state\n     * @param {boolean} mute\n     */\n    set muted(mute) {\n        let toggle = mute;\n\n        // Load muted state from storage\n        if (!utils.is.boolean(toggle)) {\n            toggle = this.storage.get('muted');\n        }\n\n        // Use config if all else fails\n        if (!utils.is.boolean(toggle)) {\n            toggle = this.config.muted;\n        }\n\n        // Update config\n        this.config.muted = toggle;\n\n        // Set mute on the player\n        this.media.muted = toggle;\n    }\n\n    /**\n     * Get current muted state\n     */\n    get muted() {\n        return this.media.muted;\n    }\n\n    /**\n     * Check if the media has audio\n     */\n    get hasAudio() {\n        // Assume yes for all non HTML5 (as we can't tell...)\n        if (!this.isHTML5) {\n            return true;\n        }\n\n        if (this.isAudio) {\n            return true;\n        }\n\n        // Get audio tracks\n        return this.media.mozHasAudio || Boolean(this.media.webkitAudioDecodedByteCount) || Boolean(this.media.audioTracks && this.media.audioTracks.length);\n    }\n\n    /**\n     * Set playback speed\n     * @param {decimal} speed - the speed of playback (0.5-2.0)\n     */\n    set speed(input) {\n        let speed = null;\n\n        if (utils.is.number(input)) {\n            speed = input;\n        }\n\n        if (!utils.is.number(speed)) {\n            speed = this.storage.get('speed');\n        }\n\n        if (!utils.is.number(speed)) {\n            speed = this.config.speed.selected;\n        }\n\n        // Set min/max\n        if (speed < 0.1) {\n            speed = 0.1;\n        }\n        if (speed > 2.0) {\n            speed = 2.0;\n        }\n\n        if (!this.config.speed.options.includes(speed)) {\n            this.debug.warn(`Unsupported speed (${speed})`);\n            return;\n        }\n\n        // Update config\n        this.config.speed.selected = speed;\n\n        // Set media speed\n        this.media.playbackRate = speed;\n    }\n\n    /**\n     * Get current playback speed\n     */\n    get speed() {\n        return this.media.playbackRate;\n    }\n\n    /**\n     * Set playback quality\n     * Currently YouTube only\n     * @param {string} input - Quality level\n     */\n    set quality(input) {\n        let quality = null;\n\n        if (utils.is.string(input)) {\n            quality = input;\n        }\n\n        if (!utils.is.string(quality)) {\n            quality = this.storage.get('quality');\n        }\n\n        if (!utils.is.string(quality)) {\n            quality = this.config.quality.selected;\n        }\n\n        if (!this.options.quality.includes(quality)) {\n            this.debug.warn(`Unsupported quality option (${quality})`);\n            return;\n        }\n\n        // Update config\n        this.config.quality.selected = quality;\n\n        // Set quality\n        this.media.quality = quality;\n    }\n\n    /**\n     * Get current quality level\n     */\n    get quality() {\n        return this.media.quality;\n    }\n\n    /**\n     * Toggle loop\n     * TODO: Finish fancy new logic. Set the indicator on load as user may pass loop as config\n     * @param {boolean} input - Whether to loop or not\n     */\n    set loop(input) {\n        const toggle = utils.is.boolean(input) ? input : this.config.loop.active;\n        this.config.loop.active = toggle;\n        this.media.loop = toggle;\n\n        // Set default to be a true toggle\n        /* const type = ['start', 'end', 'all', 'none', 'toggle'].includes(input) ? input : 'toggle';\n\n        switch (type) {\n            case 'start':\n                if (this.config.loop.end && this.config.loop.end <= this.currentTime) {\n                    this.config.loop.end = null;\n                }\n                this.config.loop.start = this.currentTime;\n                // this.config.loop.indicator.start = this.elements.display.played.value;\n                break;\n\n            case 'end':\n                if (this.config.loop.start >= this.currentTime) {\n                    return this;\n                }\n                this.config.loop.end = this.currentTime;\n                // this.config.loop.indicator.end = this.elements.display.played.value;\n                break;\n\n            case 'all':\n                this.config.loop.start = 0;\n                this.config.loop.end = this.duration - 2;\n                this.config.loop.indicator.start = 0;\n                this.config.loop.indicator.end = 100;\n                break;\n\n            case 'toggle':\n                if (this.config.loop.active) {\n                    this.config.loop.start = 0;\n                    this.config.loop.end = null;\n                } else {\n                    this.config.loop.start = 0;\n                    this.config.loop.end = this.duration - 2;\n                }\n                break;\n\n            default:\n                this.config.loop.start = 0;\n                this.config.loop.end = null;\n                break;\n        } */\n    }\n\n    /**\n     * Get current loop state\n     */\n    get loop() {\n        return this.media.loop;\n    }\n\n    /**\n     * Set new media source\n     * @param {object} input - The new source object (see docs)\n     */\n    set source(input) {\n        source.change.call(this, input);\n    }\n\n    /**\n     * Get current source\n     */\n    get source() {\n        return this.media.currentSrc;\n    }\n\n    /**\n     * Set the poster image for a HTML5 video\n     * @param {input} - the URL for the new poster image\n     */\n    set poster(input) {\n        if (!this.isHTML5 || !this.isVideo) {\n            this.debug.warn('Poster can only be set on HTML5 video');\n            return;\n        }\n\n        if (utils.is.string(input)) {\n            this.media.setAttribute('poster', input);\n        }\n    }\n\n    /**\n     * Get the current poster image\n     */\n    get poster() {\n        if (!this.isHTML5 || !this.isVideo) {\n            return null;\n        }\n\n        return this.media.getAttribute('poster');\n    }\n\n    /**\n     * Set the autoplay state\n     * @param {boolean} input - Whether to autoplay or not\n     */\n    set autoplay(input) {\n        const toggle = utils.is.boolean(input) ? input : this.config.autoplay;\n        this.config.autoplay = toggle;\n    }\n\n    /**\n     * Get the current autoplay state\n     */\n    get autoplay() {\n        return this.config.autoplay;\n    }\n\n    /**\n     * Toggle captions\n     * @param {boolean} input - Whether to enable captions\n     */\n    toggleCaptions(input) {\n        // If there's no full support, or there's no caption toggle\n        if (!this.supported.ui || !utils.is.element(this.elements.buttons.captions)) {\n            return;\n        }\n\n        // If the method is called without parameter, toggle based on current value\n        const show = utils.is.boolean(input) ? input : this.elements.container.className.indexOf(this.config.classNames.captions.active) === -1;\n\n        // Nothing to change...\n        if (this.captions.active === show) {\n            return;\n        }\n\n        // Set global\n        this.captions.active = show;\n\n        // Toggle state\n        utils.toggleState(this.elements.buttons.captions, this.captions.active);\n\n        // Add class hook\n        utils.toggleClass(this.elements.container, this.config.classNames.captions.active, this.captions.active);\n\n        // Trigger an event\n        utils.dispatchEvent.call(this, this.media, this.captions.active ? 'captionsenabled' : 'captionsdisabled');\n    }\n\n    /**\n     * Set the captions language\n     * @param {string} - Two character ISO language code (e.g. EN, FR, PT, etc)\n     */\n    set language(input) {\n        // Nothing specified\n        if (!utils.is.string(input)) {\n            return;\n        }\n\n        // Toggle captions based on input\n        this.toggleCaptions(!utils.is.empty(input));\n\n        // If empty string is passed, assume disable captions\n        if (utils.is.empty(input)) {\n            return;\n        }\n\n        // Normalize\n        const language = input.toLowerCase();\n\n        // If nothing to change, bail\n        if (this.language === language) {\n            return;\n        }\n\n        // Update config\n        this.captions.language = language;\n\n        // Clear caption\n        captions.setText.call(this, null);\n\n        // Update captions\n        captions.setLanguage.call(this);\n\n        // Trigger an event\n        utils.dispatchEvent.call(this, this.media, 'languagechange');\n    }\n\n    /**\n     * Get the current captions language\n     */\n    get language() {\n        return this.captions.language;\n    }\n\n    /**\n     * Toggle picture-in-picture playback on WebKit/MacOS\n     * TODO: update player with state, support, enabled\n     * TODO: detect outside changes\n     */\n    set pip(input) {\n        const states = {\n            pip: 'picture-in-picture',\n            inline: 'inline',\n        };\n\n        // Bail if no support\n        if (!support.pip) {\n            return;\n        }\n\n        // Toggle based on current state if not passed\n        const toggle = utils.is.boolean(input) ? input : this.pip === states.inline;\n\n        // Toggle based on current state\n        this.media.webkitSetPresentationMode(toggle ? states.pip : states.inline);\n    }\n\n    /**\n     * Get the current picture-in-picture state\n     */\n    get pip() {\n        if (!support.pip) {\n            return null;\n        }\n\n        return this.media.webkitPresentationMode;\n    }\n\n    /**\n     * Trigger the airplay dialog\n     * TODO: update player with state, support, enabled\n     */\n    airplay() {\n        // Show dialog if supported\n        if (support.airplay) {\n            this.media.webkitShowPlaybackTargetPicker();\n        }\n    }\n\n    /**\n     * Toggle the player controls\n     * @param {boolean} toggle - Whether to show the controls\n     */\n    toggleControls(toggle) {\n        // We need controls of course...\n        if (!utils.is.element(this.elements.controls)) {\n            return;\n        }\n\n        // Don't hide if no UI support or it's audio\n        if (!this.supported.ui || this.isAudio) {\n            return;\n        }\n\n        let delay = 0;\n        let show = toggle;\n        let isEnterFullscreen = false;\n\n        // Get toggle state if not set\n        if (!utils.is.boolean(toggle)) {\n            if (utils.is.event(toggle)) {\n                // Is the enter fullscreen event\n                isEnterFullscreen = toggle.type === 'enterfullscreen';\n\n                // Whether to show controls\n                show = [\n                    'mouseenter',\n                    'mousemove',\n                    'touchstart',\n                    'touchmove',\n                    'focusin',\n                ].includes(toggle.type);\n\n                // Delay hiding on move events\n                if ([\n                    'mousemove',\n                    'touchmove',\n                    'touchend',\n                ].includes(toggle.type)) {\n                    delay = 2000;\n                }\n\n                // Delay a little more for keyboard users\n                if (toggle.type === 'focusin') {\n                    delay = 3000;\n                    utils.toggleClass(this.elements.controls, this.config.classNames.noTransition, true);\n                }\n            } else {\n                show = utils.hasClass(this.elements.container, this.config.classNames.hideControls);\n            }\n        }\n\n        // Clear timer on every call\n        clearTimeout(this.timers.controls);\n\n        // If the mouse is not over the controls, set a timeout to hide them\n        if (show || this.paused || this.loading) {\n            // Check if controls toggled\n            const toggled = utils.toggleClass(this.elements.container, this.config.classNames.hideControls, false);\n\n            // Trigger event\n            if (toggled) {\n                utils.dispatchEvent.call(this, this.media, 'controlsshown');\n            }\n\n            // Always show controls when paused or if touch\n            if (this.paused || this.loading) {\n                return;\n            }\n\n            // Delay for hiding on touch\n            if (support.touch) {\n                delay = 3000;\n            }\n        }\n\n        // If toggle is false or if we're playing (regardless of toggle),\n        // then set the timer to hide the controls\n        if (!show || this.playing) {\n            this.timers.controls = setTimeout(() => {\n                // If the mouse is over the controls (and not entering fullscreen), bail\n                if ((this.elements.controls.pressed || this.elements.controls.hover) && !isEnterFullscreen) {\n                    return;\n                }\n\n                // Restore transition behaviour\n                if (!utils.hasClass(this.elements.container, this.config.classNames.hideControls)) {\n                    utils.toggleClass(this.elements.controls, this.config.classNames.noTransition, false);\n                }\n\n                // Check if controls toggled\n                const toggled = utils.toggleClass(this.elements.container, this.config.classNames.hideControls, true);\n\n                // Trigger event and close menu\n                if (toggled) {\n                    utils.dispatchEvent.call(this, this.media, 'controlshidden');\n\n                    if (this.config.controls.includes('settings') && !utils.is.empty(this.config.settings)) {\n                        controls.toggleMenu.call(this, false);\n                    }\n                }\n            }, delay);\n        }\n    }\n\n    /**\n     * Add event listeners\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     */\n    on(event, callback) {\n        utils.on(this.elements.container, event, callback);\n    }\n\n    /**\n     * Remove event listeners\n     * @param {string} event - Event type\n     * @param {function} callback - Callback for when event occurs\n     */\n    off(event, callback) {\n        utils.off(this.elements.container, event, callback);\n    }\n\n    /**\n     * Destroy an instance\n     * Event listeners are removed when elements are removed\n     * http://stackoverflow.com/questions/12528049/if-a-dom-element-is-removed-are-its-listeners-also-removed-from-memory\n     * @param {function} callback - Callback for when destroy is complete\n     * @param {boolean} soft - Whether it's a soft destroy (for source changes etc)\n     */\n    destroy(callback, soft = false) {\n        const done = () => {\n            // Reset overflow (incase destroyed while in fullscreen)\n            document.body.style.overflow = '';\n\n            // GC for embed\n            this.embed = null;\n\n            // If it's a soft destroy, make minimal changes\n            if (soft) {\n                if (Object.keys(this.elements).length) {\n                    // Remove elements\n                    utils.removeElement(this.elements.buttons.play);\n                    utils.removeElement(this.elements.captions);\n                    utils.removeElement(this.elements.controls);\n                    utils.removeElement(this.elements.wrapper);\n\n                    // Clear for GC\n                    this.elements.buttons.play = null;\n                    this.elements.captions = null;\n                    this.elements.controls = null;\n                    this.elements.wrapper = null;\n                }\n\n                // Callback\n                if (utils.is.function(callback)) {\n                    callback();\n                }\n            } else {\n                // Unbind listeners\n                this.listeners.clear();\n\n                // Replace the container with the original element provided\n                utils.replaceElement(this.elements.original, this.elements.container);\n\n                // Event\n                utils.dispatchEvent.call(this, this.elements.original, 'destroyed', true);\n\n                // Callback\n                if (utils.is.function(callback)) {\n                    callback.call(this.elements.original);\n                }\n\n                // Clear for garbage collection\n                setTimeout(() => {\n                    this.elements = null;\n                    this.media = null;\n                }, 200);\n            }\n        };\n\n        // Stop playback\n        this.stop();\n\n        // Type specific stuff\n        switch (`${this.provider}:${this.type}`) {\n            case 'html5:video':\n            case 'html5:audio':\n                // Clear timeout\n                clearTimeout(this.timers.loading);\n\n                // Restore native video controls\n                ui.toggleNativeControls.call(this, true);\n\n                // Clean up\n                done();\n\n                break;\n\n            case 'youtube:video':\n                // Clear timers\n                clearInterval(this.timers.buffering);\n                clearInterval(this.timers.playing);\n\n                // Destroy YouTube API\n                if (this.embed !== null) {\n                    this.embed.destroy();\n                }\n\n                // Clean up\n                done();\n\n                break;\n\n            case 'vimeo:video':\n                // Destroy Vimeo API\n                // then clean up (wait, to prevent postmessage errors)\n                if (this.embed !== null) {\n                    this.embed.unload().then(done);\n                }\n\n                // Vimeo does not always return\n                setTimeout(done, 200);\n\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    /**\n     * Check for support for a mime type (HTML5 only)\n     * @param {string} type - Mime type\n     */\n    supports(type) {\n        return support.mime.call(this, type);\n    }\n\n    /**\n     * Check for support\n     * @param {string} type - Player type (audio/video)\n     * @param {string} provider - Provider (html5/youtube/vimeo)\n     * @param {bool} inline - Where player has `playsinline` sttribute\n     */\n    static supported(type, provider, inline) {\n        return support.check(type, provider, inline);\n    }\n\n    /**\n     * Load an SVG sprite into the page\n     * @param {string} url - URL for the SVG sprite\n     * @param {string} [id] - Unique ID\n     */\n    static loadSprite(url, id) {\n        return utils.loadSprite(url, id);\n    }\n}\n\nexport default Plyr;\n"]}